{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the MINKE project sensor documentation! In MINKE we want to create more accessible sensors so that communities can better understand their environment. Learn how to access them in the about section , check out the sensors we offer or get started with our guides . Upfront with our funding This documentation is part of the MINKE project , and has received funding under European Community\u2019s H2020 Programme with Grant Agreement No. 101008724 . Learn more about Smart Citizen funding in our funding section Open Source and Open Access \u00b6 We're against black boxes! The entire hardware and software project is released under open source licenses: Hardware components: CERN Open Hardware License v1.2 Core firmware: GNU GPL v3.0 Software platform: GNU AGPL v3.0 We want everyone to be able to have access to science . All the data we generate is open access and is available in our data platform , and will be periodically posted to Zenodo . Learn more in the data section. Guides \u00b6 Check out our guides and step-by-step tutorials to help you get started with the sensors: Some example guides Installing the Citizen Kit Onboarding new sensors Uploading SD Card Data Update the Firmware Edit the Firmware","title":"Welcome!"},{"location":"#open-source-and-open-access","text":"We're against black boxes! The entire hardware and software project is released under open source licenses: Hardware components: CERN Open Hardware License v1.2 Core firmware: GNU GPL v3.0 Software platform: GNU AGPL v3.0 We want everyone to be able to have access to science . All the data we generate is open access and is available in our data platform , and will be periodically posted to Zenodo . Learn more in the data section.","title":"Open Source and Open Access"},{"location":"#guides","text":"Check out our guides and step-by-step tutorials to help you get started with the sensors: Some example guides Installing the Citizen Kit Onboarding new sensors Uploading SD Card Data Update the Firmware Edit the Firmware","title":"Guides"},{"location":"Troubleshooting/","text":"Troubleshooting \u00b6 First, reboot your kit \u00b6 The magical reset button Before trying anything else, the data board of your SCK comes with a very functional button that makes a hardware reset on the whole device. This is probably our best first try once the kit has any problem. You can see it here: Some issues this might help solving: The kit hasn't been posting data for a while The kit doesn't respond to user interaction with the ON/OFF button The LED is fixed and does not react to anything ... Pressing the reset button will not delete any configuration, it will simply restart your device. The light will go off and on and the device will start again with a white LED. This button is also to be used when reflashing the firmware, by double clicking it. Have a look at the guide here . You can also perform a reboot by disconnecting the battery and the USB cable so that the kit is restarted. In this way we will not lose any data or configuration. However, if we are in SD card mode , the kit won't know what time it is and we will need to give to him. For doing so: Press the ON/OFF button once. The LED should be breathing RED. Connect to the network SmartCitizen[...] and set it up again to log in SD card mode . The network won't show up \u00b6 Before configuring the Kit, if the SmartCitizen[...] network doesn't show up, make sure the LED is red. If not, press the button until the LED turns red. Factory reset your kit \u00b6 You can fully reset the Kit to the default settings so you can register again your device. Press the main button for 15 seconds . After 5 seconds the light will go off and will go on again after 15 seconds. Then you can release the button and your device will be fully resetted as a brand new Kit. The LED does not turn on and the kit does not work \u00b6 First of all, push the kit button. Maybe it's simply off. If this does not work, most likely the kit has been left without battery. You will have to charge it using the USB charger. Any other mobile charger will also work. We will know that it is charging when the LED emits orange pulses and once the battery is charged it will emit green . If the kit does not respond at all, it is probably worth trying with another USB cable, in case there is some problem there. If not, drop us an email or post on the forum The kit does not store the data on the SD card \u00b6 Some SD cards may have problems over time. We can try formatting it, but in case it does not work any micro SD card we buy at any mobile or computer store it will work. The size is not important and any micro SD or micro SDHC 512MB card up to 32GB will work. The kit does not boot with the PMS Sensor \u00b6 Make sure that you power the Smart Citizen Kit with a good enough USB cable and with an adaptor that can provide at least 1A. We have found some issues when powering the sensor with a thin cable, or from a weak power source, like a screen. Known (fixed) issues \u00b6 In this section, we will detail some problems you might have found in the early firmware versions of SCK 2.1. Light sensor reads 0 and temperature/humidity sensor does not work \u00b6 The issue is caused due to a firmware bug (light) and a problem with some SHT31 sensors (also fixed by firmware). A full explanation is detailed in the forum and the fix was released with V0.9.4 of the SAMD firmware. Noise readings don't go below 45dBA \u00b6 This issue is caused due to a firmware bug that initialized badly the I2S microphone in SCK2.0 and SCK2.1 sensors. A full explanation is detailed in the forum and and the fix was released with a pre-releasue V0.9.8 of the SAMD firmware. PM Sensor always reads 0ug/m3 \u00b6 This issue has been detected after a batch from Plantower PMS5003 sensors during 2021 that yields 0ug/m3. A full explanation is detailed this AN and in the forum and the fix release is V0.9.9 . The sensor operation is correct, and there is no need for hardware replacement.","title":"Troubleshooting"},{"location":"Troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"Troubleshooting/#first-reboot-your-kit","text":"The magical reset button Before trying anything else, the data board of your SCK comes with a very functional button that makes a hardware reset on the whole device. This is probably our best first try once the kit has any problem. You can see it here: Some issues this might help solving: The kit hasn't been posting data for a while The kit doesn't respond to user interaction with the ON/OFF button The LED is fixed and does not react to anything ... Pressing the reset button will not delete any configuration, it will simply restart your device. The light will go off and on and the device will start again with a white LED. This button is also to be used when reflashing the firmware, by double clicking it. Have a look at the guide here . You can also perform a reboot by disconnecting the battery and the USB cable so that the kit is restarted. In this way we will not lose any data or configuration. However, if we are in SD card mode , the kit won't know what time it is and we will need to give to him. For doing so: Press the ON/OFF button once. The LED should be breathing RED. Connect to the network SmartCitizen[...] and set it up again to log in SD card mode .","title":"First, reboot your kit"},{"location":"Troubleshooting/#the-network-wont-show-up","text":"Before configuring the Kit, if the SmartCitizen[...] network doesn't show up, make sure the LED is red. If not, press the button until the LED turns red.","title":"The network won't show up"},{"location":"Troubleshooting/#factory-reset-your-kit","text":"You can fully reset the Kit to the default settings so you can register again your device. Press the main button for 15 seconds . After 5 seconds the light will go off and will go on again after 15 seconds. Then you can release the button and your device will be fully resetted as a brand new Kit.","title":"Factory reset your kit"},{"location":"Troubleshooting/#the-led-does-not-turn-on-and-the-kit-does-not-work","text":"First of all, push the kit button. Maybe it's simply off. If this does not work, most likely the kit has been left without battery. You will have to charge it using the USB charger. Any other mobile charger will also work. We will know that it is charging when the LED emits orange pulses and once the battery is charged it will emit green . If the kit does not respond at all, it is probably worth trying with another USB cable, in case there is some problem there. If not, drop us an email or post on the forum","title":"The LED does not turn on and the kit does not work"},{"location":"Troubleshooting/#the-kit-does-not-store-the-data-on-the-sd-card","text":"Some SD cards may have problems over time. We can try formatting it, but in case it does not work any micro SD card we buy at any mobile or computer store it will work. The size is not important and any micro SD or micro SDHC 512MB card up to 32GB will work.","title":"The kit does not store the data on the SD card"},{"location":"Troubleshooting/#the-kit-does-not-boot-with-the-pms-sensor","text":"Make sure that you power the Smart Citizen Kit with a good enough USB cable and with an adaptor that can provide at least 1A. We have found some issues when powering the sensor with a thin cable, or from a weak power source, like a screen.","title":"The kit does not boot with the PMS Sensor"},{"location":"Troubleshooting/#known-fixed-issues","text":"In this section, we will detail some problems you might have found in the early firmware versions of SCK 2.1.","title":"Known (fixed) issues"},{"location":"Troubleshooting/#light-sensor-reads-0-and-temperaturehumidity-sensor-does-not-work","text":"The issue is caused due to a firmware bug (light) and a problem with some SHT31 sensors (also fixed by firmware). A full explanation is detailed in the forum and the fix was released with V0.9.4 of the SAMD firmware.","title":"Light sensor reads 0 and temperature/humidity sensor does not work"},{"location":"Troubleshooting/#noise-readings-dont-go-below-45dba","text":"This issue is caused due to a firmware bug that initialized badly the I2S microphone in SCK2.0 and SCK2.1 sensors. A full explanation is detailed in the forum and and the fix was released with a pre-releasue V0.9.8 of the SAMD firmware.","title":"Noise readings don't go below 45dBA"},{"location":"Troubleshooting/#pm-sensor-always-reads-0ugm3","text":"This issue has been detected after a batch from Plantower PMS5003 sensors during 2021 that yields 0ug/m3. A full explanation is detailed this AN and in the forum and the fix release is V0.9.9 . The sensor operation is correct, and there is no need for hardware replacement.","title":"PM Sensor always reads 0ug/m3"},{"location":"_FAQ/","text":"Frequently asked questions \u00b6 Can the sensors be placed outdoors? \u00b6 Yes. The sensor is designed for both indoors and outdoors use. But if you\u2019re planning to use it outdoors, you will have to consider purchasing or making a rainproof enclosure. Can I make my own rainproof enclosure? \u00b6 Of course! The manufacturing files for the 3D printed enclosure will be available to download in the Enclosures repository . Throughout the history of the Smart Citizen project, we\u2019ve seen many inventive solutions for placing the sensor outdoors. Can I charge the sensors with a solar panel? \u00b6 Sure! But note that the sensor requires a 5V solar panel to work properly. More information here Can I add external sensors to the system? \u00b6 Yes. The sensor has an independently configurable auxiliary bus at 3.3V with a SEEED Grove connector. The Bus has native support for I2C, but it can also be setup on firmware as a GPIO or UART. It can supply power up to 750mA, and it can be enabled or disabled by software. More info here What happens if there is a loss of network connectivity? \u00b6 If the sensor is working in network mode and at any time the network is not available, it will store the data on its internal memory and publish all the collected data as soon as the network is available again. Which external sensors can be added? \u00b6 Quite a few! Check here Will I be able to access the collected data? \u00b6 Of course! The data collected by your sensor is available for anyone on the Smart Citizen Platform , and you can download it at any time as a CSV file. Besides, you can also use the API to built custom applications to interact with your device. If you are familiar with python, check also scdata How does the kit record the data? \u00b6 The sensor can work in network and SD card modes. In network mode, the sensor publish data to the SC platform over Wi-Fi (every minute by default, but configurable). In SD card mode, all the collected data is stored locally in CSV format, and it can be later uploaded manually to the platform using the \"Manual Data Upload\" option. What networks does it support? \u00b6 The SCK supports Wi-Fi WEP, WPA/WPA2 and open networks that are common networks in domestic environments and small businesses. However, like many other embedded devices such as Apple TV\u00ae or Chromecast\u00ae, it does not support networks with captive portals such as those found in Airports and Hotels. Currently, it also does not WPA/WPA2 Enterprise networks such as EDUROAM. However, they will be supported in the future after a firmware updated. I have a firewall. What do I need to know? \u00b6 Here are the ports and protocols used by the Kit to communicate with the platform: Service Function Protocol Port Address MQTT Send Data TCP 1883 (80 legacy firmware) mqtt.smartcitizen.me NTP Sync Time UDP 80 ntp.smartcitizen.me Notice we use custom ports already to avoid some firewall restrictions Is there a mobile phone app that lets me view the data? \u00b6 Currently there is an android app available, but we are working to make the website fully mobile device friendly, so that no mobile phone app is required. We would rather focus the time of our small team on the kits themselves instead of maintaining apps. So our final aim is to be app free, but fully mobile friendly. How accurate are the measurements? \u00b6 Weather, noise, light and PM sensor measurements have been calibrated and validated against reference sensors through both in-house and external validations and they provide accurate data. Make sure you check the performance section for more information. Are there any notable case studies using similar sensors? \u00b6 Yes! Check all of them here . A particularly interesting case study is the Making Sense project at Plac\u0327a del Sol in Barcelona, where a group of 15 technology enthusiasts and environmentalists joined a community of neighbours from a middle-class district that has been suffering from noise issues due to the nightlife in the square. You can find more information about this case study at: www.making-sense.eu What happens if I want to move the device or give it to someone else? \u00b6 Just by pressing the button you can fully reset your sensor and configure it again using your account or a new one. All your previous data will remain available on the platform as it was before the reset. What about using other wireless technologies? \u00b6 We are working closely with Barcelona\u2019s The Things Network community to develop a TTN enabled sensor. A LoRA prototype has been tested, but we don\u2019t have dates for the final version yet. BLE, Zigbee, or others are not currently supported, and except for G5, we are not planning to implement them unless there is a custom hardware integration demand. Can I remove my data from the platform? \u00b6 Of course. You are the owner of the data that you collect, and you can download and/or delete all your sensor data at any time. How can I retrieve the MAC address from my device? \u00b6 You can retrieve the MAC address with two methods: either you can use your phone (see below), or follow this guide if you want to try out the console interface in the kit. Using your phone Set the SCK in setup mode (press the button once, the LED should turn red). With your phone, join the Wi-Fi network created by your Kit; it should be SmartCitizen[\u2026]. Once you are on your Kit configuration page, go to the Info section. You will see a page with all the information about your Kit. Your MAC address is listed as seen below: What batteries are shipped with the kits? \u00b6 The default SCK 2.1 Kits come with a 2000mAh LiPo battery model PL804050 (see datasheet and material safety data sheets ). For custom projects we also offer a bigger 6000mAh LiPo battery model DTP605068 (see datasheet and material safety data sheets ). The connector is JST-PHR-2 . When looking at the data board from the top (white side), the positive of the battery (red) should be on the left. We are working on a new dynamic battery calculator. Currently, you can find some approximate data here for the SCK 2.1. Are the electronics waterproof? \u00b6 No. They cannot be exposed to water, high humidity, corrosive environments, or moisture. Always use an enclosure when exposed outdoors. Highly humid environments can provoke corrosion in the sensors (symptom of this is blue powder near the sensors in the urban board). To help protect them, we recommend using transparent nail polish in these areas. Do not obscure the areas in red : If you are using any enclosure from the repository , we also recommend using a filtration foam (PPI-20/10) like this one . More info here","title":"FAQ"},{"location":"_FAQ/#frequently-asked-questions","text":"","title":"Frequently asked questions"},{"location":"_FAQ/#can-the-sensors-be-placed-outdoors","text":"Yes. The sensor is designed for both indoors and outdoors use. But if you\u2019re planning to use it outdoors, you will have to consider purchasing or making a rainproof enclosure.","title":"Can the sensors be placed outdoors?"},{"location":"_FAQ/#can-i-make-my-own-rainproof-enclosure","text":"Of course! The manufacturing files for the 3D printed enclosure will be available to download in the Enclosures repository . Throughout the history of the Smart Citizen project, we\u2019ve seen many inventive solutions for placing the sensor outdoors.","title":"Can I make my own rainproof enclosure?"},{"location":"_FAQ/#can-i-charge-the-sensors-with-a-solar-panel","text":"Sure! But note that the sensor requires a 5V solar panel to work properly. More information here","title":"Can I charge the sensors with a solar panel?"},{"location":"_FAQ/#can-i-add-external-sensors-to-the-system","text":"Yes. The sensor has an independently configurable auxiliary bus at 3.3V with a SEEED Grove connector. The Bus has native support for I2C, but it can also be setup on firmware as a GPIO or UART. It can supply power up to 750mA, and it can be enabled or disabled by software. More info here","title":"Can I add external sensors to the system?"},{"location":"_FAQ/#what-happens-if-there-is-a-loss-of-network-connectivity","text":"If the sensor is working in network mode and at any time the network is not available, it will store the data on its internal memory and publish all the collected data as soon as the network is available again.","title":"What happens if there is a loss of network connectivity?"},{"location":"_FAQ/#which-external-sensors-can-be-added","text":"Quite a few! Check here","title":"Which external sensors can be added?"},{"location":"_FAQ/#will-i-be-able-to-access-the-collected-data","text":"Of course! The data collected by your sensor is available for anyone on the Smart Citizen Platform , and you can download it at any time as a CSV file. Besides, you can also use the API to built custom applications to interact with your device. If you are familiar with python, check also scdata","title":"Will I be able to access the collected data?"},{"location":"_FAQ/#how-does-the-kit-record-the-data","text":"The sensor can work in network and SD card modes. In network mode, the sensor publish data to the SC platform over Wi-Fi (every minute by default, but configurable). In SD card mode, all the collected data is stored locally in CSV format, and it can be later uploaded manually to the platform using the \"Manual Data Upload\" option.","title":"How does the kit record the data?"},{"location":"_FAQ/#what-networks-does-it-support","text":"The SCK supports Wi-Fi WEP, WPA/WPA2 and open networks that are common networks in domestic environments and small businesses. However, like many other embedded devices such as Apple TV\u00ae or Chromecast\u00ae, it does not support networks with captive portals such as those found in Airports and Hotels. Currently, it also does not WPA/WPA2 Enterprise networks such as EDUROAM. However, they will be supported in the future after a firmware updated.","title":"What networks does it support?"},{"location":"_FAQ/#i-have-a-firewall-what-do-i-need-to-know","text":"Here are the ports and protocols used by the Kit to communicate with the platform: Service Function Protocol Port Address MQTT Send Data TCP 1883 (80 legacy firmware) mqtt.smartcitizen.me NTP Sync Time UDP 80 ntp.smartcitizen.me Notice we use custom ports already to avoid some firewall restrictions","title":"I have a firewall. What do I need to know?"},{"location":"_FAQ/#is-there-a-mobile-phone-app-that-lets-me-view-the-data","text":"Currently there is an android app available, but we are working to make the website fully mobile device friendly, so that no mobile phone app is required. We would rather focus the time of our small team on the kits themselves instead of maintaining apps. So our final aim is to be app free, but fully mobile friendly.","title":"Is there a mobile phone app that lets me view the data?"},{"location":"_FAQ/#how-accurate-are-the-measurements","text":"Weather, noise, light and PM sensor measurements have been calibrated and validated against reference sensors through both in-house and external validations and they provide accurate data. Make sure you check the performance section for more information.","title":"How accurate are the measurements?"},{"location":"_FAQ/#are-there-any-notable-case-studies-using-similar-sensors","text":"Yes! Check all of them here . A particularly interesting case study is the Making Sense project at Plac\u0327a del Sol in Barcelona, where a group of 15 technology enthusiasts and environmentalists joined a community of neighbours from a middle-class district that has been suffering from noise issues due to the nightlife in the square. You can find more information about this case study at: www.making-sense.eu","title":"Are there any notable case studies using similar sensors?"},{"location":"_FAQ/#what-happens-if-i-want-to-move-the-device-or-give-it-to-someone-else","text":"Just by pressing the button you can fully reset your sensor and configure it again using your account or a new one. All your previous data will remain available on the platform as it was before the reset.","title":"What happens if I want to move the device or give it to someone else?"},{"location":"_FAQ/#what-about-using-other-wireless-technologies","text":"We are working closely with Barcelona\u2019s The Things Network community to develop a TTN enabled sensor. A LoRA prototype has been tested, but we don\u2019t have dates for the final version yet. BLE, Zigbee, or others are not currently supported, and except for G5, we are not planning to implement them unless there is a custom hardware integration demand.","title":"What about using other wireless technologies?"},{"location":"_FAQ/#can-i-remove-my-data-from-the-platform","text":"Of course. You are the owner of the data that you collect, and you can download and/or delete all your sensor data at any time.","title":"Can I remove my data from the platform?"},{"location":"_FAQ/#how-can-i-retrieve-the-mac-address-from-my-device","text":"You can retrieve the MAC address with two methods: either you can use your phone (see below), or follow this guide if you want to try out the console interface in the kit. Using your phone Set the SCK in setup mode (press the button once, the LED should turn red). With your phone, join the Wi-Fi network created by your Kit; it should be SmartCitizen[\u2026]. Once you are on your Kit configuration page, go to the Info section. You will see a page with all the information about your Kit. Your MAC address is listed as seen below:","title":"How can I retrieve the MAC address from my device?"},{"location":"_FAQ/#what-batteries-are-shipped-with-the-kits","text":"The default SCK 2.1 Kits come with a 2000mAh LiPo battery model PL804050 (see datasheet and material safety data sheets ). For custom projects we also offer a bigger 6000mAh LiPo battery model DTP605068 (see datasheet and material safety data sheets ). The connector is JST-PHR-2 . When looking at the data board from the top (white side), the positive of the battery (red) should be on the left. We are working on a new dynamic battery calculator. Currently, you can find some approximate data here for the SCK 2.1.","title":"What batteries are shipped with the kits?"},{"location":"_FAQ/#are-the-electronics-waterproof","text":"No. They cannot be exposed to water, high humidity, corrosive environments, or moisture. Always use an enclosure when exposed outdoors. Highly humid environments can provoke corrosion in the sensors (symptom of this is blue powder near the sensors in the urban board). To help protect them, we recommend using transparent nail polish in these areas. Do not obscure the areas in red : If you are using any enclosure from the repository , we also recommend using a filtration foam (PPI-20/10) like this one . More info here","title":"Are the electronics waterproof?"},{"location":"About/about/","text":"Smart Citizen is a project by Fab Lab Barcelona at the Institute For Advanced Architecture Of Catalonia . The Smart Citizen project has joined forces with several research institutions in Europe to create MINKE , a project that aims to create accessible research infrastructure in marine environments. More about funding MINKE project , and has received funding under European Community\u2019s H2020 Programme with Grant Agreement No. 101008724 . Smart Citizen, as part of MINKE , will make low cost sensors more accessible by offering them as part of an European public research infrastructure, which includes a wide range of high end metrological insfrastructures, which can be complemented by using low cost sensors to increase spatial and temporal resolution. This will help communities to better understand their environment, and scientific institutions to have more data. To achieve this, during the project we will be offering access to our sensors through a series of Open Calls , with the idea that, in a not-too-far-away future, these sensors will be part of an open infrastructure for anyone to apply to for environmental sensing. Interested? Drop us an email at info@smartcitizen.me to collaborate or learn more!","title":"About"},{"location":"Data/Data%20Analysis/","text":"Sensor Analysis Framework \u00b6 When dealing with sensor data, specially with low cost sensors, a great part of the effort needs to be dedicated to data analysis . After a careful data collection, this stage of our experiments is fundamental to extract meaningful conclusions and prepare reports from them. For this reason, we have developed a data analysis framework that we call the Sensor Analysis Framework . In this section, we will detail how this framework is built, how to install it, and make most use of it. We care for open science \u00b6 The framework is writen in Python , and can be easily installed on any computer with simple pip install scdata . It is intended to provide an state-of-the art data analysis environment , adapted for the uses within the Smart Citizen Project, but that can be easily expanded for other use cases. The ultimate purpose of the framework, is to allow for reproducible research by providing a set of tools that can are replicable, and expandable among researchers and users alike, contributing to FAIR data principles . By SangyaPundir - Own work , CC BY-SA 4.0 Raw and processed data All the raw sensor data from the devices is sent to the Platform and processed outside of the sensors. Raw data is never deleted , and the postprocessing of it can be traced back to it's origin by using the sensor blueprint information. This way, we guarantee openness and accesibility of the data for research purposes. Check this guide to learn more about how we postprocess the data of the sensors and how to make it your own way. The framework integrates with the Smart Citizen API and helps with the analysis of large amounts of data in an efficient way . It also integrates functionality to generate reports in html or pdf format, and to publish datasets and documents to Zenodo . More familiar with R? R users won't be left stranded. RPY2 provides functionality to send data from python to R quite easily. Check the source code How we use it \u00b6 The main purpose of the framework is to make our lives easier when dealing with various sources of data. Let's see different use cases: Get sensor data and visualise it This is probably the most common use case: exploring data in a visual way. The framework allows downloading data from the Smart Citizen API or other sources , as well as to load local csv files. Then, different data explorations options are readily available, and not limited to them due to the great visualisation tools in python . Finally, you can generate html, or pdf reports for sharing the results. Examples Check the examples in the Github Repository Organise your data Handling a lot of different sensors can be at times difficult to organise and have traceability. For this, we created the concept of test , which groups a set of devices, potentially from various sources. This is convenient since metadata can be addeed to the test instance describing, for instance, what was done, the calibration data for the device, necessary preprocessing for the data, etc. This test can be later loaded in a separate analysis session, modified or expanded, keeping all the data findable. Some example metadata that can be stored would be: Test Location, date and author Kit type and reference Sensor calibration data or reference Availability of reference equipment measurement and type Check the guide Check the guide on how to organise sensor data Clean sensor data Sensor data never comes clean and tidy in the real world. For this reason, data can be cleaned with simple, and not that simple algorithms for later processing. Several functions are already implemented (filtering with convolution, Kalman filters , anomaly detection, ...), and more can be implemented in the source files. Model sensor data Low cost sensor data needs calibration, with more or less complex regression algorithms. This can be done at times with a simple linear regression, but it is not the only case. Sensors generally present non-linearities, and linear models might not be the bests at handling the data robustly. For this, a set of models ir rightly implemented, using the power of common statistics and machine learning frameworks such as sci-kit learn , tensorflow , keras , and stats models . Guidelines on sensor development Check our guidelines on sensor deployment to see why this is important in some cases. Batch analysis Automatisation of all this tools can be very handy at times, since we want to spend less time programming analysis tools than actually doing analysis. Tasks can be programmed in batch to be processed automatically by the framework in an autonomous way. For instance, some interesting use cases of this could be: Downloading data from many devices, do something (clean it) and export it to .csv Downloading data and generate plots, extract metrics and generate reports for many devices Testing calibration models with different hyperparameters, modeling approaches and datasets Share data One important aspect of our research is to share the data so that others can work on it, and build on top of our results, validate the conclusions or simply disseminate the work done. For this, integration with zenodo is provided to share datasets and reports: Have a look at the features within the framework: Tools to retrieve data from the Smart Citizen's API or to load them from local sources (in csv format, compatible with the SCK SD card data) A data handling framework based on the well known Pandas package An exploratory data analysis tools to study sensor behaviour and correlations with different types of plots A sensor model calibration toolset with classical statistical methods such as linear regression, ARIMA, SARIMA-X, as well as more modern Machine Learning techniques with the use of LSTM networks, RF (Random Forest), SVR (Support Vector Regression) models for sequential data prediction and forecasting Methods to statistically validate and study the performance of these models, export and store them As a bonus, an interface to convert the python objects into the statistical analysis language R Info Check the guide on how to set it up here Source files \u00b6 Download Check the source code","title":"Data Analysis"},{"location":"Data/Data%20Analysis/#sensor-analysis-framework","text":"When dealing with sensor data, specially with low cost sensors, a great part of the effort needs to be dedicated to data analysis . After a careful data collection, this stage of our experiments is fundamental to extract meaningful conclusions and prepare reports from them. For this reason, we have developed a data analysis framework that we call the Sensor Analysis Framework . In this section, we will detail how this framework is built, how to install it, and make most use of it.","title":"Sensor Analysis Framework"},{"location":"Data/Data%20Analysis/#we-care-for-open-science","text":"The framework is writen in Python , and can be easily installed on any computer with simple pip install scdata . It is intended to provide an state-of-the art data analysis environment , adapted for the uses within the Smart Citizen Project, but that can be easily expanded for other use cases. The ultimate purpose of the framework, is to allow for reproducible research by providing a set of tools that can are replicable, and expandable among researchers and users alike, contributing to FAIR data principles . By SangyaPundir - Own work , CC BY-SA 4.0 Raw and processed data All the raw sensor data from the devices is sent to the Platform and processed outside of the sensors. Raw data is never deleted , and the postprocessing of it can be traced back to it's origin by using the sensor blueprint information. This way, we guarantee openness and accesibility of the data for research purposes. Check this guide to learn more about how we postprocess the data of the sensors and how to make it your own way. The framework integrates with the Smart Citizen API and helps with the analysis of large amounts of data in an efficient way . It also integrates functionality to generate reports in html or pdf format, and to publish datasets and documents to Zenodo . More familiar with R? R users won't be left stranded. RPY2 provides functionality to send data from python to R quite easily. Check the source code","title":"We care for open science"},{"location":"Data/Data%20Analysis/#how-we-use-it","text":"The main purpose of the framework is to make our lives easier when dealing with various sources of data. Let's see different use cases: Get sensor data and visualise it This is probably the most common use case: exploring data in a visual way. The framework allows downloading data from the Smart Citizen API or other sources , as well as to load local csv files. Then, different data explorations options are readily available, and not limited to them due to the great visualisation tools in python . Finally, you can generate html, or pdf reports for sharing the results. Examples Check the examples in the Github Repository Organise your data Handling a lot of different sensors can be at times difficult to organise and have traceability. For this, we created the concept of test , which groups a set of devices, potentially from various sources. This is convenient since metadata can be addeed to the test instance describing, for instance, what was done, the calibration data for the device, necessary preprocessing for the data, etc. This test can be later loaded in a separate analysis session, modified or expanded, keeping all the data findable. Some example metadata that can be stored would be: Test Location, date and author Kit type and reference Sensor calibration data or reference Availability of reference equipment measurement and type Check the guide Check the guide on how to organise sensor data Clean sensor data Sensor data never comes clean and tidy in the real world. For this reason, data can be cleaned with simple, and not that simple algorithms for later processing. Several functions are already implemented (filtering with convolution, Kalman filters , anomaly detection, ...), and more can be implemented in the source files. Model sensor data Low cost sensor data needs calibration, with more or less complex regression algorithms. This can be done at times with a simple linear regression, but it is not the only case. Sensors generally present non-linearities, and linear models might not be the bests at handling the data robustly. For this, a set of models ir rightly implemented, using the power of common statistics and machine learning frameworks such as sci-kit learn , tensorflow , keras , and stats models . Guidelines on sensor development Check our guidelines on sensor deployment to see why this is important in some cases. Batch analysis Automatisation of all this tools can be very handy at times, since we want to spend less time programming analysis tools than actually doing analysis. Tasks can be programmed in batch to be processed automatically by the framework in an autonomous way. For instance, some interesting use cases of this could be: Downloading data from many devices, do something (clean it) and export it to .csv Downloading data and generate plots, extract metrics and generate reports for many devices Testing calibration models with different hyperparameters, modeling approaches and datasets Share data One important aspect of our research is to share the data so that others can work on it, and build on top of our results, validate the conclusions or simply disseminate the work done. For this, integration with zenodo is provided to share datasets and reports: Have a look at the features within the framework: Tools to retrieve data from the Smart Citizen's API or to load them from local sources (in csv format, compatible with the SCK SD card data) A data handling framework based on the well known Pandas package An exploratory data analysis tools to study sensor behaviour and correlations with different types of plots A sensor model calibration toolset with classical statistical methods such as linear regression, ARIMA, SARIMA-X, as well as more modern Machine Learning techniques with the use of LSTM networks, RF (Random Forest), SVR (Support Vector Regression) models for sequential data prediction and forecasting Methods to statistically validate and study the performance of these models, export and store them As a bonus, an interface to convert the python objects into the statistical analysis language R Info Check the guide on how to set it up here","title":"How we use it"},{"location":"Data/Data%20Analysis/#source-files","text":"Download Check the source code","title":"Source files"},{"location":"Data/Sensor%20Platform/","text":"Sensor Platform \u00b6 The platform is a front and backend solution for ingesting, storing and interacting with public data with a particular focus on crowd sensing applications. We believe building modular and reusable software and using existing platforms is critical towards optimizing the research and development effort. Are all systems operational? Check the smartcitizen.me instance status in real time in the uptimerobot.com dashboard. Check the guides We prepared a series of guides to help you on the most common features you will use Onboarding Sensors Uploading SD Card Data Downloading data Want to learn more? Check the developers ready API Documentation Software components \u00b6 Smart Citizen Website : It aims to provide a visual website where the project environmental sensors can be accessed in near real time to facilitate the exploration of data with other contextual data (maps, keywords) and processed reports. This is especially important towards citizens engaging at each local site having a sense of ownership over a technology intervention has been associated with sustained community engagement (Balestrini et al. 2014) . The main instance its available at smartcitizen.me/kits . You can explore and contribute to the source . This is free software available under GNU Affero General Public License (AGPL). Smart Citizen API : The platform provides a REST interface for all the functionalities available on the Website. That allows applications to be developed on easily on top having access to all the features to create complex and rich tools. The main instance its available at api.smartcitizen.me . You can explore and contribute to the source . One examples of this tools is the Sensors Analysis Framework or the iSCAPE Virtual Living Lab , both developed during the iSCAPE project ) This is free software available under GNU Affero General Public License (AGPL). Onboarding app : It aims to facilitate the process of sensor setup to ensure that users, irrespective of technical expertise, can install the sensors. It guides the user through the process of the setup using simple language and a friendly graphic language. It is built as a separate tool from the core Smart Citizen Webpage in order it can be customized for each deployment. It exchange data with the core platform using the Smart Citizen API. The main instance its available at start.smartcitizen.me . There are also customized instances for specific projects such us onboarding.iscape.smartcitizen.me or start.decode.smartcitizen.me . You can explore and contribute to the source . This is free software available under a MIT License. Source files \u00b6 Check the source code","title":"Sensor Platform"},{"location":"Data/Sensor%20Platform/#sensor-platform","text":"The platform is a front and backend solution for ingesting, storing and interacting with public data with a particular focus on crowd sensing applications. We believe building modular and reusable software and using existing platforms is critical towards optimizing the research and development effort. Are all systems operational? Check the smartcitizen.me instance status in real time in the uptimerobot.com dashboard. Check the guides We prepared a series of guides to help you on the most common features you will use Onboarding Sensors Uploading SD Card Data Downloading data Want to learn more? Check the developers ready API Documentation","title":"Sensor Platform"},{"location":"Data/Sensor%20Platform/#software-components","text":"Smart Citizen Website : It aims to provide a visual website where the project environmental sensors can be accessed in near real time to facilitate the exploration of data with other contextual data (maps, keywords) and processed reports. This is especially important towards citizens engaging at each local site having a sense of ownership over a technology intervention has been associated with sustained community engagement (Balestrini et al. 2014) . The main instance its available at smartcitizen.me/kits . You can explore and contribute to the source . This is free software available under GNU Affero General Public License (AGPL). Smart Citizen API : The platform provides a REST interface for all the functionalities available on the Website. That allows applications to be developed on easily on top having access to all the features to create complex and rich tools. The main instance its available at api.smartcitizen.me . You can explore and contribute to the source . One examples of this tools is the Sensors Analysis Framework or the iSCAPE Virtual Living Lab , both developed during the iSCAPE project ) This is free software available under GNU Affero General Public License (AGPL). Onboarding app : It aims to facilitate the process of sensor setup to ensure that users, irrespective of technical expertise, can install the sensors. It guides the user through the process of the setup using simple language and a friendly graphic language. It is built as a separate tool from the core Smart Citizen Webpage in order it can be customized for each deployment. It exchange data with the core platform using the Smart Citizen API. The main instance its available at start.smartcitizen.me . There are also customized instances for specific projects such us onboarding.iscape.smartcitizen.me or start.decode.smartcitizen.me . You can explore and contribute to the source . This is free software available under a MIT License.","title":"Software components"},{"location":"Data/Sensor%20Platform/#source-files","text":"Check the source code","title":"Source files"},{"location":"Guides/","text":"A modular tool for citizen action \u00b6 These guides will help you get started with your projects during MINKE . We will complete this section with tools and resources around the sensor. Find here guides that will help with making the best use of the sensors, from a step-by-step guide on how to set up your kit to more advanced features like data analysis or using the SCK's shell .","title":"Main"},{"location":"Guides/#a-modular-tool-for-citizen-action","text":"These guides will help you get started with your projects during MINKE . We will complete this section with tools and resources around the sensor. Find here guides that will help with making the best use of the sensors, from a step-by-step guide on how to set up your kit to more advanced features like data analysis or using the SCK's shell .","title":"A modular tool for citizen action"},{"location":"Guides/calibration/Water%20sensors/","text":"Water Sensors Calibration \u00b6 Calibration on the Smart Citizen Kit \u00b6 The Smart Citizen firmware has built-in support for the calibration of the sensors. In order to calibrate the sensors you will need to use the SCK Shell . To enable the sensors you just need to plug you board to the Smart Citizen kit aux port and reboot the Smart Citizen Kit and the sensors will be handled by the board. Warning When calibrating don't use the normal read sensor command , this command applies temperature/salinity compensation, calibration should be done without any compensation. Instead you should use control sensorName com r and that will return the raw metrics that sensor can provide. On the documentation of each sensor calibration procedure we describe the format of this metrics. Danger After finishing the calibration process restart your SCK to start from a clean state. Atlas PH \u00b6 You need to perform a 3-point calibration with the calibration solutions. The solutions vary their pH with temperature, so make sure to check the temperature prior. The pH value at current temperature can be found on the reference table on the calibration solution bottle. If the current temperature is not on it, use the closest value or use the calculator here . Datasheet Here you can find the datasheet : Calibration theory on page 11 Commands on page 52 Example commands control ph com r control ph com cal,[mid,low,high],value control ph com cal,clear control ph com cal,? 3-point calibration \u00b6 This is the order of the calibration: mid point low point high point Warning Always calibrate the mid point first because it calibration erase all the previous calibration done. Danger Always clean the probe with distilled water between each calibration Mid point calibration \u00b6 Put the sensor in the pH 7 calibration solution. Read the sensor multiple times until the reading is stable: control ph com r 6.48 control ph com r 6.45 ... Issue the midpoint calibration command: control atlas ph com cal,mid,[value of pH at current temperature] Example at 30\u00b0C control atlas ph com cal,mid,6.99 After this command if you take a pH reading the result should be 7.00 (or very close to it) Low Point Calibration \u00b6 Repeat the procedure with the Low point 4.00 solution (the red one). First, read the sensor multiple times until the reading is stable: control ph com r 3.98 control ph com r 3.98 ... Issue the midpoint calibration command: control atlas ph com cal,low,[value of pH at current temperature] Example at 30\u00b0C control atlas ph com cal,low,4.01 High Point Calibration \u00b6 The same step with High point 10.00 calibration solution (blue). First, read the sensor multiple times until the reading is stable: control ph com r 9.84 control ph com r 9.84 ... Issue the midpoint calibration command: control atlas ph com cal,high,[value of pH at current temperature] Example at 30\u00b0C control atlas ph com cal,high,9.96 Extra notes The command control com cal,? can be used to check the calibration status as explained on datasheet page 52. The answers can be: ?CAL,0 \u2192 No calibration done ?CAL,1 \u2192 One point calibration done ?CAL,2 \u2192 Two point calibration done ?CAL,3 \u2192 Three point calibration done (not tested) If your calibration solutions are not 4, 7 and 10, you can still use them and replace [value of pH at current temperature] by your values. Atlas EC \u00b6 You need to perform a 3 step calibration with a dry point and a 2-point calibration with the calibration solutions. Datasheet Here you can find the datasheet : Calibration info on page 12 Calibration commands on page 55 Example commands control conductivity com r control conductivity com K,[probeType] control conductivity com K,? control conductivity com cal,[dry,clear,84] control conductivity com cal,low,1413 control conductivity com cal,high,12,880 control conductivity com cal,? 2-point calibration \u00b6 This is the order of the calibration: set probe type dry point two-point calibration Set probe type \u00b6 Depending on which probe you have (check drawing for reference) you should set the probe type to K 0.1, 1.0 or 10 (new drivers have K1.0 as default): To set the correct probe type: control conductivity com K,1.0 and check which type is set: control conductivity com K,? ?K,1.0 About the sensor The Electrical Conductivity sensor provides four different metrics: Electrical Conductivity \u2192 EC Total Dissolved Solids \u2192 TDS Salinity \u2192 S Specific Gravity \u2192 SG The data is presented in order and comma separated EC,TDS,S,SG , for instance 0.00,0,0.00,1.000 Readings are 0? It is normal that if the probe type has been changed (for instance, you are using a K10 probe), that the readings are 0 after setting the probe type. Dry calibration \u00b6 Follow the steps below with the dry sensor before introducing it to the calibration solutions. You need to do this step even if the readings in dry state are 0. Read the sensor multiple times until the reading is stable: control conductivity com r 0.00,0,0.00,1.000 control conductivity com r 0.00,0,0.00,1.000 ... Issue the dry calibration command: control conductivity com cal,dry Low point calibration \u00b6 You can check the recommended calibration solutions for each probe on the Probetypes drawing (for instance, for K1.0 probe, 12,880uS and 80,000uS are recomended) Read the sensor multiple times until the reading is stable: control conductivity com r 13470,7278,7.76,1.0 control conductivity com r 13230,7144,7.61,1.0 ... Issue the low point calibration command. The value to input is the one of the calibration solution , for example 128800 : control conductivity com cal,low,12880 After this command readings will not change . High point calibration \u00b6 Repeat this steps with high point calibration solution and when the readings stabilize issue the command. Again, remember that the value to input here is the one from the calibration solution , for instance 80000 : control conductivity com cal,high,80000 After this steps the two point calibration is complete and the readings will change . Atlas DO \u00b6 You have two options for this calibration: Single point calibration (dry point) 2-point calibration (dry point and 0 mg/l point) - only if you need accurate readings below 1mg/l Make sure you have followed the probe reconditioning before proceeding with this calibration. Datasheet Here you can find the datasheet : Calibration info on page 9 Calibration commands on page 52 Example commands (you can put control ox , control oxygen or control dissolved oxygen - however! do not put control dissolved as it will use TDS) control ox com r control ox com cal control ox com cal,0 control ox com cal,clear control ox com cal,? Pressure compensation If the sensor is going to be used at more than 10 meters deep into the water Pressure compensation should be set with: control ox com P,kPaValue More information on datasheet , page 57 OPTION 1: Single point calibration \u00b6 First calibrate, compensate later Temperature, salinity and pressure compensation values have no effect on calibration. Read the sensor multiple times until the reading is stable: control ox com r 13.95,50% control ox com r 13.76,49% ... Issue the calibration command, after this the readings will change. In this case, there is no need to add any value after cal . The sensor will take the current reading as the dry point . control ox com cal Be careful If at any point of the calibration process you see akward readings (for instance, that using a 0mg/l solution for dissolved oxygen you see weirdly high values), it is better to start over. For this, proceed with: control ox com cal,clear And start from the beginning. OPTION 2: 2-point calibration \u00b6 Two point calibration is recommended if you require accurate readings below 1.0 mg/l. After completing the single point calibration procedure put the probe in the calibration solution. Read the sensor multiple times until the reading is stable: control ox com r 13.95,50% control ox com r 13.76,49% ... Issue the calibration command. In this case, you have to input the value of the calibration solution too, for example 0 : control ox com cal,0 Reset your SCK and you are ready. Ready to go? If you want to send the data to the platform, you will need to Advanced Kit Selection . At the moment the closest Kit Blueprint will be #22 BioPV Kit or #31 SCK 2.1 Sea Water in case you are using a SCK2.1 with GPS. You can request in the forum for a custom blueprint with the specific sensors you are using. Atlas ORP \u00b6 You only need to perform a single point calibration. You can use any calibrated solution, as long as it's within your sensor range. Atlas uses a 225mV calibration. Datasheet Here you can find the datasheet : Calibration info on page 12 Calibration commands on page 49 Example commands control orp com r control orp com cal control orp com cal,[value] control orp com cal,clear control orp com cal,? Single point calibration \u00b6 Read the sensor multiple times until the reading is stable: control orp com r 225 control orp com r 224 ... Issue calibration command control orp com cal,[value of ORP] Example at 25\u00b0C control orp com cal,225 Atlas PT100/1000 Temperature \u00b6 You only need to perform a single point calibration. This process is only necessary if you change the probe cable or the first time you use the sensor. Datasheet Here you can find the datasheet : Calibration info on page 12 Calibration commands on page 53 Example commands (you can put control ox , control oxygen or control dissolved oxygen - however! do not put control dissolved as it will use TDS) control atlas temp com r control atlas temp com cal control atlas temp com cal,[value] control atlas temp com cal,clear control atlas temp com cal,? Warning This is needed because the temperature probe is a resistive sensor \u2013 more cable \u2192 more resistance! You need an additional calibrated probe or something of known temperature (boiling water) You will need another temperature probe that is already calibrated for this. Make sure both are stable before issuing calibration commands! Read the reference probe multiple times until the reading is stable. Write down the value: control atlas temp com r 22.5 control atlas temp com r 22.4 ... Read the target probe multiple times until the reading is stable: control atlas temp com r 29.5 control atlas temp com r 29.4 ... Issue calibration command: control atlas temp com cal,[value of temperature from reference probe or temperature]","title":"Water sensors"},{"location":"Guides/calibration/Water%20sensors/#water-sensors-calibration","text":"","title":"Water Sensors Calibration"},{"location":"Guides/calibration/Water%20sensors/#calibration-on-the-smart-citizen-kit","text":"The Smart Citizen firmware has built-in support for the calibration of the sensors. In order to calibrate the sensors you will need to use the SCK Shell . To enable the sensors you just need to plug you board to the Smart Citizen kit aux port and reboot the Smart Citizen Kit and the sensors will be handled by the board. Warning When calibrating don't use the normal read sensor command , this command applies temperature/salinity compensation, calibration should be done without any compensation. Instead you should use control sensorName com r and that will return the raw metrics that sensor can provide. On the documentation of each sensor calibration procedure we describe the format of this metrics. Danger After finishing the calibration process restart your SCK to start from a clean state.","title":"Calibration on the Smart Citizen Kit"},{"location":"Guides/calibration/Water%20sensors/#atlas-ph","text":"You need to perform a 3-point calibration with the calibration solutions. The solutions vary their pH with temperature, so make sure to check the temperature prior. The pH value at current temperature can be found on the reference table on the calibration solution bottle. If the current temperature is not on it, use the closest value or use the calculator here . Datasheet Here you can find the datasheet : Calibration theory on page 11 Commands on page 52 Example commands control ph com r control ph com cal,[mid,low,high],value control ph com cal,clear control ph com cal,?","title":"Atlas PH"},{"location":"Guides/calibration/Water%20sensors/#3-point-calibration","text":"This is the order of the calibration: mid point low point high point Warning Always calibrate the mid point first because it calibration erase all the previous calibration done. Danger Always clean the probe with distilled water between each calibration","title":"3-point calibration"},{"location":"Guides/calibration/Water%20sensors/#mid-point-calibration","text":"Put the sensor in the pH 7 calibration solution. Read the sensor multiple times until the reading is stable: control ph com r 6.48 control ph com r 6.45 ... Issue the midpoint calibration command: control atlas ph com cal,mid,[value of pH at current temperature] Example at 30\u00b0C control atlas ph com cal,mid,6.99 After this command if you take a pH reading the result should be 7.00 (or very close to it)","title":"Mid point calibration"},{"location":"Guides/calibration/Water%20sensors/#low-point-calibration","text":"Repeat the procedure with the Low point 4.00 solution (the red one). First, read the sensor multiple times until the reading is stable: control ph com r 3.98 control ph com r 3.98 ... Issue the midpoint calibration command: control atlas ph com cal,low,[value of pH at current temperature] Example at 30\u00b0C control atlas ph com cal,low,4.01","title":"Low Point Calibration"},{"location":"Guides/calibration/Water%20sensors/#high-point-calibration","text":"The same step with High point 10.00 calibration solution (blue). First, read the sensor multiple times until the reading is stable: control ph com r 9.84 control ph com r 9.84 ... Issue the midpoint calibration command: control atlas ph com cal,high,[value of pH at current temperature] Example at 30\u00b0C control atlas ph com cal,high,9.96 Extra notes The command control com cal,? can be used to check the calibration status as explained on datasheet page 52. The answers can be: ?CAL,0 \u2192 No calibration done ?CAL,1 \u2192 One point calibration done ?CAL,2 \u2192 Two point calibration done ?CAL,3 \u2192 Three point calibration done (not tested) If your calibration solutions are not 4, 7 and 10, you can still use them and replace [value of pH at current temperature] by your values.","title":"High Point Calibration"},{"location":"Guides/calibration/Water%20sensors/#atlas-ec","text":"You need to perform a 3 step calibration with a dry point and a 2-point calibration with the calibration solutions. Datasheet Here you can find the datasheet : Calibration info on page 12 Calibration commands on page 55 Example commands control conductivity com r control conductivity com K,[probeType] control conductivity com K,? control conductivity com cal,[dry,clear,84] control conductivity com cal,low,1413 control conductivity com cal,high,12,880 control conductivity com cal,?","title":"Atlas EC"},{"location":"Guides/calibration/Water%20sensors/#2-point-calibration","text":"This is the order of the calibration: set probe type dry point two-point calibration","title":"2-point calibration"},{"location":"Guides/calibration/Water%20sensors/#set-probe-type","text":"Depending on which probe you have (check drawing for reference) you should set the probe type to K 0.1, 1.0 or 10 (new drivers have K1.0 as default): To set the correct probe type: control conductivity com K,1.0 and check which type is set: control conductivity com K,? ?K,1.0 About the sensor The Electrical Conductivity sensor provides four different metrics: Electrical Conductivity \u2192 EC Total Dissolved Solids \u2192 TDS Salinity \u2192 S Specific Gravity \u2192 SG The data is presented in order and comma separated EC,TDS,S,SG , for instance 0.00,0,0.00,1.000 Readings are 0? It is normal that if the probe type has been changed (for instance, you are using a K10 probe), that the readings are 0 after setting the probe type.","title":"Set probe type"},{"location":"Guides/calibration/Water%20sensors/#dry-calibration","text":"Follow the steps below with the dry sensor before introducing it to the calibration solutions. You need to do this step even if the readings in dry state are 0. Read the sensor multiple times until the reading is stable: control conductivity com r 0.00,0,0.00,1.000 control conductivity com r 0.00,0,0.00,1.000 ... Issue the dry calibration command: control conductivity com cal,dry","title":"Dry calibration"},{"location":"Guides/calibration/Water%20sensors/#low-point-calibration_1","text":"You can check the recommended calibration solutions for each probe on the Probetypes drawing (for instance, for K1.0 probe, 12,880uS and 80,000uS are recomended) Read the sensor multiple times until the reading is stable: control conductivity com r 13470,7278,7.76,1.0 control conductivity com r 13230,7144,7.61,1.0 ... Issue the low point calibration command. The value to input is the one of the calibration solution , for example 128800 : control conductivity com cal,low,12880 After this command readings will not change .","title":"Low point calibration"},{"location":"Guides/calibration/Water%20sensors/#high-point-calibration_1","text":"Repeat this steps with high point calibration solution and when the readings stabilize issue the command. Again, remember that the value to input here is the one from the calibration solution , for instance 80000 : control conductivity com cal,high,80000 After this steps the two point calibration is complete and the readings will change .","title":"High point calibration"},{"location":"Guides/calibration/Water%20sensors/#atlas-do","text":"You have two options for this calibration: Single point calibration (dry point) 2-point calibration (dry point and 0 mg/l point) - only if you need accurate readings below 1mg/l Make sure you have followed the probe reconditioning before proceeding with this calibration. Datasheet Here you can find the datasheet : Calibration info on page 9 Calibration commands on page 52 Example commands (you can put control ox , control oxygen or control dissolved oxygen - however! do not put control dissolved as it will use TDS) control ox com r control ox com cal control ox com cal,0 control ox com cal,clear control ox com cal,? Pressure compensation If the sensor is going to be used at more than 10 meters deep into the water Pressure compensation should be set with: control ox com P,kPaValue More information on datasheet , page 57","title":"Atlas DO"},{"location":"Guides/calibration/Water%20sensors/#option-1-single-point-calibration","text":"First calibrate, compensate later Temperature, salinity and pressure compensation values have no effect on calibration. Read the sensor multiple times until the reading is stable: control ox com r 13.95,50% control ox com r 13.76,49% ... Issue the calibration command, after this the readings will change. In this case, there is no need to add any value after cal . The sensor will take the current reading as the dry point . control ox com cal Be careful If at any point of the calibration process you see akward readings (for instance, that using a 0mg/l solution for dissolved oxygen you see weirdly high values), it is better to start over. For this, proceed with: control ox com cal,clear And start from the beginning.","title":"OPTION 1: Single point calibration"},{"location":"Guides/calibration/Water%20sensors/#option-2-2-point-calibration","text":"Two point calibration is recommended if you require accurate readings below 1.0 mg/l. After completing the single point calibration procedure put the probe in the calibration solution. Read the sensor multiple times until the reading is stable: control ox com r 13.95,50% control ox com r 13.76,49% ... Issue the calibration command. In this case, you have to input the value of the calibration solution too, for example 0 : control ox com cal,0 Reset your SCK and you are ready. Ready to go? If you want to send the data to the platform, you will need to Advanced Kit Selection . At the moment the closest Kit Blueprint will be #22 BioPV Kit or #31 SCK 2.1 Sea Water in case you are using a SCK2.1 with GPS. You can request in the forum for a custom blueprint with the specific sensors you are using.","title":"OPTION 2: 2-point calibration"},{"location":"Guides/calibration/Water%20sensors/#atlas-orp","text":"You only need to perform a single point calibration. You can use any calibrated solution, as long as it's within your sensor range. Atlas uses a 225mV calibration. Datasheet Here you can find the datasheet : Calibration info on page 12 Calibration commands on page 49 Example commands control orp com r control orp com cal control orp com cal,[value] control orp com cal,clear control orp com cal,?","title":"Atlas ORP"},{"location":"Guides/calibration/Water%20sensors/#single-point-calibration","text":"Read the sensor multiple times until the reading is stable: control orp com r 225 control orp com r 224 ... Issue calibration command control orp com cal,[value of ORP] Example at 25\u00b0C control orp com cal,225","title":"Single point calibration"},{"location":"Guides/calibration/Water%20sensors/#atlas-pt1001000-temperature","text":"You only need to perform a single point calibration. This process is only necessary if you change the probe cable or the first time you use the sensor. Datasheet Here you can find the datasheet : Calibration info on page 12 Calibration commands on page 53 Example commands (you can put control ox , control oxygen or control dissolved oxygen - however! do not put control dissolved as it will use TDS) control atlas temp com r control atlas temp com cal control atlas temp com cal,[value] control atlas temp com cal,clear control atlas temp com cal,? Warning This is needed because the temperature probe is a resistive sensor \u2013 more cable \u2192 more resistance! You need an additional calibrated probe or something of known temperature (boiling water) You will need another temperature probe that is already calibrated for this. Make sure both are stable before issuing calibration commands! Read the reference probe multiple times until the reading is stable. Write down the value: control atlas temp com r 22.5 control atlas temp com r 22.4 ... Read the target probe multiple times until the reading is stable: control atlas temp com r 29.5 control atlas temp com r 29.4 ... Issue calibration command: control atlas temp com cal,[value of temperature from reference probe or temperature]","title":"Atlas PT100/1000 Temperature"},{"location":"Guides/deployments/Citizen%20Kit/","text":"Deploying the Smart Citizen Kit \u00b6 The Smart Citizen Kit can be used in both, indoor or outdoor setups. This page gives guidelines on how to install in either situation. Indoor installation \u00b6 In indoor conditions, the Kit can be installed using this 3D printed clip . How to install the kit \u00b6 Make sure you read the information about each type of sensor before installation: eCO2 and tVOCs sensor Noise PM sensor General tips \u00b6 Keep the sensors powered if they are going to be mounted in a fixed point Avoid areas with moist accumulation when possible Avoid temperature and humidity transients, specially for the eCO2/tVOC sensor Avoid covering the sensors, specially the PM sensor Avoid covering the microphone and particles to go in the microphone port Avoid direct flow towards the sensors. If exposed under flow conditions, have the flow go parallel to the sensors' surface Outdoor installation \u00b6 For outdoor installation, an enclosure is recommended in order to avoid moisture to damage the sensors and electronics. The Enclosures Repository contains various types (3D printed, milled, DIY) from us and contributions from users that customise their own! Feel free to download the models and tweak them, and if happy, share them back via pull request to the repository. The general tips from above also apply, as well as: Avoid exhausts from air conditioning units, kitchens and others Protect the sensors from moisture either using filtering foam or nail polish to cover the sensor pads (see here ) Avoid temperature transients, specially due to sun radiation Powering the sensor \u00b6 The SCK can be powered through: LiPo 3.7V Battery: default 2000mAh - large 6000mAh Mains power, through an USB adaptor (not recommended) or a custom power supply in this enclosure Solar panel : we use the Solar Panel 6W 6V from Voltaic Systems with the MPTT DF Robot DFR0559 and an additional LiPo Battery, all in this enclosure Using the power supply If you are using the Smart Citizen Power Supply, have a look at this guide for safety instructions. Connectivity \u00b6 The sensors can log data in sd card or remote post data to the Smart Citizen Platform. In the case of remote logging and outdoor deployments, a connectivity unit can be used with a SIM Card data plan. These units are enclosed in a waterproof box and can be powered from 230VAC 3m cable (or more), deploying a network to which several SCKs can be connected in an outdoor deployment. You can check the BOM and installation/building here and you can email us at info@smartcitizen for more information. Got one? Check this installation guide to get started","title":"Citizen Kit"},{"location":"Guides/deployments/Citizen%20Kit/#deploying-the-smart-citizen-kit","text":"The Smart Citizen Kit can be used in both, indoor or outdoor setups. This page gives guidelines on how to install in either situation.","title":"Deploying the Smart Citizen Kit"},{"location":"Guides/deployments/Citizen%20Kit/#indoor-installation","text":"In indoor conditions, the Kit can be installed using this 3D printed clip .","title":"Indoor installation"},{"location":"Guides/deployments/Citizen%20Kit/#how-to-install-the-kit","text":"Make sure you read the information about each type of sensor before installation: eCO2 and tVOCs sensor Noise PM sensor","title":"How to install the kit"},{"location":"Guides/deployments/Citizen%20Kit/#general-tips","text":"Keep the sensors powered if they are going to be mounted in a fixed point Avoid areas with moist accumulation when possible Avoid temperature and humidity transients, specially for the eCO2/tVOC sensor Avoid covering the sensors, specially the PM sensor Avoid covering the microphone and particles to go in the microphone port Avoid direct flow towards the sensors. If exposed under flow conditions, have the flow go parallel to the sensors' surface","title":"General tips"},{"location":"Guides/deployments/Citizen%20Kit/#outdoor-installation","text":"For outdoor installation, an enclosure is recommended in order to avoid moisture to damage the sensors and electronics. The Enclosures Repository contains various types (3D printed, milled, DIY) from us and contributions from users that customise their own! Feel free to download the models and tweak them, and if happy, share them back via pull request to the repository. The general tips from above also apply, as well as: Avoid exhausts from air conditioning units, kitchens and others Protect the sensors from moisture either using filtering foam or nail polish to cover the sensor pads (see here ) Avoid temperature transients, specially due to sun radiation","title":"Outdoor installation"},{"location":"Guides/deployments/Citizen%20Kit/#powering-the-sensor","text":"The SCK can be powered through: LiPo 3.7V Battery: default 2000mAh - large 6000mAh Mains power, through an USB adaptor (not recommended) or a custom power supply in this enclosure Solar panel : we use the Solar Panel 6W 6V from Voltaic Systems with the MPTT DF Robot DFR0559 and an additional LiPo Battery, all in this enclosure Using the power supply If you are using the Smart Citizen Power Supply, have a look at this guide for safety instructions.","title":"Powering the sensor"},{"location":"Guides/deployments/Citizen%20Kit/#connectivity","text":"The sensors can log data in sd card or remote post data to the Smart Citizen Platform. In the case of remote logging and outdoor deployments, a connectivity unit can be used with a SIM Card data plan. These units are enclosed in a waterproof box and can be powered from 230VAC 3m cable (or more), deploying a network to which several SCKs can be connected in an outdoor deployment. You can check the BOM and installation/building here and you can email us at info@smartcitizen for more information. Got one? Check this installation guide to get started","title":"Connectivity"},{"location":"Guides/deployments/Citizen%20Water%20Station/","text":"Water sensors \u00b6 Getting around the box \u00b6 Here is a first overview of the box: Setup \u00b6 Only if you bought them separately This guide describes the setup procedure of the Atlas Scientific probes in case you bought them separately. If you have a Water Station , you don't need to do this. Manually switching circuits to I2C mode \u00b6 If the drivers are new normally they come configured in UART mode so we need to change them to I2C mode. Remove circuit from Tentacle shield. Put the circuit into a breadboard. For PH , DO , ORP and EC : Short the PGND pin to the TX pin using a jumper wire. For RTD (temperature): Short the PRB pin to the TX pin using a jumper wire. Power the device (connecting GND and VCC ) Wait for LED to change from green to blue (UART\u2192I2C) or from blue to green (I2C\u2192>UART). Remove the jumper wire from the PGND (or PRB respectively) pin to the TX pin (Do this before removing power! ). Remove power ( VCC ). Apply power ( VCC ). The device is now in the new mode (repeat all steps to switch back to previous mode). Official documentation Atlas Doc Connection to Smartcitizen Kit \u00b6 After connecting the Tentacle 3 to the SCK power your kit and if youre connected to the shell the autodetecition message should look similar to this (depending on the connected drivers and probes): Urban board detected Enable Atlas Temperature Enable Atlas PH Enable Atlas Conductivity Enable Atlas Specific gravity ... Sensor calibration Make sure to follow our sensor calibration guide for the water sensors . Preparing the probes \u00b6 Atlas Scientific has great documents on how to use their probes, and maintain them (all the images below are theirs). Many other probes by other manufacturers will have the same issues, as they are based on the similar working principles. Below we compile some guidelines specific to the sensors. Make sure you also follow the instructions on how to calibrate them . All probes \u00b6 Most of the probes will generate potassium chloride (KCl) crystals that are fully harmless. Make sure you clean them with distilled water before use. Once you are done using them, the probes that have a protective electrolyte solution (pH and ORP) will need to be put back in. Dissolved Oxygen \u00b6 The dissolved oxygen probe needs to be actively maintained. The datasheet has a good information on how to maintain and clean the probe. Here is a small brief: When you open the probe the first time, make sure you only open the rubber cap, and not any sensor component such as the membrane cap The sensor has an electrolyte solution inside to support the chemical reaction in the electrodes. This solution depletes over time, as the sensor is used and it will generate a solid residue that needs to be cleaned periodically (roughly every 6 months for the Mini DO probe, but better to check) You can recondition the sensor with a small file and remove all Zinc Oxyde. Make sure that the probe membrane is cleaned with a very soft brush both inside and outside. The membrane can be replaced if damaged. Make sure it is in good conditions because it will otherwise leak the electrolyte solution and the sensor will work erratically. First time use? Do it Even it the sensor is brand new, we recommend you follow this process to avoid issues. pH and ORP \u00b6 No particular consideration for these probes, other than they are very delicate: Maintenance \u00b6 Make sure that the sensors are cleaned frequently, specially if deployed on the field. In some cases, sensors will be affected by biofouling and they will need more or less often cleanup - in some cases weekly! Public Domain, Link","title":"Citizen Water Station"},{"location":"Guides/deployments/Citizen%20Water%20Station/#water-sensors","text":"","title":"Water sensors"},{"location":"Guides/deployments/Citizen%20Water%20Station/#getting-around-the-box","text":"Here is a first overview of the box:","title":"Getting around the box"},{"location":"Guides/deployments/Citizen%20Water%20Station/#setup","text":"Only if you bought them separately This guide describes the setup procedure of the Atlas Scientific probes in case you bought them separately. If you have a Water Station , you don't need to do this.","title":"Setup"},{"location":"Guides/deployments/Citizen%20Water%20Station/#manually-switching-circuits-to-i2c-mode","text":"If the drivers are new normally they come configured in UART mode so we need to change them to I2C mode. Remove circuit from Tentacle shield. Put the circuit into a breadboard. For PH , DO , ORP and EC : Short the PGND pin to the TX pin using a jumper wire. For RTD (temperature): Short the PRB pin to the TX pin using a jumper wire. Power the device (connecting GND and VCC ) Wait for LED to change from green to blue (UART\u2192I2C) or from blue to green (I2C\u2192>UART). Remove the jumper wire from the PGND (or PRB respectively) pin to the TX pin (Do this before removing power! ). Remove power ( VCC ). Apply power ( VCC ). The device is now in the new mode (repeat all steps to switch back to previous mode). Official documentation Atlas Doc","title":"Manually switching circuits to I2C mode"},{"location":"Guides/deployments/Citizen%20Water%20Station/#connection-to-smartcitizen-kit","text":"After connecting the Tentacle 3 to the SCK power your kit and if youre connected to the shell the autodetecition message should look similar to this (depending on the connected drivers and probes): Urban board detected Enable Atlas Temperature Enable Atlas PH Enable Atlas Conductivity Enable Atlas Specific gravity ... Sensor calibration Make sure to follow our sensor calibration guide for the water sensors .","title":"Connection to Smartcitizen Kit"},{"location":"Guides/deployments/Citizen%20Water%20Station/#preparing-the-probes","text":"Atlas Scientific has great documents on how to use their probes, and maintain them (all the images below are theirs). Many other probes by other manufacturers will have the same issues, as they are based on the similar working principles. Below we compile some guidelines specific to the sensors. Make sure you also follow the instructions on how to calibrate them .","title":"Preparing the probes"},{"location":"Guides/deployments/Citizen%20Water%20Station/#all-probes","text":"Most of the probes will generate potassium chloride (KCl) crystals that are fully harmless. Make sure you clean them with distilled water before use. Once you are done using them, the probes that have a protective electrolyte solution (pH and ORP) will need to be put back in.","title":"All probes"},{"location":"Guides/deployments/Citizen%20Water%20Station/#dissolved-oxygen","text":"The dissolved oxygen probe needs to be actively maintained. The datasheet has a good information on how to maintain and clean the probe. Here is a small brief: When you open the probe the first time, make sure you only open the rubber cap, and not any sensor component such as the membrane cap The sensor has an electrolyte solution inside to support the chemical reaction in the electrodes. This solution depletes over time, as the sensor is used and it will generate a solid residue that needs to be cleaned periodically (roughly every 6 months for the Mini DO probe, but better to check) You can recondition the sensor with a small file and remove all Zinc Oxyde. Make sure that the probe membrane is cleaned with a very soft brush both inside and outside. The membrane can be replaced if damaged. Make sure it is in good conditions because it will otherwise leak the electrolyte solution and the sensor will work erratically. First time use? Do it Even it the sensor is brand new, we recommend you follow this process to avoid issues.","title":"Dissolved Oxygen"},{"location":"Guides/deployments/Citizen%20Water%20Station/#ph-and-orp","text":"No particular consideration for these probes, other than they are very delicate:","title":"pH and ORP"},{"location":"Guides/deployments/Citizen%20Water%20Station/#maintenance","text":"Make sure that the sensors are cleaned frequently, specially if deployed on the field. In some cases, sensors will be affected by biofouling and they will need more or less often cleanup - in some cases weekly! Public Domain, Link","title":"Maintenance"},{"location":"Guides/deployments/Using%20the%20power%20supply/","text":"Using the custom power supply \u00b6 The power supply is very simple to operate. If you have purchased one, normally, everything should be connected and ready to go. In some cases, the AC cable (left screw connector) is not connected, and it can be simply connected through the cable gland into the terminals. No ground is required. When connecting the plug to the wall socket, the red LED should turn on indicating 5V output. The input is protected with a 1A Fuse and the pack should be enclosed in a waterproof enclosure as detailed here . The indication LED shows the Power Supply is active. It is also a warning in case you have unplugged it but there is still some charge in it (it might take some seconds to fade out): More information regarding the power input is shown below and available in the datasheet : Input range: 100V-240VAC 50-60Hz, max 0.25A input, 1A Fused, or 277VAC 0.125A, also 50-60Hz Output range: 5V DC, max 2.0A","title":"Power Supply"},{"location":"Guides/deployments/Using%20the%20power%20supply/#using-the-custom-power-supply","text":"The power supply is very simple to operate. If you have purchased one, normally, everything should be connected and ready to go. In some cases, the AC cable (left screw connector) is not connected, and it can be simply connected through the cable gland into the terminals. No ground is required. When connecting the plug to the wall socket, the red LED should turn on indicating 5V output. The input is protected with a 1A Fuse and the pack should be enclosed in a waterproof enclosure as detailed here . The indication LED shows the Power Supply is active. It is also a warning in case you have unplugged it but there is still some charge in it (it might take some seconds to fade out): More information regarding the power input is shown below and available in the datasheet : Input range: 100V-240VAC 50-60Hz, max 0.25A input, 1A Fused, or 277VAC 0.125A, also 50-60Hz Output range: 5V DC, max 2.0A","title":"Using the custom power supply"},{"location":"Guides/firmware/Edit%20the%20firmware/","text":"Macro Rendering Error \u00b6 FileNotFoundError : [Errno 2] No such file or directory: '/tmp/2e6944a0f71f4751919cdce00e0e3a4d/docs/Guides/firmware/Edit the firmware.md' Traceback (most recent call last): File \"/opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/site-packages/mkdocs_macros/plugin.py\", line 480, in render return md_template.render(**page_variables) File \"/opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/site-packages/jinja2/environment.py\", line 1291, in render self.environment.handle_exception() File \"/opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/site-packages/jinja2/environment.py\", line 925, in handle_exception raise rewrite_traceback_stack(source=source) File \"<template>\", line 1, in top-level template code File \"/home/runner/work/smartcitizen-minke-docs/smartcitizen-minke-docs/main.py\", line 159, in get_snippet_git with open(root + '/' + file_path, 'r') as myfile: FileNotFoundError: [Errno 2] No such file or directory: '/tmp/2e6944a0f71f4751919cdce00e0e3a4d/docs/Guides/firmware/Edit the firmware.md'","title":"Edit the firmware"},{"location":"Guides/firmware/Edit%20the%20firmware/#macro-rendering-error","text":"FileNotFoundError : [Errno 2] No such file or directory: '/tmp/2e6944a0f71f4751919cdce00e0e3a4d/docs/Guides/firmware/Edit the firmware.md' Traceback (most recent call last): File \"/opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/site-packages/mkdocs_macros/plugin.py\", line 480, in render return md_template.render(**page_variables) File \"/opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/site-packages/jinja2/environment.py\", line 1291, in render self.environment.handle_exception() File \"/opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/site-packages/jinja2/environment.py\", line 925, in handle_exception raise rewrite_traceback_stack(source=source) File \"<template>\", line 1, in top-level template code File \"/home/runner/work/smartcitizen-minke-docs/smartcitizen-minke-docs/main.py\", line 159, in get_snippet_git with open(root + '/' + file_path, 'r') as myfile: FileNotFoundError: [Errno 2] No such file or directory: '/tmp/2e6944a0f71f4751919cdce00e0e3a4d/docs/Guides/firmware/Edit the firmware.md'","title":"Macro Rendering Error"},{"location":"Guides/firmware/Update%20the%20firmware/","text":"Update the firmware \u00b6 When new features are developed or bugs are fixed we will release new versions of the SCK firmware. Make a back-up of your info \u00b6 Info If you already configured your kit on the smartcitizen platform you will need the token that the platform gave you during the onboarding process , to recover it from your kit: Click your kit button until the kit is in setup mode , the led should be red. Connect to the kit with your mobile device as you did during the onboarding process. Write down the token of your kit. After updating the firmware follow this same steps to input the token and wifi credentials, after this your kit will be publishing on the same registered device than before. A note about versions The guide below applies to both, SCK 2.0 and SCK2.1. Updating the SAM firmware \u00b6 The SAMD21 (SAM for short) chip manages the main part of the firmware. This firmware is frequently updated with latest improvements in the official firmware repository . Check the releases pages for more info. Updating your kit is very simple Connect your kit with a micro USB cable to your computer Double click the reset button of your SCK, the SCK led should turn green and a new drive called SCK-20 should appear on your computer file browser Inside the SCK-20 drive you should see some files, double click the INDEX.HTM file and our github releases page will open in your browser Download the new firmware called SAM_firmware_XXX.uf2 and save it to your computer Tip You can backup your current firmware version just saving the file called CURRENT.UF2 . Simply drag the firmware file you downloaded over the SCK-20 drive , your kit led will blink in green and after some seconds it will reset and start with the new version. Where is the reset? In other enclosures, the reset button is \"exposed\" outside of the enclosure: In a big station: Or a small station (similar 3D printed versions will also have a small hole): Or a water station: Updating the ESP firmware \u00b6 The ESP8266 (ESP for short) chip sometimes also needs upgrade to match the latest version of the SAM firmware. The ESP chip manages all the communications of the SCK with the outer world. The firmware can be found here . Example If your WiFi module needs a firmware update when you connect to your kit to setup the network you will see a screen that will ask for the new file. You can find it in our github releases page , look for the file called ESP_firmware_XXX.bin . If you don't see it, check in a previous release (some releases don't include Wi-Fi firmware) This file needs to be downloaded to the same device (phone or laptop) that is connecting to the SmartCitizen[...] network. If you are using your phone, you will need to download it there Once you have it, you can select the file in the screen below. If it doesn't appear, check the section to force ESP upload below After the update you just did, you can configure your kit as a new device following the onboarding process or use your previous token as explained before Force ESP upload \u00b6 If you want to force the ESP to upload, please, follow the steps below. Force ESP upload If you already have the latest version but for some reason you still want to upload the firmware, you can force by clicking the info button (top right) on the setup screen that you find when conected to your kit in setup mode: And activate the Force allow firmware update : So you will be asked for the firmware file: Doesn't work? Sometimes in the phone the firmware selection screen will not pop up. You can always try to do the developer-way with check this guide here Using command-line tools \u00b6 The steps below are a summary of the steps you will need to update the firmware in case you are handling a lot of sensosr. The process builds on top the tools used in the edit the firmware , but simplified as we do not want to compile the firmware (since we are not changing it): Install python as per the instructions here Install python requirements Install git following these instructions . Check that you need to install it first by simply typing git in your terminal. If the output is not command not found , skip to step 4 In your terminal, navigate to a folder in which you want to download the firmware in. Then, get the firmware following the instructions here Navigate to the firmware folder, plug the sensor to your computer and run the command below. This will upload the SAM firmware: python make.py flash sam -v This will also upload the ESP firmware: python make.py flash esp -v You can upload both at the same time by: python make.py flash sam esp -v","title":"Update the firmware"},{"location":"Guides/firmware/Update%20the%20firmware/#update-the-firmware","text":"When new features are developed or bugs are fixed we will release new versions of the SCK firmware.","title":"Update the firmware"},{"location":"Guides/firmware/Update%20the%20firmware/#make-a-back-up-of-your-info","text":"Info If you already configured your kit on the smartcitizen platform you will need the token that the platform gave you during the onboarding process , to recover it from your kit: Click your kit button until the kit is in setup mode , the led should be red. Connect to the kit with your mobile device as you did during the onboarding process. Write down the token of your kit. After updating the firmware follow this same steps to input the token and wifi credentials, after this your kit will be publishing on the same registered device than before. A note about versions The guide below applies to both, SCK 2.0 and SCK2.1.","title":"Make a back-up of your info"},{"location":"Guides/firmware/Update%20the%20firmware/#updating-the-sam-firmware","text":"The SAMD21 (SAM for short) chip manages the main part of the firmware. This firmware is frequently updated with latest improvements in the official firmware repository . Check the releases pages for more info. Updating your kit is very simple Connect your kit with a micro USB cable to your computer Double click the reset button of your SCK, the SCK led should turn green and a new drive called SCK-20 should appear on your computer file browser Inside the SCK-20 drive you should see some files, double click the INDEX.HTM file and our github releases page will open in your browser Download the new firmware called SAM_firmware_XXX.uf2 and save it to your computer Tip You can backup your current firmware version just saving the file called CURRENT.UF2 . Simply drag the firmware file you downloaded over the SCK-20 drive , your kit led will blink in green and after some seconds it will reset and start with the new version. Where is the reset? In other enclosures, the reset button is \"exposed\" outside of the enclosure: In a big station: Or a small station (similar 3D printed versions will also have a small hole): Or a water station:","title":"Updating the SAM firmware"},{"location":"Guides/firmware/Update%20the%20firmware/#updating-the-esp-firmware","text":"The ESP8266 (ESP for short) chip sometimes also needs upgrade to match the latest version of the SAM firmware. The ESP chip manages all the communications of the SCK with the outer world. The firmware can be found here . Example If your WiFi module needs a firmware update when you connect to your kit to setup the network you will see a screen that will ask for the new file. You can find it in our github releases page , look for the file called ESP_firmware_XXX.bin . If you don't see it, check in a previous release (some releases don't include Wi-Fi firmware) This file needs to be downloaded to the same device (phone or laptop) that is connecting to the SmartCitizen[...] network. If you are using your phone, you will need to download it there Once you have it, you can select the file in the screen below. If it doesn't appear, check the section to force ESP upload below After the update you just did, you can configure your kit as a new device following the onboarding process or use your previous token as explained before","title":"Updating the ESP firmware"},{"location":"Guides/firmware/Update%20the%20firmware/#force-esp-upload","text":"If you want to force the ESP to upload, please, follow the steps below. Force ESP upload If you already have the latest version but for some reason you still want to upload the firmware, you can force by clicking the info button (top right) on the setup screen that you find when conected to your kit in setup mode: And activate the Force allow firmware update : So you will be asked for the firmware file: Doesn't work? Sometimes in the phone the firmware selection screen will not pop up. You can always try to do the developer-way with check this guide here","title":"Force ESP upload"},{"location":"Guides/firmware/Update%20the%20firmware/#using-command-line-tools","text":"The steps below are a summary of the steps you will need to update the firmware in case you are handling a lot of sensosr. The process builds on top the tools used in the edit the firmware , but simplified as we do not want to compile the firmware (since we are not changing it): Install python as per the instructions here Install python requirements Install git following these instructions . Check that you need to install it first by simply typing git in your terminal. If the output is not command not found , skip to step 4 In your terminal, navigate to a folder in which you want to download the firmware in. Then, get the firmware following the instructions here Navigate to the firmware folder, plug the sensor to your computer and run the command below. This will upload the SAM firmware: python make.py flash sam -v This will also upload the ESP firmware: python make.py flash esp -v You can upload both at the same time by: python make.py flash sam esp -v","title":"Using command-line tools"},{"location":"Guides/getting%20started/Debugging%20your%20sensors/","text":"Debugging your sensors \u00b6 This guide will try to summarize the basic steps to debug your kits whenever there's any problem. Let's be clear, there is no unique reason or point of failure for the kits to fail, and very likely, if you use them extensively, something will happen, either after 1 month, 1 year, or 5 years. It is key to know how to debug them: Reset the kit using the hardware reset button . This is either here: or here: or here (similar 3D printed versions will also have a small hole): or here: If this doesn't solve the problem, you might want to connect to the kits using the Shell . The next steps would depend on what the actual problem of your kits is. The most common problems are: Sensor or hardware issues Connectivity or configuration issues Basic steps Reset the kit Follow this guide Check the FAQs Check the forum Ask support with a nice explanation Sensors or hardware issues \u00b6 As said above, there is no single point of failure for the kits. If the LED is working normally, but there is one or more sensosr that are not responding, connect the Shell and type: version Note this for later. If it's an old version of the firmware, it might help to directly upgrade . sensor This should show if all the sensors are being recognised. If one of them is missing from the list, you can try to check the i2c bus (where most of the sensors are connected): i2c If one of the sensors is not shown, it means that there is probably a hardware issue with the sensor itself and that the microcontroller is not recognising it. Now, it would be useful to look for corrosion signs around the sensors and maybe reflash the firmware in case there is a better detection of the sensors in a firmware update. Otherwise, it is likely that the hardware is no longer functioning and it needs replacement. If the LED is static , very likely there is a problem with the detection or an electric problem with the sensors. For this, it is useful to start disconnecting each component to understand which component fails: Disconnect the power (USB and battery) and disconnect the PMS5003 sensor. Power on again and check Disconnect the power (USB and battery) and disconnect the Urban Board. Power on again and check If this doesn't help, try to reflash the firmware , as there might be improvements. If it helps, also update and check if it improves. If the sensors heat up too much (it burns to touch), there might be an electric issue. Connectivity or configuration issues \u00b6 Normally, configuration or connectivity issues can be due to the following reasons: - Typo during the setup process - Old firmware If not using the Shell, make sure that the information provided for the network is correct by putting the SCK in SETUP mode (RED LED) and accessing the SmartCitizeXXXX network. If using the Shell, you can check the recording configuration by typing: config If you see a problem with the configuration, you can fix each item or the whole thing by typing: config -mode network -wifi \"SSID\" \"PASS\" -token token Note that the token does not have quotes around it and that the SSID and PASS have straight quoutes. In case there is no problem with the configuration, there problem might get solved by a firmware update.","title":"Debugging your sensors"},{"location":"Guides/getting%20started/Debugging%20your%20sensors/#debugging-your-sensors","text":"This guide will try to summarize the basic steps to debug your kits whenever there's any problem. Let's be clear, there is no unique reason or point of failure for the kits to fail, and very likely, if you use them extensively, something will happen, either after 1 month, 1 year, or 5 years. It is key to know how to debug them: Reset the kit using the hardware reset button . This is either here: or here: or here (similar 3D printed versions will also have a small hole): or here: If this doesn't solve the problem, you might want to connect to the kits using the Shell . The next steps would depend on what the actual problem of your kits is. The most common problems are: Sensor or hardware issues Connectivity or configuration issues Basic steps Reset the kit Follow this guide Check the FAQs Check the forum Ask support with a nice explanation","title":"Debugging your sensors"},{"location":"Guides/getting%20started/Debugging%20your%20sensors/#sensors-or-hardware-issues","text":"As said above, there is no single point of failure for the kits. If the LED is working normally, but there is one or more sensosr that are not responding, connect the Shell and type: version Note this for later. If it's an old version of the firmware, it might help to directly upgrade . sensor This should show if all the sensors are being recognised. If one of them is missing from the list, you can try to check the i2c bus (where most of the sensors are connected): i2c If one of the sensors is not shown, it means that there is probably a hardware issue with the sensor itself and that the microcontroller is not recognising it. Now, it would be useful to look for corrosion signs around the sensors and maybe reflash the firmware in case there is a better detection of the sensors in a firmware update. Otherwise, it is likely that the hardware is no longer functioning and it needs replacement. If the LED is static , very likely there is a problem with the detection or an electric problem with the sensors. For this, it is useful to start disconnecting each component to understand which component fails: Disconnect the power (USB and battery) and disconnect the PMS5003 sensor. Power on again and check Disconnect the power (USB and battery) and disconnect the Urban Board. Power on again and check If this doesn't help, try to reflash the firmware , as there might be improvements. If it helps, also update and check if it improves. If the sensors heat up too much (it burns to touch), there might be an electric issue.","title":"Sensors or hardware issues"},{"location":"Guides/getting%20started/Debugging%20your%20sensors/#connectivity-or-configuration-issues","text":"Normally, configuration or connectivity issues can be due to the following reasons: - Typo during the setup process - Old firmware If not using the Shell, make sure that the information provided for the network is correct by putting the SCK in SETUP mode (RED LED) and accessing the SmartCitizeXXXX network. If using the Shell, you can check the recording configuration by typing: config If you see a problem with the configuration, you can fix each item or the whole thing by typing: config -mode network -wifi \"SSID\" \"PASS\" -token token Note that the token does not have quotes around it and that the SSID and PASS have straight quoutes. In case there is no problem with the configuration, there problem might get solved by a firmware update.","title":"Connectivity or configuration issues"},{"location":"Guides/getting%20started/Downloading%20the%20Data/","text":"Downloading the Data \u00b6 Once you've added your SCK to the platform and it's capturing and sending data correctly, you can interact with the platform in several ways. Visualizing the data, downloading the data and interacting with the data through the API. Download Data \u00b6 If you are interested in use the data captured by your sensors, you can download all the data for later use. To do this, go to your device page, at the bottom there is a button called DOWNLOAD DATA . You will receive an email with a link to download your data on CSV format in a minute or two. And then: API \u00b6 The Smart Citizen API allows you to request back information from your devices and do incredible things with it. It is a REST API and it returns the information in JSON format. This means you can easily access the information from any language like Javascript, PHP, Processing.org, Python, and start doing things with it quickly. Using scripts \u00b6 Python scripts are provided in the scdata python package repository for downloading devices data in a programatic way. Make sure to check the examples in the git repository. Code examples You can also find some examples on smartcitizen-toolkit respository","title":"Downloading platform data"},{"location":"Guides/getting%20started/Downloading%20the%20Data/#downloading-the-data","text":"Once you've added your SCK to the platform and it's capturing and sending data correctly, you can interact with the platform in several ways. Visualizing the data, downloading the data and interacting with the data through the API.","title":"Downloading the Data"},{"location":"Guides/getting%20started/Downloading%20the%20Data/#download-data","text":"If you are interested in use the data captured by your sensors, you can download all the data for later use. To do this, go to your device page, at the bottom there is a button called DOWNLOAD DATA . You will receive an email with a link to download your data on CSV format in a minute or two. And then:","title":"Download Data"},{"location":"Guides/getting%20started/Downloading%20the%20Data/#api","text":"The Smart Citizen API allows you to request back information from your devices and do incredible things with it. It is a REST API and it returns the information in JSON format. This means you can easily access the information from any language like Javascript, PHP, Processing.org, Python, and start doing things with it quickly.","title":"API"},{"location":"Guides/getting%20started/Downloading%20the%20Data/#using-scripts","text":"Python scripts are provided in the scdata python package repository for downloading devices data in a programatic way. Make sure to check the examples in the git repository. Code examples You can also find some examples on smartcitizen-toolkit respository","title":"Using scripts"},{"location":"Guides/getting%20started/Getting%20firmware%20information/","text":"Getting firmware information \u00b6 There are two ways to get the firmware version: Using the shell Following the steps below: Getting firmware information Set your kit in setup mode by pressing the ON/OFF button Connect to the kit with your mobile device as you did during the installation process. You will need to search for a Wi-Fi network called SmartCitizen[\u00b7\u00b7\u00b7] . If you have multiple kits [\u00b7\u00b7\u00b7] is the unique identifier of your kit. Next, go to http://sck.me on your mobile device and click on the top right corner icon: Here you go! Obtain your firmware version remotely (advanced) If you are an advance user managing a big deployment of devices you can obtain remotely the version of all the Kits you have registered by looking at the hardware_info property of each of your devices using the platform API /v0/devices/ . When your Kit is in Wi-Fi mode, it publishes the information daily. \"hardware_info\": { \"id\": \"DFD098A750515157382E3120FF101D12\", \"mac\": \"B6:E6:2D:66:47:6D\", \"time\": \"2020-04-14T03:00:24Z\", \"esp_bd\": \"\", \"hw_ver\": \"2.1\", \"sam_bd\": \"2019-11-27T12:49:13Z\", \"esp_ver\": \"\", \"sam_ver\": \"0.9.6-4e90c77\" } More info in the platform API documentation .","title":"Getting firmware information"},{"location":"Guides/getting%20started/Getting%20firmware%20information/#getting-firmware-information","text":"There are two ways to get the firmware version: Using the shell Following the steps below: Getting firmware information Set your kit in setup mode by pressing the ON/OFF button Connect to the kit with your mobile device as you did during the installation process. You will need to search for a Wi-Fi network called SmartCitizen[\u00b7\u00b7\u00b7] . If you have multiple kits [\u00b7\u00b7\u00b7] is the unique identifier of your kit. Next, go to http://sck.me on your mobile device and click on the top right corner icon: Here you go! Obtain your firmware version remotely (advanced) If you are an advance user managing a big deployment of devices you can obtain remotely the version of all the Kits you have registered by looking at the hardware_info property of each of your devices using the platform API /v0/devices/ . When your Kit is in Wi-Fi mode, it publishes the information daily. \"hardware_info\": { \"id\": \"DFD098A750515157382E3120FF101D12\", \"mac\": \"B6:E6:2D:66:47:6D\", \"time\": \"2020-04-14T03:00:24Z\", \"esp_bd\": \"\", \"hw_ver\": \"2.1\", \"sam_bd\": \"2019-11-27T12:49:13Z\", \"esp_ver\": \"\", \"sam_ver\": \"0.9.6-4e90c77\" } More info in the platform API documentation .","title":"Getting firmware information"},{"location":"Guides/getting%20started/Onboarding%20Sensors/","text":"Onboarding Sensors \u00b6 The onboarding app guides you through the process of the setup using simple language and a friendly graphic language. It is built as a separate tool from the core Smart Citizen Webpage in order it can be customized for each deployment. Onboarding app Visit the onboarding app at start.smartcitizen.me . Before you start make sure you have: A computer to visit the onboarding app A smartphone (or tablet, or another computer) to connect to the kit and configure it The welcome page looks like this. For sensors different from the Smart Citizen Kit 2.1, please check the advanced kit selection : You can then follow the steps by pressing on Let's go! . For experienced users, you can press Skip instructions and go to the Configuration page: After this, make sure that the SCK is in Setup Mode (LED is red) and connect with your smartphone to the SmartCitizen[...] network. In your phone, something like below should pop-up: If nothing comes up In some cases, your phone will be disconected from the WiFi as it doesn't have access to the internet. Stay connected to it! If nothing pop-up in your phone, open your phone's web browser and navigate to sck.me After this, in case you want to configure your kit in Network mode , press Start . If you want to set it in Offline mode , press SD Card mode . If you go with Network mode, you should see the screen below. In your computer, you should click Next and see a 6 letter token to be input in your phone: Depending on the mode selected (Wi-Fi or SD card), proceed with the steps and make sure the LED changes color: blue for Wi-Fi, purple for SD card. Once this is done, register your kit and add it to your user profile following the steps: You can also mark it's location in the map (this doesn't need to be accurate, it's as accurate as you want it to be): Location of the sensor The sensor location is only defined by the user in the registration process. It can be modified afterwards in the kit edit page . The Smart Citizen Kit does not retrieve location unless it has an onboard GPS. In this case, the GPS location never updates the location in the map . You can also add some tags to your sensor: Finally, add the sensor to your user account (if you don't have one you can register now): What is the email used for? The user account and email is only used for sensor data emails and sensor notifications (i.e. notification when the battery is almost empty). It is not used for commercial purposes at all, as stated in our policy You are done! Visit the Kit on the platform. Wait one minute till it publishes data : When the data is available, scroll down to make some basic explorations: More on the data The platform allows you to check the data in a basic way, but if you want to have a deeper look you can: Download the data in CSV Get it from the API Use python to analyse it Advanced Kit Selection \u00b6 The feature below is for users who want to know how to configure new or customized sensor devices: How to choose a custom kit Click the \ud83d\udee0\ufe0f icon in the bottom right corner Choose the blueprint of the device you want to setup Click save and continue the process as normal IDs for MINKE \u00b6 Kit Extras ID Metrics Citizen Kit None 26 (default) T, H, P, PM, Noise, Light and VOCs Citizen Kit with External T/H Probe T/H Probe 38 T, H, P, PM, Noise, Light and VOCs and external T/H probe Citizen Kit with GPS GPS 38 T, H, P, PM, Noise, Light and VOCs and GPS Metrics Basic Water Kit Reduced Water sensors 31 One of pH, ORP, Temp Advanced Water Station Water sensors and GPS (optional) 31 Some or all of pH, ORP, DO, COND, T and optional GPS","title":"Onboarding Sensors"},{"location":"Guides/getting%20started/Onboarding%20Sensors/#onboarding-sensors","text":"The onboarding app guides you through the process of the setup using simple language and a friendly graphic language. It is built as a separate tool from the core Smart Citizen Webpage in order it can be customized for each deployment. Onboarding app Visit the onboarding app at start.smartcitizen.me . Before you start make sure you have: A computer to visit the onboarding app A smartphone (or tablet, or another computer) to connect to the kit and configure it The welcome page looks like this. For sensors different from the Smart Citizen Kit 2.1, please check the advanced kit selection : You can then follow the steps by pressing on Let's go! . For experienced users, you can press Skip instructions and go to the Configuration page: After this, make sure that the SCK is in Setup Mode (LED is red) and connect with your smartphone to the SmartCitizen[...] network. In your phone, something like below should pop-up: If nothing comes up In some cases, your phone will be disconected from the WiFi as it doesn't have access to the internet. Stay connected to it! If nothing pop-up in your phone, open your phone's web browser and navigate to sck.me After this, in case you want to configure your kit in Network mode , press Start . If you want to set it in Offline mode , press SD Card mode . If you go with Network mode, you should see the screen below. In your computer, you should click Next and see a 6 letter token to be input in your phone: Depending on the mode selected (Wi-Fi or SD card), proceed with the steps and make sure the LED changes color: blue for Wi-Fi, purple for SD card. Once this is done, register your kit and add it to your user profile following the steps: You can also mark it's location in the map (this doesn't need to be accurate, it's as accurate as you want it to be): Location of the sensor The sensor location is only defined by the user in the registration process. It can be modified afterwards in the kit edit page . The Smart Citizen Kit does not retrieve location unless it has an onboard GPS. In this case, the GPS location never updates the location in the map . You can also add some tags to your sensor: Finally, add the sensor to your user account (if you don't have one you can register now): What is the email used for? The user account and email is only used for sensor data emails and sensor notifications (i.e. notification when the battery is almost empty). It is not used for commercial purposes at all, as stated in our policy You are done! Visit the Kit on the platform. Wait one minute till it publishes data : When the data is available, scroll down to make some basic explorations: More on the data The platform allows you to check the data in a basic way, but if you want to have a deeper look you can: Download the data in CSV Get it from the API Use python to analyse it","title":"Onboarding Sensors"},{"location":"Guides/getting%20started/Onboarding%20Sensors/#advanced-kit-selection","text":"The feature below is for users who want to know how to configure new or customized sensor devices: How to choose a custom kit Click the \ud83d\udee0\ufe0f icon in the bottom right corner Choose the blueprint of the device you want to setup Click save and continue the process as normal","title":"Advanced Kit Selection"},{"location":"Guides/getting%20started/Onboarding%20Sensors/#ids-for-minke","text":"Kit Extras ID Metrics Citizen Kit None 26 (default) T, H, P, PM, Noise, Light and VOCs Citizen Kit with External T/H Probe T/H Probe 38 T, H, P, PM, Noise, Light and VOCs and external T/H probe Citizen Kit with GPS GPS 38 T, H, P, PM, Noise, Light and VOCs and GPS Metrics Basic Water Kit Reduced Water sensors 31 One of pH, ORP, Temp Advanced Water Station Water sensors and GPS (optional) 31 Some or all of pH, ORP, DO, COND, T and optional GPS","title":"IDs for MINKE"},{"location":"Guides/getting%20started/Updating%20the%20Wi-Fi/","text":"Updating the Wi-Fi \u00b6 Info This guide will help you update your sensor Wi-Fi settings as well as other parameters, such as the device token Warning The kit supports Wi-Fi WEP, WPA/WPA2 and open networks that are common networks in domestic environments and small businesses. But, it does not support WPA/WPA2 Enterprise networks such as EDUROAM or networks with captive portals such as those found in Airports and Hotels Click your kit button until the kit is in setup mode , the LED should be red. Connect to the kit with your mobile device as you did during the installation process. You will need to search for a Wi-Fi network called SmartCitizen[\u00b7\u00b7\u00b7] . If you have multiple kits [\u00b7\u00b7\u00b7] is the unique identifier of your kit. Once connected you should see the Setup App in your phone . If it doesn't show up automatically you can open http://192.168.1.1 on your phone browser. Info The process also works on laptops, desktops and tablets, connected than can connect to the SmartCitizen[\u00b7\u00b7\u00b7] network. On the app choose start to move to the next page. You will see your device key or token . Do not change it and choose next . Set your new Wi-Fi settings on the next screen as you did during the installation process. The LED will go blue and your kit should start to publish again using the new Wi-Fi . You can confirm it by visiting your device on smartcitizen.me/kits . You can repeat the process as many times as you want by going back to step 1. Info If your Kit is not publishing check the LED status chart to know more about it.","title":"Updating the Wi-Fi"},{"location":"Guides/getting%20started/Updating%20the%20Wi-Fi/#updating-the-wi-fi","text":"Info This guide will help you update your sensor Wi-Fi settings as well as other parameters, such as the device token Warning The kit supports Wi-Fi WEP, WPA/WPA2 and open networks that are common networks in domestic environments and small businesses. But, it does not support WPA/WPA2 Enterprise networks such as EDUROAM or networks with captive portals such as those found in Airports and Hotels Click your kit button until the kit is in setup mode , the LED should be red. Connect to the kit with your mobile device as you did during the installation process. You will need to search for a Wi-Fi network called SmartCitizen[\u00b7\u00b7\u00b7] . If you have multiple kits [\u00b7\u00b7\u00b7] is the unique identifier of your kit. Once connected you should see the Setup App in your phone . If it doesn't show up automatically you can open http://192.168.1.1 on your phone browser. Info The process also works on laptops, desktops and tablets, connected than can connect to the SmartCitizen[\u00b7\u00b7\u00b7] network. On the app choose start to move to the next page. You will see your device key or token . Do not change it and choose next . Set your new Wi-Fi settings on the next screen as you did during the installation process. The LED will go blue and your kit should start to publish again using the new Wi-Fi . You can confirm it by visiting your device on smartcitizen.me/kits . You can repeat the process as many times as you want by going back to step 1. Info If your Kit is not publishing check the LED status chart to know more about it.","title":"Updating the Wi-Fi"},{"location":"Guides/getting%20started/Uploading%20SD%20Card%20Data/","text":"Uploading SD Card Data \u00b6 Here some instructions on how to upload CSV files to Smartcitizen platform. First be sure to be logged and go to your profile . Weird files? Check what they mean here Step by step On your kits' list, click on the wheel and then on \"Upload CSV\". Once on the upload page, you can add some files by clicking on the \"Load CSV files\" button. Select some files as much as you like, to be them ready to upload. Then on the drop-down menu select the \"Upload\" option Click on the \"Apply\" button to upload them Congrats! You just uploaded your files CSV files on the Smartcitizen platform.","title":"Uploading SD-card data"},{"location":"Guides/getting%20started/Uploading%20SD%20Card%20Data/#uploading-sd-card-data","text":"Here some instructions on how to upload CSV files to Smartcitizen platform. First be sure to be logged and go to your profile . Weird files? Check what they mean here Step by step On your kits' list, click on the wheel and then on \"Upload CSV\". Once on the upload page, you can add some files by clicking on the \"Load CSV files\" button. Select some files as much as you like, to be them ready to upload. Then on the drop-down menu select the \"Upload\" option Click on the \"Apply\" button to upload them Congrats! You just uploaded your files CSV files on the Smartcitizen platform.","title":"Uploading SD Card Data"},{"location":"Guides/getting%20started/Using%20the%20Shell/","text":"Using the Shell \u00b6 The SCK (from V2.0 onwards) has an integrated command shell over USB to manage all the kits functionalities for advanced users. In this guide, we will cover how to access to this functionality in different platforms, and some examples. What is it? \u00b6 We could define the shell as a text-based interface to access almost any SCK functionality. In terms of hardware, it relies on the serial communication between the SCK and your computer, so any decent USB cable connected between them will do. How to access it? \u00b6 Software-wise, different platforms will have different interfaces. The easiest and most reliable for all of them would be through the Arduino IDE . Using the Arduino IDE Launch the Arduino IDE and select the port under Tools > Port > : Launch the Serial Monitor under Tools > Serial Monitor . Make sure that the dropdowns in the bottom are set as in the image below ( Carriage return and 115200 baud ) Type in help to get started. More advanced users would probably rather use a more rugged interface. In this case, you could use screen in your terminal of choice: > ls /dev/cu | grep usb cu.usbmodem1411 tty.usbmodem1411 > screen /dev/cu.usmodem1411 SCK > ... If you already installed platformio to edit the firmware you can use it here, too > pio device monitor SCK > ... Be patient! The port will take a little time to appear in your list of devices. Normally the LED of your SCK will be static white during that period. Some examples! \u00b6 The help command outputs a quite intuitive explanation of all the commands: SCK > help reset: Resets the SCK version: Shows versions and Hardware ID rcause: Show last reset cause (debug) outlevel: Shows/sets output level: outlevel [0:silent, 1:normal, 2:verbose] help: Duhhhh!! pinmux: Shows SAMD pin mapping status flash: Shows and manage flash memory state [no-param -> info] [-format (be carefull)] [-dump sect-num (0-2040)] [-sector sect-num] [-recover sect-num/all net/sd] sensor: Shows/sets sensor state or interval: sensor sensor-name [-enable or -disable] [-interval interval(seconds)] [-oled] read: Reads sensor: read [sensorName] control: Control sensor: control [sensorName] [command] monitor: Continously read sensor: monitor [-sd] [-notime] [-noms] [-oled] [sensorName[,sensorNameN]] free: Shows the amount of free RAM memory i2c: Search the I2C bus for devices power: Controls/shows power config: power [-info (extra info)] [-batcap mAh] [-otg on/off] [-charge on/off] [-sleep min (0-disable)] config: Shows/sets configuration: config [-defaults] [-mode sdcard/network] [-pubint seconds] [-readint seconds] [-wifi \"ssid\" [\"pass\"]] [-token token] esp: Controls or shows info from ESP: esp [-on -off -sleep -wake -reboot -flash] netinfo: Shows network information time: Shows/sets date and time: time [epoch time] [-sync] hello: Sends MQTT hello to platform debug: Toggle debug messages: debug [-sdcard] [-esp] [-oled] [-flash] [-telnet] [-speed] shell: Shows or sets shell mode: shell [-on] [-off] publish: Publish custom mqtt message: mqtt [\"topic\" \"message\"] offline: Configure offline periods and WiFi retry interval: [-retryint seconds] [-period start-hour end-hour (UTC 0-23)] mqttsrv: Configure mqtt server address and port: [-host serverName] [-port portNum] ntpsrv: Configure ntp server address and port: [-host serverName] [-port portNum] Shell Mode \u00b6 The SCK outputs a lot of information via serial. This can be sometimes confusing while typing commands. You can silent it a bit with this command: SCK > shell -on Shell mode: on This will turn your LED static yellow , and no output except responses to your commands will be given. Remember to turn it off after you are done experimenting! SCK > shell -off Shell mode: off Set the recording configuration \u00b6 If you want to change your recording mode to, for instance, sdcard mode, you could do so by typing: SCK > config -mode sdcard To set it up in network mode: SCK > config -mode network -wifi \"SSID\" \"PASSWORD\" -token 123456 Warning Note that the token is not between quotes since it's always 6 digits To modify your wifi: SCK > config -wifi \"NEWSSID\" \"NEWPASSWORD\" You can check your current configuration by typing config : SCK > config Mode: sdcard Publish interval: 60 Reading interval: 60 Wifi credentials: not configured Token: not configured Mac address: 11:22:33:44:55:66 Set recording and publication intervals \u00b6 In order to understand the reading and publication intervals, it is important to describe how the structure of the measurements is done: Overall reading interval : base period for the SCK to take a measurement Individual sensor reading interval : period for each sensor to take a measurement. It is defined as N times the Overall reading interval Publication interval : time for the SCK to publish to the Smart Citizen Platform, independent of the reading interval. Each of the sensors can be configured independently, with a reading interval N times the overall reading interval . For instance, after the SAM firmware V0.9.7 , all the sensors are read every 60s except the PMS5003, which is read every 5 minutes or 5 times the reading interval. In the case of the publication interval to the Smart Citizen Platform, the default is 3 minutes. Battery calculator This configuration option is very interesting to be used for battery saving. Make sure you check the battery calculator All this can be configured using the shell interface. For instance, to set the publication interval to every 10 minutes, we could do: config -pubint 600 Or to set the reading interval to every 3 minutes: config -readint 180 Or both at 10 minutes: config -pubint 600 -readint 600 If we want to configure one specific sensor, we can do so by typing the following, only remember, that it's rounded to the closest integer multiplier of the overall reading interval : SCK > sensor temp -interval 360 The sensor read interval is calculated as a multiple of general read interval (180) Changing interval of Temperature to 360 Saved configuration on eeprom!! For instance, if we try to do 1.5 times the reading interval of the temperature sensor, we will get: SCK > sensor temp -interval 240 The sensor read interval is calculated as a multiple of general read interval (180) Changing interval of Temperature to 180 Saved configuration on eeprom!! Some limitations apply though: The minimum reading and publish interval is 5s The maximum reading interval is one hour The maximum publish interval is one hour For more customisation, please email or post on the forum . Default configuration At the moment there is no command to return to the default configuration. You should use: config -pubint 300 -readint 60 ... sensor pm -interval 300 Get version data \u00b6 Check your hardware and firmware version data with the command version : SCK > version Hardware Version: 2.1 SAM Hardware ID: 5934C4B550515157382E3120FF151210 SAM version: 0.9.1-30e1776 SAM build date: 2019-05-07T02:45:29Z ESP MAC address: 86:0D:8E:A7:7F:CC ESP version: not synced ESP build date: not synced List/modify the active sensors \u00b6 By typing in sensor , a list of enabled and supported sensors is displayed: SCK > sensor Disabled ---------- PM board Dallas Temperature [...] Enabled ---------- Temperature (60 sec) Humidity (60 sec) Battery (60 sec) Light (60 sec) Noise dBA (60 sec) Barometric pressure (60 sec) VOC Gas CCS811 (60 sec) eCO2 Gas CCS811 (60 sec) PM 1.0 (60 sec) PM 2.5 (60 sec) PM 10.0 (60 sec) To disable one sensor, you can type in part of the sensor name: SCK > sensor Noise -disable Disabling Noise dBA Saved configuration on eeprom!! To enable it, if it's present: SCK > sensor Noise -enable Enabling Noise dBA Saved configuration on eeprom!! Only if available! If the sensor you are trying to connect is not recognised, the kit will complain: SCK > sensor atlas -enable Failed enabling Atlas Temperature Read/Monitor some sensors \u00b6 If one sensor is enabled, you can read it (once) or monitor it (as fast as the SCK can): SCK > read Noise Noise dBA: 53.85 dBA To monitor one sensor : SCK > monitor light Time Miliseconds Light 2019-07-10T17:58:07Z 6 137 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:07Z 98 136 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:07Z 108 137 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:07Z 108 137 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:08Z 98 137 2019-07-10T17:58:08Z 108 137 2019-07-10T17:58:08Z 98 136 ... Or all of them, with no arguments: SCK > monitor Time Miliseconds Battery Light Temperature Humidity Noise dBA Barometric pressure VOC Gas CCS811 eCO2 Gas CCS811 PM 1.0 PM 2.5 PM 10.0 2019-07-11T09:13:04Z 5 37 137 28.75 57.72 1.5 101.29 1.00 408.00 1.5 1.5 1.5 2019-07-11T09:13:07Z 3195 37 138 28.78 57.65 1.5 101.30 1.00 408.00 1.5 1.5 1.5 2019-07-11T09:13:08Z 694 37 136 28.77 57.62 1.5 101.29 1.00 408.00 1.5 1.5 1.5 If you don't need to output the miliseconds column (the time since last reading) or the timestamp , you can do so by: SCK > monitor -noms light Time Light 2019-07-10T17:58:58Z 136 2019-07-10T17:58:58Z 136 2019-07-10T17:58:58Z 137 2019-07-10T17:58:58Z 137 2019-07-10T17:58:59Z 136 ... SCK > monitor -notime light Miliseconds Light 6 137 98 137 98 137 99 137 108 137 ... Warning If your kit has no time configured (the LED should be flashing), the output would look like: SCK > monitor Noise Time Miliseconds Noise dBA 0 1 52.83 0 187 50.36 0 187 52.05 0 187 51.95 0 187 48.28 0 187 48.72 0 187 50.81 ... Something cool to do with the monitor , is to log the sensor output into a file for later analysis. For instance, in your terminal you could do: > echo \"monitor pm light\" > /dev/cu.usbmodem1411 && screen -L /dev/cu.usbmodem1411 Then, if we check the contents of the file (normally something like screenlog.X : monitor light Time Miliseconds Light 2019-07-11T09:10:05Z 6 141 2019-07-11T09:10:05Z 98 141 2019-07-11T09:10:05Z 99 141 2019-07-11T09:10:05Z 98 141 2019-07-11T09:10:05Z 108 141 2019-07-11T09:10:05Z 98 141 2019-07-11T09:10:05Z 98 141 2019-07-11T09:10:05Z 98 141 2019-07-11T09:10:06Z 98 141 2019-07-11T09:10:06Z 98 141 2019-07-11T09:10:06Z 108 141 2019-07-11T09:10:06Z 98 141 2019-07-11T09:10:06Z 98 141 ... This can be useful in case you want to log data as fast as possible, with little delay between readings (~100ms). Changing mqtt or ntp servers \u00b6 If you want to send data to your own server, or there is a firewall in your network, you can use these two commands to change them: mqttsrv: Configure mqtt server address and port: [-host serverName] [-port portNum] ntpsrv: Configure ntp server address and port: [-host serverName] [-port portNum] Check the mqttsrv : SCK > mqttsrv Mqtt Host: mqtt.smartcitizen.me Mqtt Port: 1883 Check the ntpsrv : SCK > ntpsrv NTP Host: ntp.smartcitizen.me NTP Port: 80 Change mqttsrv host and port : SCK > mqttsrv -host mqtt.greatcity.me -port 80 Mqtt Host: mqtt.greatcity.me Mqtt Port: 80 Accessing the flash memory \u00b6 This is an advanced feature and helps to explore the data stored in the onboard flash memory for debugging purposes. Get a complete map of used sectors in the flash memory: SCK > flash Scanning Flash memory (it can take a while!) 0 > |u38(_/_)|u36(_/_)|u34(_/_)|u35(_/_)|u35(_/_)|u34(_/_)|u34(_/_)|u35(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u37(_/_)|u37(_/_)|u37(_/_)| 32 > |u37(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u36(_/_)| ... Format the flash (will take a long time): flash -format Check a sector (see what's inside): SCK > flash -sector 300 Sector 300 in address 1228800 is: Used Sector 300 fully published to network: true Sector 300 fully published to sd-card: true Net published groups: 37 Net un-published groups: 0 Sd saved groups: 37 Sd not saved groups: 0 Total groups: 37 Freespace: 53 bytes First group: 2021-07-08T09:04:19Z Last group: 2021-07-12T07:34:49Z Recover a sector (send it to the platform or save in sdcard, or both - see help command): flash -recover all net Advanced (but cool) example! \u00b6 Making most of the digital microphone The digital microphone in your SCK uses an FFT algorithm to calculate the final sound pressure level (SPL) in different scales (A, C, Z). The FFT spectrum is also available for user analysis. Let's have a look! First, enable it with: SCK > sensor fft -enable Enabling Noise FFT Then, monitor and log it in a file with: echo \"monitor fft\" > /dev/cu.usbmodem1411 && screen -L /dev/cu.usbmodem1411 In this file, we will have something like: 12 15 19 20 0 ... 12 23 2019-07-11T09:30:01Z 5 null ... The values between the dates are the actual FFT spectrum. We will now clean the lines with the dates and then plot the data. For this, we will use a python code to make things easier. You can download the code here . If we run this code in python3 in the same folder where the screenlog from before is: > python spectrum_example.py We will have two outputs: a csv file with the spectrums in rows, and a png image that looks like this! You can see that we were playing with a tone generator to make some high pitch noises at 10kHz and 20kHz.","title":"Using the Shell"},{"location":"Guides/getting%20started/Using%20the%20Shell/#using-the-shell","text":"The SCK (from V2.0 onwards) has an integrated command shell over USB to manage all the kits functionalities for advanced users. In this guide, we will cover how to access to this functionality in different platforms, and some examples.","title":"Using the Shell"},{"location":"Guides/getting%20started/Using%20the%20Shell/#what-is-it","text":"We could define the shell as a text-based interface to access almost any SCK functionality. In terms of hardware, it relies on the serial communication between the SCK and your computer, so any decent USB cable connected between them will do.","title":"What is it?"},{"location":"Guides/getting%20started/Using%20the%20Shell/#how-to-access-it","text":"Software-wise, different platforms will have different interfaces. The easiest and most reliable for all of them would be through the Arduino IDE . Using the Arduino IDE Launch the Arduino IDE and select the port under Tools > Port > : Launch the Serial Monitor under Tools > Serial Monitor . Make sure that the dropdowns in the bottom are set as in the image below ( Carriage return and 115200 baud ) Type in help to get started. More advanced users would probably rather use a more rugged interface. In this case, you could use screen in your terminal of choice: > ls /dev/cu | grep usb cu.usbmodem1411 tty.usbmodem1411 > screen /dev/cu.usmodem1411 SCK > ... If you already installed platformio to edit the firmware you can use it here, too > pio device monitor SCK > ... Be patient! The port will take a little time to appear in your list of devices. Normally the LED of your SCK will be static white during that period.","title":"How to access it?"},{"location":"Guides/getting%20started/Using%20the%20Shell/#some-examples","text":"The help command outputs a quite intuitive explanation of all the commands: SCK > help reset: Resets the SCK version: Shows versions and Hardware ID rcause: Show last reset cause (debug) outlevel: Shows/sets output level: outlevel [0:silent, 1:normal, 2:verbose] help: Duhhhh!! pinmux: Shows SAMD pin mapping status flash: Shows and manage flash memory state [no-param -> info] [-format (be carefull)] [-dump sect-num (0-2040)] [-sector sect-num] [-recover sect-num/all net/sd] sensor: Shows/sets sensor state or interval: sensor sensor-name [-enable or -disable] [-interval interval(seconds)] [-oled] read: Reads sensor: read [sensorName] control: Control sensor: control [sensorName] [command] monitor: Continously read sensor: monitor [-sd] [-notime] [-noms] [-oled] [sensorName[,sensorNameN]] free: Shows the amount of free RAM memory i2c: Search the I2C bus for devices power: Controls/shows power config: power [-info (extra info)] [-batcap mAh] [-otg on/off] [-charge on/off] [-sleep min (0-disable)] config: Shows/sets configuration: config [-defaults] [-mode sdcard/network] [-pubint seconds] [-readint seconds] [-wifi \"ssid\" [\"pass\"]] [-token token] esp: Controls or shows info from ESP: esp [-on -off -sleep -wake -reboot -flash] netinfo: Shows network information time: Shows/sets date and time: time [epoch time] [-sync] hello: Sends MQTT hello to platform debug: Toggle debug messages: debug [-sdcard] [-esp] [-oled] [-flash] [-telnet] [-speed] shell: Shows or sets shell mode: shell [-on] [-off] publish: Publish custom mqtt message: mqtt [\"topic\" \"message\"] offline: Configure offline periods and WiFi retry interval: [-retryint seconds] [-period start-hour end-hour (UTC 0-23)] mqttsrv: Configure mqtt server address and port: [-host serverName] [-port portNum] ntpsrv: Configure ntp server address and port: [-host serverName] [-port portNum]","title":"Some examples!"},{"location":"Guides/getting%20started/Using%20the%20Shell/#shell-mode","text":"The SCK outputs a lot of information via serial. This can be sometimes confusing while typing commands. You can silent it a bit with this command: SCK > shell -on Shell mode: on This will turn your LED static yellow , and no output except responses to your commands will be given. Remember to turn it off after you are done experimenting! SCK > shell -off Shell mode: off","title":"Shell Mode"},{"location":"Guides/getting%20started/Using%20the%20Shell/#set-the-recording-configuration","text":"If you want to change your recording mode to, for instance, sdcard mode, you could do so by typing: SCK > config -mode sdcard To set it up in network mode: SCK > config -mode network -wifi \"SSID\" \"PASSWORD\" -token 123456 Warning Note that the token is not between quotes since it's always 6 digits To modify your wifi: SCK > config -wifi \"NEWSSID\" \"NEWPASSWORD\" You can check your current configuration by typing config : SCK > config Mode: sdcard Publish interval: 60 Reading interval: 60 Wifi credentials: not configured Token: not configured Mac address: 11:22:33:44:55:66","title":"Set the recording configuration"},{"location":"Guides/getting%20started/Using%20the%20Shell/#set-recording-and-publication-intervals","text":"In order to understand the reading and publication intervals, it is important to describe how the structure of the measurements is done: Overall reading interval : base period for the SCK to take a measurement Individual sensor reading interval : period for each sensor to take a measurement. It is defined as N times the Overall reading interval Publication interval : time for the SCK to publish to the Smart Citizen Platform, independent of the reading interval. Each of the sensors can be configured independently, with a reading interval N times the overall reading interval . For instance, after the SAM firmware V0.9.7 , all the sensors are read every 60s except the PMS5003, which is read every 5 minutes or 5 times the reading interval. In the case of the publication interval to the Smart Citizen Platform, the default is 3 minutes. Battery calculator This configuration option is very interesting to be used for battery saving. Make sure you check the battery calculator All this can be configured using the shell interface. For instance, to set the publication interval to every 10 minutes, we could do: config -pubint 600 Or to set the reading interval to every 3 minutes: config -readint 180 Or both at 10 minutes: config -pubint 600 -readint 600 If we want to configure one specific sensor, we can do so by typing the following, only remember, that it's rounded to the closest integer multiplier of the overall reading interval : SCK > sensor temp -interval 360 The sensor read interval is calculated as a multiple of general read interval (180) Changing interval of Temperature to 360 Saved configuration on eeprom!! For instance, if we try to do 1.5 times the reading interval of the temperature sensor, we will get: SCK > sensor temp -interval 240 The sensor read interval is calculated as a multiple of general read interval (180) Changing interval of Temperature to 180 Saved configuration on eeprom!! Some limitations apply though: The minimum reading and publish interval is 5s The maximum reading interval is one hour The maximum publish interval is one hour For more customisation, please email or post on the forum . Default configuration At the moment there is no command to return to the default configuration. You should use: config -pubint 300 -readint 60 ... sensor pm -interval 300","title":"Set recording and publication intervals"},{"location":"Guides/getting%20started/Using%20the%20Shell/#get-version-data","text":"Check your hardware and firmware version data with the command version : SCK > version Hardware Version: 2.1 SAM Hardware ID: 5934C4B550515157382E3120FF151210 SAM version: 0.9.1-30e1776 SAM build date: 2019-05-07T02:45:29Z ESP MAC address: 86:0D:8E:A7:7F:CC ESP version: not synced ESP build date: not synced","title":"Get version data"},{"location":"Guides/getting%20started/Using%20the%20Shell/#listmodify-the-active-sensors","text":"By typing in sensor , a list of enabled and supported sensors is displayed: SCK > sensor Disabled ---------- PM board Dallas Temperature [...] Enabled ---------- Temperature (60 sec) Humidity (60 sec) Battery (60 sec) Light (60 sec) Noise dBA (60 sec) Barometric pressure (60 sec) VOC Gas CCS811 (60 sec) eCO2 Gas CCS811 (60 sec) PM 1.0 (60 sec) PM 2.5 (60 sec) PM 10.0 (60 sec) To disable one sensor, you can type in part of the sensor name: SCK > sensor Noise -disable Disabling Noise dBA Saved configuration on eeprom!! To enable it, if it's present: SCK > sensor Noise -enable Enabling Noise dBA Saved configuration on eeprom!! Only if available! If the sensor you are trying to connect is not recognised, the kit will complain: SCK > sensor atlas -enable Failed enabling Atlas Temperature","title":"List/modify the active sensors"},{"location":"Guides/getting%20started/Using%20the%20Shell/#readmonitor-some-sensors","text":"If one sensor is enabled, you can read it (once) or monitor it (as fast as the SCK can): SCK > read Noise Noise dBA: 53.85 dBA To monitor one sensor : SCK > monitor light Time Miliseconds Light 2019-07-10T17:58:07Z 6 137 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:07Z 98 136 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:07Z 108 137 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:07Z 108 137 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:08Z 98 137 2019-07-10T17:58:08Z 108 137 2019-07-10T17:58:08Z 98 136 ... Or all of them, with no arguments: SCK > monitor Time Miliseconds Battery Light Temperature Humidity Noise dBA Barometric pressure VOC Gas CCS811 eCO2 Gas CCS811 PM 1.0 PM 2.5 PM 10.0 2019-07-11T09:13:04Z 5 37 137 28.75 57.72 1.5 101.29 1.00 408.00 1.5 1.5 1.5 2019-07-11T09:13:07Z 3195 37 138 28.78 57.65 1.5 101.30 1.00 408.00 1.5 1.5 1.5 2019-07-11T09:13:08Z 694 37 136 28.77 57.62 1.5 101.29 1.00 408.00 1.5 1.5 1.5 If you don't need to output the miliseconds column (the time since last reading) or the timestamp , you can do so by: SCK > monitor -noms light Time Light 2019-07-10T17:58:58Z 136 2019-07-10T17:58:58Z 136 2019-07-10T17:58:58Z 137 2019-07-10T17:58:58Z 137 2019-07-10T17:58:59Z 136 ... SCK > monitor -notime light Miliseconds Light 6 137 98 137 98 137 99 137 108 137 ... Warning If your kit has no time configured (the LED should be flashing), the output would look like: SCK > monitor Noise Time Miliseconds Noise dBA 0 1 52.83 0 187 50.36 0 187 52.05 0 187 51.95 0 187 48.28 0 187 48.72 0 187 50.81 ... Something cool to do with the monitor , is to log the sensor output into a file for later analysis. For instance, in your terminal you could do: > echo \"monitor pm light\" > /dev/cu.usbmodem1411 && screen -L /dev/cu.usbmodem1411 Then, if we check the contents of the file (normally something like screenlog.X : monitor light Time Miliseconds Light 2019-07-11T09:10:05Z 6 141 2019-07-11T09:10:05Z 98 141 2019-07-11T09:10:05Z 99 141 2019-07-11T09:10:05Z 98 141 2019-07-11T09:10:05Z 108 141 2019-07-11T09:10:05Z 98 141 2019-07-11T09:10:05Z 98 141 2019-07-11T09:10:05Z 98 141 2019-07-11T09:10:06Z 98 141 2019-07-11T09:10:06Z 98 141 2019-07-11T09:10:06Z 108 141 2019-07-11T09:10:06Z 98 141 2019-07-11T09:10:06Z 98 141 ... This can be useful in case you want to log data as fast as possible, with little delay between readings (~100ms).","title":"Read/Monitor some sensors"},{"location":"Guides/getting%20started/Using%20the%20Shell/#changing-mqtt-or-ntp-servers","text":"If you want to send data to your own server, or there is a firewall in your network, you can use these two commands to change them: mqttsrv: Configure mqtt server address and port: [-host serverName] [-port portNum] ntpsrv: Configure ntp server address and port: [-host serverName] [-port portNum] Check the mqttsrv : SCK > mqttsrv Mqtt Host: mqtt.smartcitizen.me Mqtt Port: 1883 Check the ntpsrv : SCK > ntpsrv NTP Host: ntp.smartcitizen.me NTP Port: 80 Change mqttsrv host and port : SCK > mqttsrv -host mqtt.greatcity.me -port 80 Mqtt Host: mqtt.greatcity.me Mqtt Port: 80","title":"Changing mqtt or ntp servers"},{"location":"Guides/getting%20started/Using%20the%20Shell/#accessing-the-flash-memory","text":"This is an advanced feature and helps to explore the data stored in the onboard flash memory for debugging purposes. Get a complete map of used sectors in the flash memory: SCK > flash Scanning Flash memory (it can take a while!) 0 > |u38(_/_)|u36(_/_)|u34(_/_)|u35(_/_)|u35(_/_)|u34(_/_)|u34(_/_)|u35(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u37(_/_)|u37(_/_)|u37(_/_)| 32 > |u37(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u36(_/_)| ... Format the flash (will take a long time): flash -format Check a sector (see what's inside): SCK > flash -sector 300 Sector 300 in address 1228800 is: Used Sector 300 fully published to network: true Sector 300 fully published to sd-card: true Net published groups: 37 Net un-published groups: 0 Sd saved groups: 37 Sd not saved groups: 0 Total groups: 37 Freespace: 53 bytes First group: 2021-07-08T09:04:19Z Last group: 2021-07-12T07:34:49Z Recover a sector (send it to the platform or save in sdcard, or both - see help command): flash -recover all net","title":"Accessing the flash memory"},{"location":"Guides/getting%20started/Using%20the%20Shell/#advanced-but-cool-example","text":"Making most of the digital microphone The digital microphone in your SCK uses an FFT algorithm to calculate the final sound pressure level (SPL) in different scales (A, C, Z). The FFT spectrum is also available for user analysis. Let's have a look! First, enable it with: SCK > sensor fft -enable Enabling Noise FFT Then, monitor and log it in a file with: echo \"monitor fft\" > /dev/cu.usbmodem1411 && screen -L /dev/cu.usbmodem1411 In this file, we will have something like: 12 15 19 20 0 ... 12 23 2019-07-11T09:30:01Z 5 null ... The values between the dates are the actual FFT spectrum. We will now clean the lines with the dates and then plot the data. For this, we will use a python code to make things easier. You can download the code here . If we run this code in python3 in the same folder where the screenlog from before is: > python spectrum_example.py We will have two outputs: a csv file with the spectrums in rows, and a png image that looks like this! You can see that we were playing with a tone generator to make some high pitch noises at 10kHz and 20kHz.","title":"Advanced (but cool) example!"},{"location":"Projects/about/","text":"Projects \u00b6 This section will host the results and discussions around the different projects during the MINKE project Open Calls with Low Cost sensors. Let's do this! If you are part of a project in the Open calls, you will have free access to sensors and the team's support for your projects. The only thing we ask in return is to make sure to document the project with care . For this, we think that sharing the results of the project, as well as your data and findings is very important. We have prepared a good guide available in our demo project book project . With this we hope to encourage sharing knowledge with other projects. Finally, remember that you can use our forum to interact with your own local community if you wish! Demo ACTIVATE SmartCoKLIMINKE Lowess","title":"About this section"},{"location":"Projects/about/#projects","text":"This section will host the results and discussions around the different projects during the MINKE project Open Calls with Low Cost sensors. Let's do this! If you are part of a project in the Open calls, you will have free access to sensors and the team's support for your projects. The only thing we ask in return is to make sure to document the project with care . For this, we think that sharing the results of the project, as well as your data and findings is very important. We have prepared a good guide available in our demo project book project . With this we hope to encourage sharing knowledge with other projects. Finally, remember that you can use our forum to interact with your own local community if you wish! Demo ACTIVATE SmartCoKLIMINKE Lowess","title":"Projects"},{"location":"Sensors/","text":"Sensors \u00b6 The MINKE sensor portfolio is a selection of sensors from the Smart Citizen project , and aims to create a boilerplate for individuals and communities with different sensing expertise levels in a modular, expandable and intuitive way . We have made a selection of sensors to get started with the most common use cases. How to get them? If you are interested, and have an use case or project that needs of some sensors, support or maybe some enclosures, this is for you! We will be creating a series of open calls . Sensor packs \u00b6 Citizen Kit : for those cases where a low cost sensor is needed for basic monitoring of climate metrics, or some basic air pollution setups Citizen Water Kit : a combination of water and air sensors, to choose between pH and ORP for water sensors, water temperature, and adding an air temperature and humidity Citizen Water Station : a flexible solution for water monitoring. Includes metrics like pH, DO, Conductivity, ORP and submergible temperature, with optional GPS Kit Use Available units Metrics Power Battery only? Citizen Kit Air quality 60-90 T, H, P, PM, Noise, Light and VOCs USB or AC with Power supply Yes Basic Water Station Air/Water 40-50 Air T, H; Water pH, ORP or T USB or AC with Power supply Yes Advanced Water Station Water 16 Water pH, ORP, DO, COND, T and optional GPS USB or AC with Power supply No (yes with external battery pack) Looking for mobile measurements? We also include GPS readings in some of the sensors, to be able to measure dynamically like in the Pati Cientific IDs for platform registration \u00b6 Kit Extras ID Metrics Citizen Kit None 26 (default) T, H, P, PM, Noise, Light and VOCs Citizen Kit with External T/H Probe T/H Probe 38 T, H, P, PM, Noise, Light and VOCs and external T/H probe Citizen Kit with GPS GPS 38 T, H, P, PM, Noise, Light and VOCs and GPS Metrics Basic Water Kit Reduced Water sensors 31 One of pH, ORP, Temp Advanced Water Station Water sensors and GPS (optional) 31 Some or all of pH, ORP, DO, COND, T and optional GPS","title":"Index"},{"location":"Sensors/#sensors","text":"The MINKE sensor portfolio is a selection of sensors from the Smart Citizen project , and aims to create a boilerplate for individuals and communities with different sensing expertise levels in a modular, expandable and intuitive way . We have made a selection of sensors to get started with the most common use cases. How to get them? If you are interested, and have an use case or project that needs of some sensors, support or maybe some enclosures, this is for you! We will be creating a series of open calls .","title":"Sensors"},{"location":"Sensors/#sensor-packs","text":"Citizen Kit : for those cases where a low cost sensor is needed for basic monitoring of climate metrics, or some basic air pollution setups Citizen Water Kit : a combination of water and air sensors, to choose between pH and ORP for water sensors, water temperature, and adding an air temperature and humidity Citizen Water Station : a flexible solution for water monitoring. Includes metrics like pH, DO, Conductivity, ORP and submergible temperature, with optional GPS Kit Use Available units Metrics Power Battery only? Citizen Kit Air quality 60-90 T, H, P, PM, Noise, Light and VOCs USB or AC with Power supply Yes Basic Water Station Air/Water 40-50 Air T, H; Water pH, ORP or T USB or AC with Power supply Yes Advanced Water Station Water 16 Water pH, ORP, DO, COND, T and optional GPS USB or AC with Power supply No (yes with external battery pack) Looking for mobile measurements? We also include GPS readings in some of the sensors, to be able to measure dynamically like in the Pati Cientific","title":"Sensor packs"},{"location":"Sensors/#ids-for-platform-registration","text":"Kit Extras ID Metrics Citizen Kit None 26 (default) T, H, P, PM, Noise, Light and VOCs Citizen Kit with External T/H Probe T/H Probe 38 T, H, P, PM, Noise, Light and VOCs and external T/H probe Citizen Kit with GPS GPS 38 T, H, P, PM, Noise, Light and VOCs and GPS Metrics Basic Water Kit Reduced Water sensors 31 One of pH, ORP, Temp Advanced Water Station Water sensors and GPS (optional) 31 Some or all of pH, ORP, DO, COND, T and optional GPS","title":"IDs for platform registration"},{"location":"Sensors/Citizen%20Kit/","text":"Smart Citizen Kit \u00b6 A note about versions The SCK 2.0 was the development version for the now commercially available SCK 2.1 sponsored thanks to the iSCAPE project under European Community\u2019s H2020 Programme under Grant Agreement No. 689954 Quick links Buy: seeedstudio.com Installation: start.smartcitizen.me Platform: smartcitizen.me Discuss: forum.smartcitizen.me Support: support@smartcitizen.me Something big?: info@smartcitizen.me Platform status: uptimerobot.com What is it? \u00b6 The Smart Citizen Kit is the core of what we call the Smart Citizen System: a complete set of modular hardware components aiming to provide tools for environmental monitoring , ranging from citizen science and educational activities to more advanced scientific research . The system is designed in a extendable way, with a central data logger (the Data Board ) with network connectivity to which the different components are branched. The system is based on the principle of reproducibility, also integrating non-hardware components such as a dedicated Storage platform and a Sensor analysis framework . On top of that, the system is meant to serve as a base solution for more complex settings , not only related with air quality monitoring. For that purpose, in addition to the Urban Board , the system also provides off-the-shelf support for a wide variety of third party sensors, using the expansion bus as a common port. One example is what we call the Smart Citizen Station : a full solution for low cost air pollution monitoring. The sensors Have a look a the supported sensors in the Firmware ! Measurements \u00b6 All the Smart Citizen Kit new sensors generation measure at least air temperature, relative humidity, noise level, ambient light, barometric pressure and particulate matter (PM). SCK 2.1 \u00b6 Here is the table summarising the sensors: Measurement Units Sensors Air temperature \u00baC Sensirion SHT-31 Relative Humidity % REL Sensirion SHT-31 Noise level dBA Invensense ICS-434342 Ambient light Lux Rohm BH1721FVC Barometric pressure Pa NXP MPL3115A26 Equivalent Carbon Dioxide ppm AMS CCS811 Volatile Organic Compounds ppb AMS CCS811 Particulate Matter PM 1 / 2.5 / 10 \u00b5g/m3 Planttower PMS 5003 Sensor performance Make sure you visit the sensor performance page for further information about the sensors. Installation instructions \u00b6 The sensor comes mounted and almost ready to be used: The first step is to connect the battery. The kit will light in red (configuration mode) and we will be able to configure it by following the instructions at start.smartcitizen.me . Detailed guide Have a look at this guide for a step-by-step installation. After the configuration process, data will be available on the SmartCitizen platform. You can explore the data there or download it using the CSV Download option (you can check a more detailed guide here ) Power management \u00b6 Battery duration \u00b6 The SCK comes with a 2000mAh LiPo battery. The battery is meant to be a complete power option for short-term measurements and a backup solution when the kit it is used for long periods. For long exposures, we recommend to permanently connect the USB to kit. The battery duration is dependent on which sensors are enabled or disabled. You will note that the kit turns itself off while operating on battery. Actually, this is what we call sleep-mode , an operation mode implemented to reduce consumption while on battery operation. Check the operation modes section below. PM Sensor management If you want to save battery, the basic interval for the sensors shouldn't be below 30s. This is because the minimum stabilisation time the PM sensor requires to take stable readings is around 15-20s. For this reason, the minimum interval available without turning off the PM sensor between readings is 30s . If a lower interval is required, the PM sensor will be permanently ON and battery will drain faster. Battery calculator \u00b6 You can use the battery calculator to estimate how much your battery would last. SCK Battery Calculator WIP! What's the SCK's Shell? Learn how to use the powerful SCK Shell. Check the guide . fetch('https://api.github.com/repos/fablabbcn/smartcitizen-tools/contents/calculator.htm') .then(function(response) { return response.json(); }).then(function(data) { var iframe = document.getElementById('github-iframe'); iframe.src = 'data:text/html;base64,' + encodeURIComponent(data['content']); }); Battery charging \u00b6 The SCK has a micro USB port and can be charged like any smartphone or tablet using a dedicated adapter or a computer USB port. We recommend using an external USB power adaptor, instead of a computer USB port, for quicker charging. Autonomy can be extended by using a Power Bank, or a 5V PV Panel . Power Supply \u00b6 The SCK needs 5V input via the micro USB connector. A normal 5V power charger can be used, although for outdoor developments we recommend using a waterproof power supply. Find more info in the power supply section . User feedback \u00b6 The LED serves as an indication of the battery status. If the LED is flashing orange it indicates that the battery must be charged. The battery takes about 4 hours to fully charge. When the battery is fully charged, the LED will change from orange to green . Remember that in addition to these colors you will have the state color of the kit: configuration, network and sd. More details Find more details under the data board section User interfaces \u00b6 The data board features a set of user interfaces which provide feedback to the user, as well as two buttons with different functionalities. The main RGB LED provides general feedback of the data board status. Additionally, two buttons are provided for user action. A hardware reset button, which forces a power cut to the board, and a power button, used to change the device's mode, turn on and off the device, and to perform a factory reset. You can see both buttons below: The button \u00b6 The main button interaction is detailed below: Function Button action ON Push the button OFF Push the button for 5 seconds CHANGE MODE Push the button multiple times to choose: Setup Wi-Fi Pink FACTORY RESET Push the button 15 seconds for a full reset An example is shown below: Troubleshooting Have a look at the troubleshoothing section to check how you can use the buttons in case of problems with your SCK! Operation modes \u00b6 New WARNING feature After release 0.9.8 , a new warning feature was introduced. In an overall sense, this is the interpretation of each state: Normal : no problem! Slow fading in the LED. Warning : can take readings, but can't save them in the sdcard or can't send them to the platform (problem with network). Data is stored in the onboard Flash memory and will be saved after the problem is solved - either network comes back or the sdcard is OK. Partial blink in LED. Error : can't take readings. Either there is \"no time\", or there is a big problem that prevents data to be read. Full fast blink in LED. Remember, you can check your SCK firmware version quickly following this guide . Setup mode \u00b6 In this mode, the Kit is ready to be configured in network mode or SD card in start.smartcitizen.me . LED color Kit status Ready to be setup Ready to be setup but battery is low, charge the Kit Ready to be setup, battery charging Ready to be setup, battery charged Wi-Fi mode \u00b6 This is the standard mode for a network that requires a Wi-Fi connection. In this way, the device will publish the data every minute on the smartcitizen.me platform. If there is an inserted micro SD card, the data will be stored in it as well. LED color Kit status Collecting data online Warning. Collecting data but not sending it online \u274c Error. Not collecting data Collecting data online but battery is low, charge the Kit Collecting data online, battery charging Collecting data online, battery charged Sleep-mode. Collecting data online and saving battery Warning The kit supports Wi-Fi WEP, WPA/WPA2 and open networks that are common networks in domestic environments and small businesses. But, it does not support WPA/WPA2 Enterprise networks such as EDUROAM or networks with captive portals such as those found in Airports and Hotels Error in network mode If you configure the SCK with a network that is not visible at the moment of configuring it, it will raise an error and it will not take data. Flash memory \u00b6 After firmware version 0.9.8 , a new flash memory feature was implemented. That changed completely the arrangement of sensor readings vs publication/storage, and how errors are handled. From there on, data is always stored in flash memory before stored in SD card or published over Wi-Fi . That means that data can be always recovered if there is a problem with the SD card or the connection to the Internet fails, i.e. if we lose connection, the SCK will still store data and publish it in batch once the network is back! Check and update your Kit software version Remember, you can check your SCK firmware version quickly following this guide . Later, learn here how to update it. Flash chip and sizes The flash chip S25FL064L that we use is an 8 MB SPI flash nonvolatile memory. The minimum erasable unit is a 4kb sector, the full memory contains 2,048 sectors with a total of 8,388,608 bytes or 8 MB. A normal reading group with the default urban board hardware installed is composed of 11 readings, hence we expect each reading to take 7 bytes: an average of 5 bytes for the reading itself plus 2 overhead bytes for SensorType and size. Each group should have a total of 77 bytes of readings, 2 bytes of size, 2 bytes of flags and 4 bytes of the time stamp. That means we can expect a normal group to be around 85 bytes. This means we can store almost 100,000 groups of readings, or around 70 days of readings with standard sensor hardware . This number can vary a little, though. About flash memory lifespan, rounding numbers we can say we have enough space to store 2 months (60 days) of readings, according to the Flash memory datasheet we have at least 100,000 erase cycles: 2 months per cycle means 200,000 months, so we can expect more than 16k years! . That can be very useful in many situations, for instance, where we cannot use permanent network connectivity, or we have intermittent electrical blackouts (standard battery required). Of course, everything has its limitations, and the flash memory follows a circular buffer , which means that when the flash memory is full, it will start overwriting data no matter if it was published or not. In a normal SCK, the flash memory will last for some weeks though, but it's better to always be on the safe side and not lose any data. When the SCK loses connection, after three attempts to connect , it will enter warning mode (see here ). After this, it will try again after 5 times the publication interval (by default 3'), which means, after the Internet connection is back the SCK will take a maximum of 15' to connect to it and start pushing data. The data publication is not immediate and will take some minutes. If you are in a hurry, click the user button twice (blue-red-blue mode) or reset the kit and data will start being posted right away. Be careful! Having a non-permanent WiFi connection means that we can also risk entering error mode if the SCK runs out of battery because it obtains the time from the internet (or from a phone during the SD card setup process). Losing the network connection and running out of battery means the device will lose the internal clock time, and the device will stop taking readings until it has power and can connect to the internet to sync, again. Debugging commands Check this guide for more debugging commands. SD card mode (offline) \u00b6 If we do not have an internet connection we can use the SD mode. In this case the device will record the data on the micro SD card. Later we can read the card using a card reader. The data can be visually spaced in a spreadsheet but also published on the smartcitizen.me platform using the UPLOAD CSV option. LED color Kit status Collecting data offline Warning. Collecting data but not storing it in sdcard \u274c Error. Not collecting data Collecting data offline but battery is low, charge the Kit Collecting data offline, battery charging Collecting data offline, battery charged Sleep-mode. Collecting data offline and saving battery Guide Check the guide on how to upload the sd card data here Weird files? The files in the sdcard have the following naming: YY-MM-DD.CSV, however, you will find in the some extra files (.01, .02...) These are data files that the sensor creates once there is a reset and, to avoid corruption, it creates a new file in the sd-card, by changing the file-extension. A reset takes place every night at 3-4am with the purpose to avoid data loss because a problem. The SCK then stores the data in a file with a sequential name, and does so by changing the filename to YY-MM-DD.01, .02\u2026 etc depending on the amount of resets it sees during that day. You can see the data and work with it by changing the name from YY-MM-DD.01 to YY-MM-DD_01.CSV. Check the guide on how to organise your data to automatise this. Especial status \u00b6 You will see these colors in special moments, mostly when the kit is booting or being updated. LED color Kit status Busy, please wait! Software update going on! Shell mode more info here Software Updates \u00b6 Sofware updates are release frequently in the Firmware repository . These updates will need to be applied periodically to the two main components of the SCK: the SAMD21 (main processor) and the ESP8266 (Wi-Fi module). Check the instructions under the Update the Firmware section for more information. Test plan You can find the Test plan, in case you are producing the SCK here .","title":"Citizen Kit"},{"location":"Sensors/Citizen%20Kit/#smart-citizen-kit","text":"A note about versions The SCK 2.0 was the development version for the now commercially available SCK 2.1 sponsored thanks to the iSCAPE project under European Community\u2019s H2020 Programme under Grant Agreement No. 689954 Quick links Buy: seeedstudio.com Installation: start.smartcitizen.me Platform: smartcitizen.me Discuss: forum.smartcitizen.me Support: support@smartcitizen.me Something big?: info@smartcitizen.me Platform status: uptimerobot.com","title":"Smart Citizen Kit"},{"location":"Sensors/Citizen%20Kit/#what-is-it","text":"The Smart Citizen Kit is the core of what we call the Smart Citizen System: a complete set of modular hardware components aiming to provide tools for environmental monitoring , ranging from citizen science and educational activities to more advanced scientific research . The system is designed in a extendable way, with a central data logger (the Data Board ) with network connectivity to which the different components are branched. The system is based on the principle of reproducibility, also integrating non-hardware components such as a dedicated Storage platform and a Sensor analysis framework . On top of that, the system is meant to serve as a base solution for more complex settings , not only related with air quality monitoring. For that purpose, in addition to the Urban Board , the system also provides off-the-shelf support for a wide variety of third party sensors, using the expansion bus as a common port. One example is what we call the Smart Citizen Station : a full solution for low cost air pollution monitoring. The sensors Have a look a the supported sensors in the Firmware !","title":"What is it?"},{"location":"Sensors/Citizen%20Kit/#measurements","text":"All the Smart Citizen Kit new sensors generation measure at least air temperature, relative humidity, noise level, ambient light, barometric pressure and particulate matter (PM).","title":"Measurements"},{"location":"Sensors/Citizen%20Kit/#sck-21","text":"Here is the table summarising the sensors: Measurement Units Sensors Air temperature \u00baC Sensirion SHT-31 Relative Humidity % REL Sensirion SHT-31 Noise level dBA Invensense ICS-434342 Ambient light Lux Rohm BH1721FVC Barometric pressure Pa NXP MPL3115A26 Equivalent Carbon Dioxide ppm AMS CCS811 Volatile Organic Compounds ppb AMS CCS811 Particulate Matter PM 1 / 2.5 / 10 \u00b5g/m3 Planttower PMS 5003 Sensor performance Make sure you visit the sensor performance page for further information about the sensors.","title":"SCK 2.1"},{"location":"Sensors/Citizen%20Kit/#installation-instructions","text":"The sensor comes mounted and almost ready to be used: The first step is to connect the battery. The kit will light in red (configuration mode) and we will be able to configure it by following the instructions at start.smartcitizen.me . Detailed guide Have a look at this guide for a step-by-step installation. After the configuration process, data will be available on the SmartCitizen platform. You can explore the data there or download it using the CSV Download option (you can check a more detailed guide here )","title":"Installation instructions"},{"location":"Sensors/Citizen%20Kit/#power-management","text":"","title":"Power management"},{"location":"Sensors/Citizen%20Kit/#battery-duration","text":"The SCK comes with a 2000mAh LiPo battery. The battery is meant to be a complete power option for short-term measurements and a backup solution when the kit it is used for long periods. For long exposures, we recommend to permanently connect the USB to kit. The battery duration is dependent on which sensors are enabled or disabled. You will note that the kit turns itself off while operating on battery. Actually, this is what we call sleep-mode , an operation mode implemented to reduce consumption while on battery operation. Check the operation modes section below. PM Sensor management If you want to save battery, the basic interval for the sensors shouldn't be below 30s. This is because the minimum stabilisation time the PM sensor requires to take stable readings is around 15-20s. For this reason, the minimum interval available without turning off the PM sensor between readings is 30s . If a lower interval is required, the PM sensor will be permanently ON and battery will drain faster.","title":"Battery duration"},{"location":"Sensors/Citizen%20Kit/#battery-calculator","text":"You can use the battery calculator to estimate how much your battery would last. SCK Battery Calculator WIP! What's the SCK's Shell? Learn how to use the powerful SCK Shell. Check the guide . fetch('https://api.github.com/repos/fablabbcn/smartcitizen-tools/contents/calculator.htm') .then(function(response) { return response.json(); }).then(function(data) { var iframe = document.getElementById('github-iframe'); iframe.src = 'data:text/html;base64,' + encodeURIComponent(data['content']); });","title":"Battery calculator"},{"location":"Sensors/Citizen%20Kit/#battery-charging","text":"The SCK has a micro USB port and can be charged like any smartphone or tablet using a dedicated adapter or a computer USB port. We recommend using an external USB power adaptor, instead of a computer USB port, for quicker charging. Autonomy can be extended by using a Power Bank, or a 5V PV Panel .","title":"Battery charging"},{"location":"Sensors/Citizen%20Kit/#power-supply","text":"The SCK needs 5V input via the micro USB connector. A normal 5V power charger can be used, although for outdoor developments we recommend using a waterproof power supply. Find more info in the power supply section .","title":"Power Supply"},{"location":"Sensors/Citizen%20Kit/#user-feedback","text":"The LED serves as an indication of the battery status. If the LED is flashing orange it indicates that the battery must be charged. The battery takes about 4 hours to fully charge. When the battery is fully charged, the LED will change from orange to green . Remember that in addition to these colors you will have the state color of the kit: configuration, network and sd. More details Find more details under the data board section","title":"User feedback"},{"location":"Sensors/Citizen%20Kit/#user-interfaces","text":"The data board features a set of user interfaces which provide feedback to the user, as well as two buttons with different functionalities. The main RGB LED provides general feedback of the data board status. Additionally, two buttons are provided for user action. A hardware reset button, which forces a power cut to the board, and a power button, used to change the device's mode, turn on and off the device, and to perform a factory reset. You can see both buttons below:","title":"User interfaces"},{"location":"Sensors/Citizen%20Kit/#the-button","text":"The main button interaction is detailed below: Function Button action ON Push the button OFF Push the button for 5 seconds CHANGE MODE Push the button multiple times to choose: Setup Wi-Fi Pink FACTORY RESET Push the button 15 seconds for a full reset An example is shown below: Troubleshooting Have a look at the troubleshoothing section to check how you can use the buttons in case of problems with your SCK!","title":"The button"},{"location":"Sensors/Citizen%20Kit/#operation-modes","text":"New WARNING feature After release 0.9.8 , a new warning feature was introduced. In an overall sense, this is the interpretation of each state: Normal : no problem! Slow fading in the LED. Warning : can take readings, but can't save them in the sdcard or can't send them to the platform (problem with network). Data is stored in the onboard Flash memory and will be saved after the problem is solved - either network comes back or the sdcard is OK. Partial blink in LED. Error : can't take readings. Either there is \"no time\", or there is a big problem that prevents data to be read. Full fast blink in LED. Remember, you can check your SCK firmware version quickly following this guide .","title":"Operation modes"},{"location":"Sensors/Citizen%20Kit/#setup-mode","text":"In this mode, the Kit is ready to be configured in network mode or SD card in start.smartcitizen.me . LED color Kit status Ready to be setup Ready to be setup but battery is low, charge the Kit Ready to be setup, battery charging Ready to be setup, battery charged","title":"  Setup mode"},{"location":"Sensors/Citizen%20Kit/#wi-fi-mode","text":"This is the standard mode for a network that requires a Wi-Fi connection. In this way, the device will publish the data every minute on the smartcitizen.me platform. If there is an inserted micro SD card, the data will be stored in it as well. LED color Kit status Collecting data online Warning. Collecting data but not sending it online \u274c Error. Not collecting data Collecting data online but battery is low, charge the Kit Collecting data online, battery charging Collecting data online, battery charged Sleep-mode. Collecting data online and saving battery Warning The kit supports Wi-Fi WEP, WPA/WPA2 and open networks that are common networks in domestic environments and small businesses. But, it does not support WPA/WPA2 Enterprise networks such as EDUROAM or networks with captive portals such as those found in Airports and Hotels Error in network mode If you configure the SCK with a network that is not visible at the moment of configuring it, it will raise an error and it will not take data.","title":"  Wi-Fi mode"},{"location":"Sensors/Citizen%20Kit/#flash-memory","text":"After firmware version 0.9.8 , a new flash memory feature was implemented. That changed completely the arrangement of sensor readings vs publication/storage, and how errors are handled. From there on, data is always stored in flash memory before stored in SD card or published over Wi-Fi . That means that data can be always recovered if there is a problem with the SD card or the connection to the Internet fails, i.e. if we lose connection, the SCK will still store data and publish it in batch once the network is back! Check and update your Kit software version Remember, you can check your SCK firmware version quickly following this guide . Later, learn here how to update it. Flash chip and sizes The flash chip S25FL064L that we use is an 8 MB SPI flash nonvolatile memory. The minimum erasable unit is a 4kb sector, the full memory contains 2,048 sectors with a total of 8,388,608 bytes or 8 MB. A normal reading group with the default urban board hardware installed is composed of 11 readings, hence we expect each reading to take 7 bytes: an average of 5 bytes for the reading itself plus 2 overhead bytes for SensorType and size. Each group should have a total of 77 bytes of readings, 2 bytes of size, 2 bytes of flags and 4 bytes of the time stamp. That means we can expect a normal group to be around 85 bytes. This means we can store almost 100,000 groups of readings, or around 70 days of readings with standard sensor hardware . This number can vary a little, though. About flash memory lifespan, rounding numbers we can say we have enough space to store 2 months (60 days) of readings, according to the Flash memory datasheet we have at least 100,000 erase cycles: 2 months per cycle means 200,000 months, so we can expect more than 16k years! . That can be very useful in many situations, for instance, where we cannot use permanent network connectivity, or we have intermittent electrical blackouts (standard battery required). Of course, everything has its limitations, and the flash memory follows a circular buffer , which means that when the flash memory is full, it will start overwriting data no matter if it was published or not. In a normal SCK, the flash memory will last for some weeks though, but it's better to always be on the safe side and not lose any data. When the SCK loses connection, after three attempts to connect , it will enter warning mode (see here ). After this, it will try again after 5 times the publication interval (by default 3'), which means, after the Internet connection is back the SCK will take a maximum of 15' to connect to it and start pushing data. The data publication is not immediate and will take some minutes. If you are in a hurry, click the user button twice (blue-red-blue mode) or reset the kit and data will start being posted right away. Be careful! Having a non-permanent WiFi connection means that we can also risk entering error mode if the SCK runs out of battery because it obtains the time from the internet (or from a phone during the SD card setup process). Losing the network connection and running out of battery means the device will lose the internal clock time, and the device will stop taking readings until it has power and can connect to the internet to sync, again. Debugging commands Check this guide for more debugging commands.","title":"Flash memory"},{"location":"Sensors/Citizen%20Kit/#sd-card-mode-offline","text":"If we do not have an internet connection we can use the SD mode. In this case the device will record the data on the micro SD card. Later we can read the card using a card reader. The data can be visually spaced in a spreadsheet but also published on the smartcitizen.me platform using the UPLOAD CSV option. LED color Kit status Collecting data offline Warning. Collecting data but not storing it in sdcard \u274c Error. Not collecting data Collecting data offline but battery is low, charge the Kit Collecting data offline, battery charging Collecting data offline, battery charged Sleep-mode. Collecting data offline and saving battery Guide Check the guide on how to upload the sd card data here Weird files? The files in the sdcard have the following naming: YY-MM-DD.CSV, however, you will find in the some extra files (.01, .02...) These are data files that the sensor creates once there is a reset and, to avoid corruption, it creates a new file in the sd-card, by changing the file-extension. A reset takes place every night at 3-4am with the purpose to avoid data loss because a problem. The SCK then stores the data in a file with a sequential name, and does so by changing the filename to YY-MM-DD.01, .02\u2026 etc depending on the amount of resets it sees during that day. You can see the data and work with it by changing the name from YY-MM-DD.01 to YY-MM-DD_01.CSV. Check the guide on how to organise your data to automatise this.","title":"  SD card mode (offline)"},{"location":"Sensors/Citizen%20Kit/#especial-status","text":"You will see these colors in special moments, mostly when the kit is booting or being updated. LED color Kit status Busy, please wait! Software update going on! Shell mode more info here","title":"Especial status"},{"location":"Sensors/Citizen%20Kit/#software-updates","text":"Sofware updates are release frequently in the Firmware repository . These updates will need to be applied periodically to the two main components of the SCK: the SAMD21 (main processor) and the ESP8266 (Wi-Fi module). Check the instructions under the Update the Firmware section for more information. Test plan You can find the Test plan, in case you are producing the SCK here .","title":"Software Updates"},{"location":"Sensors/Citizen%20Water%20Kit/","text":"Citizen Water Kit \u00b6 This is an experimental version that tries to combine air environmental metrics for air temperature and humidity with water metrics, optionally pH, ORP, temperature. WIP We will document this section as it evolves!","title":"Citizen Water Kit"},{"location":"Sensors/Citizen%20Water%20Kit/#citizen-water-kit","text":"This is an experimental version that tries to combine air environmental metrics for air temperature and humidity with water metrics, optionally pH, ORP, temperature. WIP We will document this section as it evolves!","title":"Citizen Water Kit"},{"location":"Sensors/Citizen%20Water%20Station/","text":"Macro Rendering Error \u00b6 FileNotFoundError : [Errno 2] No such file or directory: '/tmp/2e6944a0f71f4751919cdce00e0e3a4d/docs/Components/Soil and Water.md' Traceback (most recent call last): File \"/opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/site-packages/mkdocs_macros/plugin.py\", line 480, in render return md_template.render(**page_variables) File \"/opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/site-packages/jinja2/environment.py\", line 1291, in render self.environment.handle_exception() File \"/opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/site-packages/jinja2/environment.py\", line 925, in handle_exception raise rewrite_traceback_stack(source=source) File \"<template>\", line 1, in top-level template code File \"/home/runner/work/smartcitizen-minke-docs/smartcitizen-minke-docs/main.py\", line 159, in get_snippet_git with open(root + '/' + file_path, 'r') as myfile: FileNotFoundError: [Errno 2] No such file or directory: '/tmp/2e6944a0f71f4751919cdce00e0e3a4d/docs/Components/Soil and Water.md'","title":"Citizen Water Station"},{"location":"Sensors/Citizen%20Water%20Station/#macro-rendering-error","text":"FileNotFoundError : [Errno 2] No such file or directory: '/tmp/2e6944a0f71f4751919cdce00e0e3a4d/docs/Components/Soil and Water.md' Traceback (most recent call last): File \"/opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/site-packages/mkdocs_macros/plugin.py\", line 480, in render return md_template.render(**page_variables) File \"/opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/site-packages/jinja2/environment.py\", line 1291, in render self.environment.handle_exception() File \"/opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/site-packages/jinja2/environment.py\", line 925, in handle_exception raise rewrite_traceback_stack(source=source) File \"<template>\", line 1, in top-level template code File \"/home/runner/work/smartcitizen-minke-docs/smartcitizen-minke-docs/main.py\", line 159, in get_snippet_git with open(root + '/' + file_path, 'r') as myfile: FileNotFoundError: [Errno 2] No such file or directory: '/tmp/2e6944a0f71f4751919cdce00e0e3a4d/docs/Components/Soil and Water.md'","title":"Macro Rendering Error"}]}