{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the MINKE project sensor documentation! In MINKE we want to create more accessible sensors so that communities can better understand their environment. Learn how to access them in the about section , check out the sensors we offer or get started with our guides . Check the webinars! We conducted a series of online webinars as part of the MINKE project . Guides \u00b6 Check out our guides and step-by-step tutorials to help you get started with the sensors: Some example guides Onboarding new sensors Uploading SD Card Data Update the Firmware Open Source and Open Access \u00b6 We're against black boxes! The entire hardware and software project is released under open source licenses: Hardware components: CERN Open Hardware License v1.2 Core firmware: GNU GPL v3.0 Software platform: GNU AGPL v3.0 We want everyone to be able to have access to science . All the data we generate is open access and is available in our data platform . Learn more in the data section.","title":"Welcome!"},{"location":"#guides","text":"Check out our guides and step-by-step tutorials to help you get started with the sensors: Some example guides Onboarding new sensors Uploading SD Card Data Update the Firmware","title":"Guides"},{"location":"#open-source-and-open-access","text":"We're against black boxes! The entire hardware and software project is released under open source licenses: Hardware components: CERN Open Hardware License v1.2 Core firmware: GNU GPL v3.0 Software platform: GNU AGPL v3.0 We want everyone to be able to have access to science . All the data we generate is open access and is available in our data platform . Learn more in the data section.","title":"Open Source and Open Access"},{"location":"Troubleshooting/","text":"Troubleshooting \u00b6 First, reboot your kit \u00b6 The magical reset button Before trying anything else, the data board of your SCK comes with a very functional button that makes a hardware reset on the whole device. This is probably our best first try once the kit has any problem. SCK 2.3 SCK 2.1/SCK2.2 Some issues this might help solving: The kit hasn't been posting data for a while The kit doesn't respond to user interaction with the ON/OFF button The LED is fixed and does not react to anything ... Pressing the reset button will not delete any configuration, it will simply restart your device. The light will go off and on and the device will start again with a white LED. This button is also to be used when reflashing the firmware, by double clicking it. Have a look at the guide here . You can also perform a reboot by disconnecting the battery and the USB cable so that the kit is restarted. In this way we will not lose any data or configuration. However, if we are in SD card mode , the kit won't know what time it is and we will need to give to him. For doing so: Press the ON/OFF button once. The LED should be breathing RED. Connect to the network SmartCitizen[...] and set it up again to log in SD card mode . The network won't show up \u00b6 Before configuring the Kit, if the SmartCitizen[...] network doesn't show up, make sure the LED is red. If not, press the button until the LED turns red. Factory reset your kit \u00b6 You can fully reset the Kit to the default settings so you can register again your device. Press the main button for 15 seconds . After 5 seconds the light will go off and will go on again after 15 seconds. Then you can release the button and your device will be fully resetted as a brand new Kit. The LED does not turn on and the kit does not work \u00b6 First of all, push the kit button. Maybe it's simply off. If this does not work, most likely the kit has been left without battery. You will have to charge it using the USB charger. Any other mobile charger will also work. We will know that it is charging when the LED emits orange pulses and once the battery is charged it will emit green . If the kit does not respond at all, it is probably worth trying with another USB cable, in case that is the problem. If not, drop us an email at support@smartcitizen.me or post in the forum . The kit does not store the data on the SD card \u00b6 Some SD cards may have problems over time. We can try formatting it, but in case it does not work any micro SD card we buy at any mobile or computer store it will work. The size is not important and any micro SD or micro SDHC 512MB card up to 32GB will work. The kit does not boot with the PMS Sensor \u00b6 Make sure that you power the Smart Citizen Kit with a good enough USB cable and with an adaptor that can provide at least 1A. We have found some issues when powering the sensor with a thin cable, or from a weak power source, like a screen. List of known and fixed issues \u00b6 In this section, we will detail some problems you might have found in the early firmware versions of SCK 2.1. Light sensor reads 0 and temperature/humidity sensor does not work \u00b6 The issue is caused due to a firmware bug (light) and a problem with some SHT31 sensors (also fixed by firmware). A full explanation is detailed on the forum and the fix was released with V0.9.4 of the SAMD firmware. Noise readings don't go below 45dBA \u00b6 This issue is caused due to a firmware bug that initialized badly the I2S microphone in SCK2.0 and SCK2.1 sensors. A full explanation is detailed on the forum and and the fix was released with a pre-releasue V0.9.8 of the SAMD firmware. PM Sensor always reads 0 \u00b6 This issue has been detected after a batch from Plantower PMS5003 sensors during 2021 that yields 0ug/m3. A full explanation is detailed this AN and on the forum and the fix release is V0.9.9 . The sensor operation is correct, and there is no need for hardware replacement.","title":"Troubleshooting"},{"location":"Troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"Troubleshooting/#first-reboot-your-kit","text":"The magical reset button Before trying anything else, the data board of your SCK comes with a very functional button that makes a hardware reset on the whole device. This is probably our best first try once the kit has any problem. SCK 2.3 SCK 2.1/SCK2.2 Some issues this might help solving: The kit hasn't been posting data for a while The kit doesn't respond to user interaction with the ON/OFF button The LED is fixed and does not react to anything ... Pressing the reset button will not delete any configuration, it will simply restart your device. The light will go off and on and the device will start again with a white LED. This button is also to be used when reflashing the firmware, by double clicking it. Have a look at the guide here . You can also perform a reboot by disconnecting the battery and the USB cable so that the kit is restarted. In this way we will not lose any data or configuration. However, if we are in SD card mode , the kit won't know what time it is and we will need to give to him. For doing so: Press the ON/OFF button once. The LED should be breathing RED. Connect to the network SmartCitizen[...] and set it up again to log in SD card mode .","title":"First, reboot your kit"},{"location":"Troubleshooting/#the-network-wont-show-up","text":"Before configuring the Kit, if the SmartCitizen[...] network doesn't show up, make sure the LED is red. If not, press the button until the LED turns red.","title":"The network won't show up"},{"location":"Troubleshooting/#factory-reset-your-kit","text":"You can fully reset the Kit to the default settings so you can register again your device. Press the main button for 15 seconds . After 5 seconds the light will go off and will go on again after 15 seconds. Then you can release the button and your device will be fully resetted as a brand new Kit.","title":"Factory reset your kit"},{"location":"Troubleshooting/#the-led-does-not-turn-on-and-the-kit-does-not-work","text":"First of all, push the kit button. Maybe it's simply off. If this does not work, most likely the kit has been left without battery. You will have to charge it using the USB charger. Any other mobile charger will also work. We will know that it is charging when the LED emits orange pulses and once the battery is charged it will emit green . If the kit does not respond at all, it is probably worth trying with another USB cable, in case that is the problem. If not, drop us an email at support@smartcitizen.me or post in the forum .","title":"The LED does not turn on and the kit does not work"},{"location":"Troubleshooting/#the-kit-does-not-store-the-data-on-the-sd-card","text":"Some SD cards may have problems over time. We can try formatting it, but in case it does not work any micro SD card we buy at any mobile or computer store it will work. The size is not important and any micro SD or micro SDHC 512MB card up to 32GB will work.","title":"The kit does not store the data on the SD card"},{"location":"Troubleshooting/#the-kit-does-not-boot-with-the-pms-sensor","text":"Make sure that you power the Smart Citizen Kit with a good enough USB cable and with an adaptor that can provide at least 1A. We have found some issues when powering the sensor with a thin cable, or from a weak power source, like a screen.","title":"The kit does not boot with the PMS Sensor"},{"location":"Troubleshooting/#list-of-known-and-fixed-issues","text":"In this section, we will detail some problems you might have found in the early firmware versions of SCK 2.1.","title":"List of known and fixed issues"},{"location":"Troubleshooting/#light-sensor-reads-0-and-temperaturehumidity-sensor-does-not-work","text":"The issue is caused due to a firmware bug (light) and a problem with some SHT31 sensors (also fixed by firmware). A full explanation is detailed on the forum and the fix was released with V0.9.4 of the SAMD firmware.","title":"Light sensor reads 0 and temperature/humidity sensor does not work"},{"location":"Troubleshooting/#noise-readings-dont-go-below-45dba","text":"This issue is caused due to a firmware bug that initialized badly the I2S microphone in SCK2.0 and SCK2.1 sensors. A full explanation is detailed on the forum and and the fix was released with a pre-releasue V0.9.8 of the SAMD firmware.","title":"Noise readings don't go below 45dBA"},{"location":"Troubleshooting/#pm-sensor-always-reads-0","text":"This issue has been detected after a batch from Plantower PMS5003 sensors during 2021 that yields 0ug/m3. A full explanation is detailed this AN and on the forum and the fix release is V0.9.9 . The sensor operation is correct, and there is no need for hardware replacement.","title":"PM Sensor always reads 0"},{"location":"_FAQ/","text":"Frequently asked questions \u00b6 Can the sensors be placed outdoors? \u00b6 Yes. The sensor is designed for both indoors and outdoors use. But if you\u2019re planning to use it outdoors, you will have to consider purchasing or making a rainproof enclosure. Can I make my own rainproof enclosure? \u00b6 Of course! The manufacturing files for the 3D printed enclosure will be available to download in the Enclosures repository . Throughout the history of the Smart Citizen project, we\u2019ve seen many inventive solutions for placing the sensor outdoors. Can I charge the sensors with a solar panel? \u00b6 Sure! But note that the sensor requires a 5V solar panel to work properly. More information here . Can I add external sensors to the system? \u00b6 Yes. The sensor has an independently configurable auxiliary bus at 3.3V with a SEEED Grove connector. The Bus has native support for I2C, but it can also be setup on firmware as a GPIO or UART. It can supply power up to 750mA, and it can be enabled or disabled by software. More info here . What happens if there is a loss of network connectivity? \u00b6 If the sensor is working in network mode and at any time the network is not available, it will store the data on its internal memory and publish all the collected data as soon as the network is available again. Which external sensors can be added? \u00b6 Quite a few! Check here . Will I be able to access the collected data? \u00b6 Of course! The data collected by your sensor is available for anyone on the Smart Citizen Platform , and you can download it at any time as a CSV file. Besides, you can also use the API to built custom applications to interact with your device. If you are familiar with python, check also scdata How does the kit record the data? \u00b6 The sensor can work in network and SD card modes. In network mode, the sensor publish data to the SC platform over Wi-Fi (every minute by default, but configurable). In SD card mode, all the collected data is stored locally in CSV format, and it can be later uploaded manually to the platform using the \"Manual Data Upload\" option. What networks does it support? \u00b6 The SCK supports Wi-Fi WEP, WPA/WPA2 and open networks that are common networks in domestic environments and small businesses. However, like many other embedded devices such as Apple TV\u00ae or Chromecast\u00ae, it does not support networks with captive portals such as those found in Airports and Hotels. Currently, it also does not WPA/WPA2 Enterprise networks such as EDUROAM. However, the viability to support those in the future is under analysis. In addition, the WiFi antenna is based on the low-cost ESP8266 chip, which supports 802.11b/g/n networks. I have a firewall. What do I need to know? \u00b6 Here are the ports and protocols used by the Kit to communicate with the platform: Service Function Protocol Port Address MQTT Send Data TCP 1883 (80 legacy firmware) mqtt.smartcitizen.me NTP Sync Time UDP 80 ntp.smartcitizen.me Notice we use custom ports already to avoid some firewall restrictions Is there a mobile phone app that lets me view the data? \u00b6 Currently there is an android app available, but we are working to make the website fully mobile device friendly, so that no mobile phone app is required. We would rather focus the time of our small team on the kits themselves instead of maintaining apps. So our final aim is to be app free, but fully mobile friendly. How accurate are the measurements? \u00b6 Weather, noise, light and PM sensor measurements have been calibrated and validated against reference sensors through both in-house and external validations and they provide accurate data. Make sure you check the performance section for more information. Are there any notable case studies using similar sensors? \u00b6 Yes! Check all of them here . A particularly interesting case study is the Making Sense project at Plac\u0327a del Sol in Barcelona, where a group of 15 technology enthusiasts and environmentalists joined a community of neighbours from a middle-class district that has been suffering from noise issues due to the nightlife in the square. You can find more information about this case study at: www.making-sense.eu What happens if I want to move the device or give it to someone else? \u00b6 Just by pressing the button you can fully reset your sensor and configure it again using your account or a new one. All your previous data will remain available on the platform as it was before the reset. What about using other wireless technologies? \u00b6 We are working closely with Barcelona\u2019s The Things Network community to develop a TTN enabled sensor. A LoRA prototype has been tested, but we don\u2019t have dates for the final version yet. BLE, Zigbee, or others are not currently supported, and except for G5, we are not planning to implement them unless there is a custom hardware integration demand. Can I remove my data from the platform? \u00b6 Of course. You are the owner of the data that you collect, and you can download and/or delete all your sensor data at any time. How can I retrieve the MAC address from my device? \u00b6 You can retrieve the MAC address with two methods: either you can use your phone (see below), or follow this guide if you want to try out the console interface in the kit. Using your phone Set the SCK in setup mode (press the button once, the LED should turn red). With your phone, join the Wi-Fi network created by your Kit; it should be SmartCitizen[\u2026]. Once you are on your Kit configuration page, go to the Info section. You will see a page with all the information about your Kit. Your MAC address is listed as seen below: What batteries are shipped with the kits? \u00b6 The default SCK 2.1 Kits come with a 2000mAh LiPo battery model PL804050 (see datasheet and material safety data sheets ). For custom projects we also offer a bigger 6000mAh LiPo battery model DTP605068 (see datasheet and material safety data sheets ). The connector is JST-PHR-2 . When looking at the data board from the top (white side), the positive of the battery (red) should be on the left. We are working on a new dynamic battery calculator. Currently, you can find some approximate data here for the SCK 2.1. Are the electronics waterproof? \u00b6 No. They cannot be exposed to water, high humidity, corrosive environments, or moisture. Always use an enclosure when exposed outdoors. Highly humid environments can provoke corrosion in the sensors (symptom of this is blue powder near the sensors in the urban board). To help protect them, we recommend using transparent nail polish in these areas. Do not obscure the areas in red : If you are using any enclosure from the repository , we also recommend using a filtration foam (PPI-20/10) like this one . More info here . Can I send data to a different platform? \u00b6 Yes. There are various ways in which you can do this. You can either configure your SCK to send data directly to your own MQTT broker via the Shell . Follow this guide for more details on the payloads. Otherwise, you can forward incoming data via the Smart Citizen Platform. See details on data forwarding on the data platform page, or visit the developer documentation for more details on our API. How can I get a kit? \u00b6 This is an easy one! Kits are available for purchase at seeedstudio.com . If you are involved in a research project, an educational initiative, or developing a specialized monitoring system we can support and offer customized solutions. Contact us via info@smartcitizen.me to discuss your exact needs. Are there enclosures included? \u00b6 The Smart Citizen Kit doesn\u2019t come with an enclosure, but there are plenty of freely available designs on our enclosures repository !. We have a wide range of open source designs that you can 3D print and build yourself, saving some industrial plastic manufacturing in the process. If you don\u2019t have a 3D printer, you can always find a Fab Lab near you and once the enclosure\u2019s life is done, you can repurpose it to make more 3D printing filament! I want to contribute, what can I do? \u00b6 We would love you to contribute! Is modeling your thing? Take a look at our enclosure repository and try your hand at designing or tweaking an enclosure. Are you into tech specs? Help us add information to the documentation! Do you like coding? Take a look at our open source repositories and contribute to the source code of the firmware or the data platform ! If you are using any enclosure from the repository , we also recommend using a filtration foam (PPI-20/10) like this one . More info here What is reset cause ? \u00b6 The kit is able to store the last reason by which it restarted . This information can be very helpful to know in order to debug problems with a faulty kit. Code Explanation Comment POR Power On Reset This reset takes place when you connect the USB cable to the Kit. BOD12 and BOD33 Brown Out 12 and 33 Detector Reset This reset takes place when there is a low voltage on the supply (more in the SAMD21 docs ) EXT External Reset This reset takes place when you press the reset button WDT Watchdog Reset This reset takes place when the watchdog timer from the SAMD21 orders it . Currently not suported SYST System Reset Request This reset takes place when the Kit orders it (sanity reset), or when you type reset in the shell What can I do in unstable Wi-Fi environments? \u00b6 Unstable Wi-Fi environments are problematic if there are low RSSI values . Not only data can get to the platform in unconsistent frequency, but can cause the SCK to malfunction in some cases. Although we try to make the SCK as robust as possible, sometimes it helps to use some special configuration . This configuration will increase energy consumption , so it's not recommended for battery use. You can use the Shell and change the configuration with the commands below: config -pubint 60 power -sleep 0 offline -retryint 60 What are good RSSI values? \u00b6 Starting from firmware version 0.9.9 , the kit also keeps track of the Wi-Fi signal strength (RSSI in dBm - decibel miliWatts) to help you get a grasp of the signal strength seen by the kit (this relativeness is important, as many other devices will see a stronger signal potentially thanks to a better antenna). Based on this reference here you have some indicators of how good or bad the value you see is: -30 to -50dBm : Excellent single strength (Next to Router). -50 to -67dBm : At Good signal strength for Web browsing, voice/video calls. -67 to -70dBm : Best effort for Web browsing for reliable packet delivery. -70 to -80dBm : Experience bad connectivity, Packet delivery may be unreliable. -90 to 100dBm : Worst single strength. We recommend to stay between the -30 to -70dBm range if possible. Remeber that this value must be seen by the Kit!","title":"FAQ"},{"location":"_FAQ/#frequently-asked-questions","text":"","title":"Frequently asked questions"},{"location":"_FAQ/#can-the-sensors-be-placed-outdoors","text":"Yes. The sensor is designed for both indoors and outdoors use. But if you\u2019re planning to use it outdoors, you will have to consider purchasing or making a rainproof enclosure.","title":"Can the sensors be placed outdoors?"},{"location":"_FAQ/#can-i-make-my-own-rainproof-enclosure","text":"Of course! The manufacturing files for the 3D printed enclosure will be available to download in the Enclosures repository . Throughout the history of the Smart Citizen project, we\u2019ve seen many inventive solutions for placing the sensor outdoors.","title":"Can I make my own rainproof enclosure?"},{"location":"_FAQ/#can-i-charge-the-sensors-with-a-solar-panel","text":"Sure! But note that the sensor requires a 5V solar panel to work properly. More information here .","title":"Can I charge the sensors with a solar panel?"},{"location":"_FAQ/#can-i-add-external-sensors-to-the-system","text":"Yes. The sensor has an independently configurable auxiliary bus at 3.3V with a SEEED Grove connector. The Bus has native support for I2C, but it can also be setup on firmware as a GPIO or UART. It can supply power up to 750mA, and it can be enabled or disabled by software. More info here .","title":"Can I add external sensors to the system?"},{"location":"_FAQ/#what-happens-if-there-is-a-loss-of-network-connectivity","text":"If the sensor is working in network mode and at any time the network is not available, it will store the data on its internal memory and publish all the collected data as soon as the network is available again.","title":"What happens if there is a loss of network connectivity?"},{"location":"_FAQ/#which-external-sensors-can-be-added","text":"Quite a few! Check here .","title":"Which external sensors can be added?"},{"location":"_FAQ/#will-i-be-able-to-access-the-collected-data","text":"Of course! The data collected by your sensor is available for anyone on the Smart Citizen Platform , and you can download it at any time as a CSV file. Besides, you can also use the API to built custom applications to interact with your device. If you are familiar with python, check also scdata","title":"Will I be able to access the collected data?"},{"location":"_FAQ/#how-does-the-kit-record-the-data","text":"The sensor can work in network and SD card modes. In network mode, the sensor publish data to the SC platform over Wi-Fi (every minute by default, but configurable). In SD card mode, all the collected data is stored locally in CSV format, and it can be later uploaded manually to the platform using the \"Manual Data Upload\" option.","title":"How does the kit record the data?"},{"location":"_FAQ/#what-networks-does-it-support","text":"The SCK supports Wi-Fi WEP, WPA/WPA2 and open networks that are common networks in domestic environments and small businesses. However, like many other embedded devices such as Apple TV\u00ae or Chromecast\u00ae, it does not support networks with captive portals such as those found in Airports and Hotels. Currently, it also does not WPA/WPA2 Enterprise networks such as EDUROAM. However, the viability to support those in the future is under analysis. In addition, the WiFi antenna is based on the low-cost ESP8266 chip, which supports 802.11b/g/n networks.","title":"What networks does it support?"},{"location":"_FAQ/#i-have-a-firewall-what-do-i-need-to-know","text":"Here are the ports and protocols used by the Kit to communicate with the platform: Service Function Protocol Port Address MQTT Send Data TCP 1883 (80 legacy firmware) mqtt.smartcitizen.me NTP Sync Time UDP 80 ntp.smartcitizen.me Notice we use custom ports already to avoid some firewall restrictions","title":"I have a firewall. What do I need to know?"},{"location":"_FAQ/#is-there-a-mobile-phone-app-that-lets-me-view-the-data","text":"Currently there is an android app available, but we are working to make the website fully mobile device friendly, so that no mobile phone app is required. We would rather focus the time of our small team on the kits themselves instead of maintaining apps. So our final aim is to be app free, but fully mobile friendly.","title":"Is there a mobile phone app that lets me view the data?"},{"location":"_FAQ/#how-accurate-are-the-measurements","text":"Weather, noise, light and PM sensor measurements have been calibrated and validated against reference sensors through both in-house and external validations and they provide accurate data. Make sure you check the performance section for more information.","title":"How accurate are the measurements?"},{"location":"_FAQ/#are-there-any-notable-case-studies-using-similar-sensors","text":"Yes! Check all of them here . A particularly interesting case study is the Making Sense project at Plac\u0327a del Sol in Barcelona, where a group of 15 technology enthusiasts and environmentalists joined a community of neighbours from a middle-class district that has been suffering from noise issues due to the nightlife in the square. You can find more information about this case study at: www.making-sense.eu","title":"Are there any notable case studies using similar sensors?"},{"location":"_FAQ/#what-happens-if-i-want-to-move-the-device-or-give-it-to-someone-else","text":"Just by pressing the button you can fully reset your sensor and configure it again using your account or a new one. All your previous data will remain available on the platform as it was before the reset.","title":"What happens if I want to move the device or give it to someone else?"},{"location":"_FAQ/#what-about-using-other-wireless-technologies","text":"We are working closely with Barcelona\u2019s The Things Network community to develop a TTN enabled sensor. A LoRA prototype has been tested, but we don\u2019t have dates for the final version yet. BLE, Zigbee, or others are not currently supported, and except for G5, we are not planning to implement them unless there is a custom hardware integration demand.","title":"What about using other wireless technologies?"},{"location":"_FAQ/#can-i-remove-my-data-from-the-platform","text":"Of course. You are the owner of the data that you collect, and you can download and/or delete all your sensor data at any time.","title":"Can I remove my data from the platform?"},{"location":"_FAQ/#how-can-i-retrieve-the-mac-address-from-my-device","text":"You can retrieve the MAC address with two methods: either you can use your phone (see below), or follow this guide if you want to try out the console interface in the kit. Using your phone Set the SCK in setup mode (press the button once, the LED should turn red). With your phone, join the Wi-Fi network created by your Kit; it should be SmartCitizen[\u2026]. Once you are on your Kit configuration page, go to the Info section. You will see a page with all the information about your Kit. Your MAC address is listed as seen below:","title":"How can I retrieve the MAC address from my device?"},{"location":"_FAQ/#what-batteries-are-shipped-with-the-kits","text":"The default SCK 2.1 Kits come with a 2000mAh LiPo battery model PL804050 (see datasheet and material safety data sheets ). For custom projects we also offer a bigger 6000mAh LiPo battery model DTP605068 (see datasheet and material safety data sheets ). The connector is JST-PHR-2 . When looking at the data board from the top (white side), the positive of the battery (red) should be on the left. We are working on a new dynamic battery calculator. Currently, you can find some approximate data here for the SCK 2.1.","title":"What batteries are shipped with the kits?"},{"location":"_FAQ/#are-the-electronics-waterproof","text":"No. They cannot be exposed to water, high humidity, corrosive environments, or moisture. Always use an enclosure when exposed outdoors. Highly humid environments can provoke corrosion in the sensors (symptom of this is blue powder near the sensors in the urban board). To help protect them, we recommend using transparent nail polish in these areas. Do not obscure the areas in red : If you are using any enclosure from the repository , we also recommend using a filtration foam (PPI-20/10) like this one . More info here .","title":"Are the electronics waterproof?"},{"location":"_FAQ/#can-i-send-data-to-a-different-platform","text":"Yes. There are various ways in which you can do this. You can either configure your SCK to send data directly to your own MQTT broker via the Shell . Follow this guide for more details on the payloads. Otherwise, you can forward incoming data via the Smart Citizen Platform. See details on data forwarding on the data platform page, or visit the developer documentation for more details on our API.","title":"Can I send data to a different platform?"},{"location":"_FAQ/#how-can-i-get-a-kit","text":"This is an easy one! Kits are available for purchase at seeedstudio.com . If you are involved in a research project, an educational initiative, or developing a specialized monitoring system we can support and offer customized solutions. Contact us via info@smartcitizen.me to discuss your exact needs.","title":"How can I get a kit?"},{"location":"_FAQ/#are-there-enclosures-included","text":"The Smart Citizen Kit doesn\u2019t come with an enclosure, but there are plenty of freely available designs on our enclosures repository !. We have a wide range of open source designs that you can 3D print and build yourself, saving some industrial plastic manufacturing in the process. If you don\u2019t have a 3D printer, you can always find a Fab Lab near you and once the enclosure\u2019s life is done, you can repurpose it to make more 3D printing filament!","title":"Are there enclosures included?"},{"location":"_FAQ/#i-want-to-contribute-what-can-i-do","text":"We would love you to contribute! Is modeling your thing? Take a look at our enclosure repository and try your hand at designing or tweaking an enclosure. Are you into tech specs? Help us add information to the documentation! Do you like coding? Take a look at our open source repositories and contribute to the source code of the firmware or the data platform ! If you are using any enclosure from the repository , we also recommend using a filtration foam (PPI-20/10) like this one . More info here","title":"I want to contribute, what can I do?"},{"location":"_FAQ/#what-is-reset-cause","text":"The kit is able to store the last reason by which it restarted . This information can be very helpful to know in order to debug problems with a faulty kit. Code Explanation Comment POR Power On Reset This reset takes place when you connect the USB cable to the Kit. BOD12 and BOD33 Brown Out 12 and 33 Detector Reset This reset takes place when there is a low voltage on the supply (more in the SAMD21 docs ) EXT External Reset This reset takes place when you press the reset button WDT Watchdog Reset This reset takes place when the watchdog timer from the SAMD21 orders it . Currently not suported SYST System Reset Request This reset takes place when the Kit orders it (sanity reset), or when you type reset in the shell","title":"What is reset cause?"},{"location":"_FAQ/#what-can-i-do-in-unstable-wi-fi-environments","text":"Unstable Wi-Fi environments are problematic if there are low RSSI values . Not only data can get to the platform in unconsistent frequency, but can cause the SCK to malfunction in some cases. Although we try to make the SCK as robust as possible, sometimes it helps to use some special configuration . This configuration will increase energy consumption , so it's not recommended for battery use. You can use the Shell and change the configuration with the commands below: config -pubint 60 power -sleep 0 offline -retryint 60","title":"What can I do in unstable Wi-Fi environments?"},{"location":"_FAQ/#what-are-good-rssi-values","text":"Starting from firmware version 0.9.9 , the kit also keeps track of the Wi-Fi signal strength (RSSI in dBm - decibel miliWatts) to help you get a grasp of the signal strength seen by the kit (this relativeness is important, as many other devices will see a stronger signal potentially thanks to a better antenna). Based on this reference here you have some indicators of how good or bad the value you see is: -30 to -50dBm : Excellent single strength (Next to Router). -50 to -67dBm : At Good signal strength for Web browsing, voice/video calls. -67 to -70dBm : Best effort for Web browsing for reliable packet delivery. -70 to -80dBm : Experience bad connectivity, Packet delivery may be unreliable. -90 to 100dBm : Worst single strength. We recommend to stay between the -30 to -70dBm range if possible. Remeber that this value must be seen by the Kit!","title":"What are good RSSI values?"},{"location":"About/about/","text":"Smart Citizen is a project by Fab Lab Barcelona at the Institute For Advanced Architecture Of Catalonia . The Smart Citizen project has joined forces with several research institutions in Europe to create MINKE , a project that aims to create accessible research infrastructure in marine environments. More about funding MINKE project , and has received funding under European Community\u2019s H2020 Programme with Grant Agreement No. 101008724 . Smart Citizen, as part of MINKE , will make low cost sensors more accessible by offering them as part of an European public research infrastructure, which includes a wide range of high end metrological insfrastructures, which can be complemented by using low cost sensors to increase spatial and temporal resolution. This will help communities to better understand their environment, and scientific institutions to have more data. To achieve this, during the project we will be offering access to our sensors through a series of Open Calls , with the idea that, in a not-too-far-away future, these sensors will be part of an open infrastructure for anyone to apply to for environmental sensing. Interested? Drop us an email at info@smartcitizen.me to collaborate or learn more!","title":"About"},{"location":"Data/Data%20Analysis/","text":"Data Tools \u00b6 When dealing with sensor data, specially with low cost sensors, a great part of the effort needs to be dedicated to data analysis . After a careful data collection, this stage of our experiments is fundamental to extract meaningful conclusions. For this reason, this section is a compilation of tools for making sense of the data. Some of them are custom made, and others are general purpose tools that can be adapted for the Smart Citizen use case. Check them below, and head out to the guides for more step-by-step documentation on each! Pen and paper \u00b6 Probably the best way to get started in data analysis by using simple tools for comparing data and extracting insights. Time-series plots can be printed in large sheets of paper, and can then be compared with each other by drawing onto transparency paper. Basic, but insightful! This tool, even if seemingly very basic, allows you to work with data and share insights with others very quickly. For instance, while working with the Pla\u00e7a del Sol Community in Barcelona, we learnt that the noise patterns in social areas are, on average, not as loud as other traffic areas, but that the peaks of the noise are what cause the biggest concerns. From that we learnt that the regulation of noise in public spaces is not really representative for these areas, and that even if on average the readings are below the limits, sometimes the place is unlivable! How to make them? Soon you will be able to generate the files for printing from the web dashboard . In the meantime, you can check this tutorial in python Source files Paper charts on the Smart Citizen Toolkit: https://github.com/fablabbcn/smartcitizen-toolkit/tree/master/pen-and-paper Pen and Paper with python scripts: https://github.com/fablabbcn/smartcitizen-data/blob/master/examples/notebooks/13_pdf_largescale_plots.ipynb Web tools \u00b6 Web tools do not require any installation, and for that they are very easy to use (almost) everywhere. Normally data is directly requested via the API , but in some cases you can also load a CSV file. However, this ease of use comes at a cost: many of the tools are not very flexible, and different visualisations are not possible, or integrations with our API is not always complete. Nevertheless, they normally require zero setup, so you can get started in no time! Some examples you can check out: Smart Citizen Map : the classic map, with simple time-series plots and comparisons between metrics from one device Smart Citizen Dashboard : a basic dashboard, written in javascript, that can show all the devices, their status, and allows for filtering based on location and tags. It also features a basic time-series plot with customisable time-frame, websockets notifications, and data download in CSV, from any device! RawGraphs : an open source web based visualisation tool, based on D3 , that can interact with data from a CSV file (and maybe from our API sometime soon) Binder : a web based notebook tool for more advanced data analysis. See below in the advanced section More? More tools can be found in the toolkit repository . You can check some of them as well on the Creating interfaces Guide . Source files Smart Citizen API: https://api.smartcitizen.me Smart Citizen Web: https://github.com/fablabbcn/smartcitizen-web Smart Citizen Dashboard: https://github.com/fablabbcn/smartcitizen-dashboard-js Onboarding App: https://github.com/fablabbcn/smartcitizen-onboarding Live demos \u00b6 Live demos can help show how sensors work or how they react to different events: for instance, how PM data changes when you put a candle near the kit, even if you can't see the smoke, or how temperature rises when you touch the temperature sensor. For you to be able to do these experiments, you need high speed data (i.e. data that is updated way faster than once a minute on a web dashboard). To help with that, we have prepared a specific guide for Live Demos , so make sure to check it out! Source files Live demos: https://github.com/fablabbcn/smartcitizen-toolkit/ Creative coding \u00b6 Sometimes visualising data is more impactful when using creative visualisations that do not have numbers or graphs on them. seCreative coding refers to those tools that generate some short of data visualisation, but that is not done in the conventional way, but more on an artistic way. A good example to get started is processing or it's web version p5 . Both are simple to use if you want to learn how to code in a fun way, they are full of examples, and very well documented. Also, you can make music based on your kit's data with supercollider . Examples You can find some examples in the guides ! Visual programming \u00b6 Needing to get more advanced insights, but not wanting to program them? Visual programming tools can help you get started. They are midway between web tools (with no installation, but not very flexible) and more advanced tools (installation and flexibility is full on). Here you will need to install something, as they normally require libraries and other background processes to run in your computer. However, that initial process comes with loads of good things, for instance, the ability to use generic data analysis tools with our data. Some examples are below: Node-RED is an open-source visual tool that enables the connection between hardware devices, APIs and online services. The tool can be easily installed on any local computer or even an inexpensive Raspberry Pi single board computer. Orange - an open source tool for data analysis. As part of a collaboration with Cos4Cloud MECODA , you can also access Smart Citizen data from this great tool with a few clicks. Orange workflows If you want to use some existing workflows, you can visit the Orange Workflows Repository https://github.com/fablabbcn/smartcitizen-minke-docs/tree/master/docs/assets/ows Also, a lot of step-by-step tutorials will help you use it in any use case (also in educational contexts!) Advanced \u00b6 Here we go, this is the most advanced and flexible tool of them all: a data analysis package written specifically to interact with several APIs, including of course the Smart Citizen API, and to perform all the operations needed for doing advanced data analysis. Leveraging on the power of python and all it's associated tools, scdata is a package that can be easily installed on any computer with a simple pip install scdata . It is intended to provide an state-of-the art data analysis environment , adapted for the uses within the Smart Citizen Project, but that can be easily expanded for other use cases. The ultimate purpose of the framework is to allow for reproducible research by providing a set of tools that can be replicable, and expandable among researchers and users alike, contributing to FAIR data principles . Ultimately, it uses normal pandas dataframes that can be passed to any plotting, modelling or numerical analysis library in python. More familiar with R? R users won't be left stranded. RPY2 provides functionality to send data from python to R quite easily. Also, you can download this R library to access data from R! We care for open (science) Our concept of open science might differ from others in fundamental way. It does not go on the hype that many people advocate for to simply make business with it. We think that free and open source development practices are fundamentally applicable to any aspect of knowledge and research, and also to open science by default, at least the way we understand it. For us, this means that data that can be accessible through open apis without any restriction, reproducible by providing all the information and tools on how the data is processed from raw to final format, findable with unique, unmutable, identifiers in open dataset repositories such as zenodo . You will be wondering about interoperable: this last one probably will take more time, but hopefully we will get there one day if we all agree on what this all means. The framework integrates with the Smart Citizen API and helps with the analysis of large amounts of data in an efficient way . It also integrates functionality to generate reports in html or pdf format, and to publish datasets and documents to Zenodo . Raw and processed data All the raw sensor data from the devices is sent to the Platform and processed outside of the sensors. Raw data is never deleted , and the postprocessing of it can be traced back to it's origin by using the sensor blueprint information. This way, we guarantee openness and accesibility of the data for research purposes. Check this guide to learn more about how we postprocess the data of the sensors and how to make it your own way. This is the tool that probably has the largest amount of examples and use cases: Guides will help you to install the framework and start using it! Scripts and Notebook Examples is a compilation of examples ready to get hands on with the data Source files \u00b6 Smart Citizen Data (python): https://github.com/fablabbcn/smartcitizen-data Smart Citizen Data (R): https://github.com/fablabbcn/smartcitizen-data Smart Citizen Connector (python): https://github.com/fablabbcn/smartcitizen-connector Smart Citizen Flows: https://github.com/fablabbcn/smartcitizen-flows","title":"Data Analysis"},{"location":"Data/Data%20Analysis/#data-tools","text":"When dealing with sensor data, specially with low cost sensors, a great part of the effort needs to be dedicated to data analysis . After a careful data collection, this stage of our experiments is fundamental to extract meaningful conclusions. For this reason, this section is a compilation of tools for making sense of the data. Some of them are custom made, and others are general purpose tools that can be adapted for the Smart Citizen use case. Check them below, and head out to the guides for more step-by-step documentation on each!","title":"Data Tools"},{"location":"Data/Data%20Analysis/#pen-and-paper","text":"Probably the best way to get started in data analysis by using simple tools for comparing data and extracting insights. Time-series plots can be printed in large sheets of paper, and can then be compared with each other by drawing onto transparency paper. Basic, but insightful! This tool, even if seemingly very basic, allows you to work with data and share insights with others very quickly. For instance, while working with the Pla\u00e7a del Sol Community in Barcelona, we learnt that the noise patterns in social areas are, on average, not as loud as other traffic areas, but that the peaks of the noise are what cause the biggest concerns. From that we learnt that the regulation of noise in public spaces is not really representative for these areas, and that even if on average the readings are below the limits, sometimes the place is unlivable! How to make them? Soon you will be able to generate the files for printing from the web dashboard . In the meantime, you can check this tutorial in python Source files Paper charts on the Smart Citizen Toolkit: https://github.com/fablabbcn/smartcitizen-toolkit/tree/master/pen-and-paper Pen and Paper with python scripts: https://github.com/fablabbcn/smartcitizen-data/blob/master/examples/notebooks/13_pdf_largescale_plots.ipynb","title":"Pen and paper"},{"location":"Data/Data%20Analysis/#web-tools","text":"Web tools do not require any installation, and for that they are very easy to use (almost) everywhere. Normally data is directly requested via the API , but in some cases you can also load a CSV file. However, this ease of use comes at a cost: many of the tools are not very flexible, and different visualisations are not possible, or integrations with our API is not always complete. Nevertheless, they normally require zero setup, so you can get started in no time! Some examples you can check out: Smart Citizen Map : the classic map, with simple time-series plots and comparisons between metrics from one device Smart Citizen Dashboard : a basic dashboard, written in javascript, that can show all the devices, their status, and allows for filtering based on location and tags. It also features a basic time-series plot with customisable time-frame, websockets notifications, and data download in CSV, from any device! RawGraphs : an open source web based visualisation tool, based on D3 , that can interact with data from a CSV file (and maybe from our API sometime soon) Binder : a web based notebook tool for more advanced data analysis. See below in the advanced section More? More tools can be found in the toolkit repository . You can check some of them as well on the Creating interfaces Guide . Source files Smart Citizen API: https://api.smartcitizen.me Smart Citizen Web: https://github.com/fablabbcn/smartcitizen-web Smart Citizen Dashboard: https://github.com/fablabbcn/smartcitizen-dashboard-js Onboarding App: https://github.com/fablabbcn/smartcitizen-onboarding","title":"Web tools"},{"location":"Data/Data%20Analysis/#live-demos","text":"Live demos can help show how sensors work or how they react to different events: for instance, how PM data changes when you put a candle near the kit, even if you can't see the smoke, or how temperature rises when you touch the temperature sensor. For you to be able to do these experiments, you need high speed data (i.e. data that is updated way faster than once a minute on a web dashboard). To help with that, we have prepared a specific guide for Live Demos , so make sure to check it out! Source files Live demos: https://github.com/fablabbcn/smartcitizen-toolkit/","title":"Live demos"},{"location":"Data/Data%20Analysis/#creative-coding","text":"Sometimes visualising data is more impactful when using creative visualisations that do not have numbers or graphs on them. seCreative coding refers to those tools that generate some short of data visualisation, but that is not done in the conventional way, but more on an artistic way. A good example to get started is processing or it's web version p5 . Both are simple to use if you want to learn how to code in a fun way, they are full of examples, and very well documented. Also, you can make music based on your kit's data with supercollider . Examples You can find some examples in the guides !","title":"Creative coding"},{"location":"Data/Data%20Analysis/#visual-programming","text":"Needing to get more advanced insights, but not wanting to program them? Visual programming tools can help you get started. They are midway between web tools (with no installation, but not very flexible) and more advanced tools (installation and flexibility is full on). Here you will need to install something, as they normally require libraries and other background processes to run in your computer. However, that initial process comes with loads of good things, for instance, the ability to use generic data analysis tools with our data. Some examples are below: Node-RED is an open-source visual tool that enables the connection between hardware devices, APIs and online services. The tool can be easily installed on any local computer or even an inexpensive Raspberry Pi single board computer. Orange - an open source tool for data analysis. As part of a collaboration with Cos4Cloud MECODA , you can also access Smart Citizen data from this great tool with a few clicks. Orange workflows If you want to use some existing workflows, you can visit the Orange Workflows Repository https://github.com/fablabbcn/smartcitizen-minke-docs/tree/master/docs/assets/ows Also, a lot of step-by-step tutorials will help you use it in any use case (also in educational contexts!)","title":"Visual programming"},{"location":"Data/Data%20Analysis/#advanced","text":"Here we go, this is the most advanced and flexible tool of them all: a data analysis package written specifically to interact with several APIs, including of course the Smart Citizen API, and to perform all the operations needed for doing advanced data analysis. Leveraging on the power of python and all it's associated tools, scdata is a package that can be easily installed on any computer with a simple pip install scdata . It is intended to provide an state-of-the art data analysis environment , adapted for the uses within the Smart Citizen Project, but that can be easily expanded for other use cases. The ultimate purpose of the framework is to allow for reproducible research by providing a set of tools that can be replicable, and expandable among researchers and users alike, contributing to FAIR data principles . Ultimately, it uses normal pandas dataframes that can be passed to any plotting, modelling or numerical analysis library in python. More familiar with R? R users won't be left stranded. RPY2 provides functionality to send data from python to R quite easily. Also, you can download this R library to access data from R! We care for open (science) Our concept of open science might differ from others in fundamental way. It does not go on the hype that many people advocate for to simply make business with it. We think that free and open source development practices are fundamentally applicable to any aspect of knowledge and research, and also to open science by default, at least the way we understand it. For us, this means that data that can be accessible through open apis without any restriction, reproducible by providing all the information and tools on how the data is processed from raw to final format, findable with unique, unmutable, identifiers in open dataset repositories such as zenodo . You will be wondering about interoperable: this last one probably will take more time, but hopefully we will get there one day if we all agree on what this all means. The framework integrates with the Smart Citizen API and helps with the analysis of large amounts of data in an efficient way . It also integrates functionality to generate reports in html or pdf format, and to publish datasets and documents to Zenodo . Raw and processed data All the raw sensor data from the devices is sent to the Platform and processed outside of the sensors. Raw data is never deleted , and the postprocessing of it can be traced back to it's origin by using the sensor blueprint information. This way, we guarantee openness and accesibility of the data for research purposes. Check this guide to learn more about how we postprocess the data of the sensors and how to make it your own way. This is the tool that probably has the largest amount of examples and use cases: Guides will help you to install the framework and start using it! Scripts and Notebook Examples is a compilation of examples ready to get hands on with the data","title":"Advanced"},{"location":"Data/Data%20Analysis/#source-files","text":"Smart Citizen Data (python): https://github.com/fablabbcn/smartcitizen-data Smart Citizen Data (R): https://github.com/fablabbcn/smartcitizen-data Smart Citizen Connector (python): https://github.com/fablabbcn/smartcitizen-connector Smart Citizen Flows: https://github.com/fablabbcn/smartcitizen-flows","title":"Source files"},{"location":"Data/Sensor%20Platform/","text":"Data Platform \u00b6 The platform is a front and backend solution for ingesting, storing and interacting with data. The Data platform englobes services/tools with the following functionalities: API data ingestion and forwarding data storage data access front-end applications Have your own platform? Check the possibilities to send data to other platforms in this guide . Are all systems operational? Check the smartcitizen.me instance status in real time in the uptimerobot.com dashboard. API \u00b6 The Smart Citizen API exposes the Platform functionalities over a clear REST API. It allows applications to be developed on easily on top having access to all the features to create complex and rich tools. The main instance is available at api.smartcitizen.me . You can explore and contribute to the source . This is free software available under GNU (Affero) General Public License (AGPL). TL;DR Check the developers ready API Documentation . Data Ingestion \u00b6 The Platform can ingest data from multiple sensor types and even data coming from other platforms. Two protocols are supported for data to be sent to the platform: MQTT and HTTP. MQTT is the one used by devices such as the Smart Citizen Kit and the Stations. It allows the devices to post data to the platform with a secret token once the device is registered on the platform. Sensor data, and debugging information is sent over MQTT. HTTP is aimed at applications publishing data to the platform (i.e. uploading SD-card data, processing data asynchronously by external applications, or an external data platform that also wants to make all the data available on the Smart Citizen one). All of this can be done via the HTTP API. Over this API we are not just limited to publish data but to register new devices or even users. Both protocols support transport encryption with TLS to ensure secure communication between the client and the server over the Internet. Data forwarding \u00b6 For certain projects, data can also be forwarded to other platforms via MQTT. This is an opt-in experimental feature, and can be used to retrieve real-time data via MQTT, using th same JSON representation as the one in the API. This allows for connection to external platforms without needing to request via the API, since all the necessary information is available in the JSON representation. Existing integrations Currently, we are working together with other colleagues on integrating modules so that data can be directly ingested into a FIWARE platform, or into a OGC STAplus platform. This allows incredible interoperability, leveraging the scalability of MQTT. Check the developer documentation For more information and use cases, check the developer documentation. Authorisation and authentication \u00b6 Devices using the MQTT API use a unique device token generated once the device is registered on the platform. The token authenticates the devices against the platform, and it can be expired at any time to prevent a device to keep publishing. Instead, the HTTP API supports authentication using an OAuth2 or a private token. Both mechanisms work at a user level allowing a single process to manage all the devices created by a user. Data storage \u00b6 User and device metadata is stored on a SQL database (we use PostgresQL). Sensor readings (the timeseries) is stored in a database cluster performing asynchronous masterless replication to ensure data backup and availability. This is all available on the API repository Data access \u00b6 All stored historical data is available via the Smart Citizen API. All the front-end applications , such as the Smart Citizen Webpage, access the data from there. The API also exposes a method where data is processed to a CSV file and email to the user. That allows loading the data offline to any software capable of dealing with CSV files (i.e. Microsoft Excel, MATLAB, etc.). The CSV format is different from that of the SD-card. Developer ready Check the developer documentation to get more info on the API. Front-end applications \u00b6 There are various applications that use the API to access data, or manage devices/user settings. Smart Citizen Website : the website provides an easy to interface where devices data can be accessed in near real time to facilitate the exploration, alongside other contextual information (maps, keywords, etc). It also provides an interface to manage devices, user information, and custom settings, such as email notifications, data policy settings, among other. The main instance its available at smartcitizen.me/kits . You can explore and contribute to the source . This is free software available under GNU Affero General Public License (AGPL). Custom dashboards : these custom dashboards are used to visualise data in a simpler, but more advanced ways, for instance, to display them in large screens. More on the data tools page! Onboarding app : the onboarding app facilitates the process of device setup to ensure that users, irrespective of technical expertise, can install start collecting data. It guides the user through the process of the setup using simple language and a friendly graphic interface. It is built as a separate tool from the core Smart Citizen Webpage in order it can be customized for each deployment. It exchanges data with the core platform using the Smart Citizen API. The main instance its available at start.smartcitizen.me . There are also customized instances for specific projects such us onboarding.iscape.smartcitizen.me or start.decode.smartcitizen.me . You can explore and contribute to the source . This is free software available under a MIT License. Check the guides We prepared a series of guides to help you on the most common features you will use: Onboarding Sensors Uploading SD Card Data Downloading data Want to build your own? Check the developers ready API Documentation . Source files \u00b6 Check the source below: Smart Citizen API: https://github.com/fablabbcn/smartcitizen-api Smart Citizen Web: https://github.com/fablabbcn/smartcitizen-web Onboarding App: https://github.com/fablabbcn/smartcitizen-onboarding Smart Citizen Data (python): https://github.com/fablabbcn/smartcitizen-data Smart Citizen Data (R): https://github.com/fablabbcn/smartcitizen-R-data Smart Citizen Connector: https://github.com/fablabbcn/smartcitizen-connector Smart Citizen Flows: https://github.com/fablabbcn/smartcitizen-flows","title":"Sensor Platform"},{"location":"Data/Sensor%20Platform/#data-platform","text":"The platform is a front and backend solution for ingesting, storing and interacting with data. The Data platform englobes services/tools with the following functionalities: API data ingestion and forwarding data storage data access front-end applications Have your own platform? Check the possibilities to send data to other platforms in this guide . Are all systems operational? Check the smartcitizen.me instance status in real time in the uptimerobot.com dashboard.","title":"Data Platform"},{"location":"Data/Sensor%20Platform/#api","text":"The Smart Citizen API exposes the Platform functionalities over a clear REST API. It allows applications to be developed on easily on top having access to all the features to create complex and rich tools. The main instance is available at api.smartcitizen.me . You can explore and contribute to the source . This is free software available under GNU (Affero) General Public License (AGPL). TL;DR Check the developers ready API Documentation .","title":"API"},{"location":"Data/Sensor%20Platform/#data-ingestion","text":"The Platform can ingest data from multiple sensor types and even data coming from other platforms. Two protocols are supported for data to be sent to the platform: MQTT and HTTP. MQTT is the one used by devices such as the Smart Citizen Kit and the Stations. It allows the devices to post data to the platform with a secret token once the device is registered on the platform. Sensor data, and debugging information is sent over MQTT. HTTP is aimed at applications publishing data to the platform (i.e. uploading SD-card data, processing data asynchronously by external applications, or an external data platform that also wants to make all the data available on the Smart Citizen one). All of this can be done via the HTTP API. Over this API we are not just limited to publish data but to register new devices or even users. Both protocols support transport encryption with TLS to ensure secure communication between the client and the server over the Internet.","title":"Data Ingestion"},{"location":"Data/Sensor%20Platform/#data-forwarding","text":"For certain projects, data can also be forwarded to other platforms via MQTT. This is an opt-in experimental feature, and can be used to retrieve real-time data via MQTT, using th same JSON representation as the one in the API. This allows for connection to external platforms without needing to request via the API, since all the necessary information is available in the JSON representation. Existing integrations Currently, we are working together with other colleagues on integrating modules so that data can be directly ingested into a FIWARE platform, or into a OGC STAplus platform. This allows incredible interoperability, leveraging the scalability of MQTT. Check the developer documentation For more information and use cases, check the developer documentation.","title":"Data forwarding"},{"location":"Data/Sensor%20Platform/#authorisation-and-authentication","text":"Devices using the MQTT API use a unique device token generated once the device is registered on the platform. The token authenticates the devices against the platform, and it can be expired at any time to prevent a device to keep publishing. Instead, the HTTP API supports authentication using an OAuth2 or a private token. Both mechanisms work at a user level allowing a single process to manage all the devices created by a user.","title":"Authorisation and authentication"},{"location":"Data/Sensor%20Platform/#data-storage","text":"User and device metadata is stored on a SQL database (we use PostgresQL). Sensor readings (the timeseries) is stored in a database cluster performing asynchronous masterless replication to ensure data backup and availability. This is all available on the API repository","title":"Data storage"},{"location":"Data/Sensor%20Platform/#data-access","text":"All stored historical data is available via the Smart Citizen API. All the front-end applications , such as the Smart Citizen Webpage, access the data from there. The API also exposes a method where data is processed to a CSV file and email to the user. That allows loading the data offline to any software capable of dealing with CSV files (i.e. Microsoft Excel, MATLAB, etc.). The CSV format is different from that of the SD-card. Developer ready Check the developer documentation to get more info on the API.","title":"Data access"},{"location":"Data/Sensor%20Platform/#front-end-applications","text":"There are various applications that use the API to access data, or manage devices/user settings. Smart Citizen Website : the website provides an easy to interface where devices data can be accessed in near real time to facilitate the exploration, alongside other contextual information (maps, keywords, etc). It also provides an interface to manage devices, user information, and custom settings, such as email notifications, data policy settings, among other. The main instance its available at smartcitizen.me/kits . You can explore and contribute to the source . This is free software available under GNU Affero General Public License (AGPL). Custom dashboards : these custom dashboards are used to visualise data in a simpler, but more advanced ways, for instance, to display them in large screens. More on the data tools page! Onboarding app : the onboarding app facilitates the process of device setup to ensure that users, irrespective of technical expertise, can install start collecting data. It guides the user through the process of the setup using simple language and a friendly graphic interface. It is built as a separate tool from the core Smart Citizen Webpage in order it can be customized for each deployment. It exchanges data with the core platform using the Smart Citizen API. The main instance its available at start.smartcitizen.me . There are also customized instances for specific projects such us onboarding.iscape.smartcitizen.me or start.decode.smartcitizen.me . You can explore and contribute to the source . This is free software available under a MIT License. Check the guides We prepared a series of guides to help you on the most common features you will use: Onboarding Sensors Uploading SD Card Data Downloading data Want to build your own? Check the developers ready API Documentation .","title":"Front-end applications"},{"location":"Data/Sensor%20Platform/#source-files","text":"Check the source below: Smart Citizen API: https://github.com/fablabbcn/smartcitizen-api Smart Citizen Web: https://github.com/fablabbcn/smartcitizen-web Onboarding App: https://github.com/fablabbcn/smartcitizen-onboarding Smart Citizen Data (python): https://github.com/fablabbcn/smartcitizen-data Smart Citizen Data (R): https://github.com/fablabbcn/smartcitizen-R-data Smart Citizen Connector: https://github.com/fablabbcn/smartcitizen-connector Smart Citizen Flows: https://github.com/fablabbcn/smartcitizen-flows","title":"Source files"},{"location":"Guides/","text":"A modular tool for citizen action \u00b6 These guides will help you get started with your projects during MINKE . We will complete this section with tools and resources around the sensor. Find here guides that will help with making the best use of the sensors, from a step-by-step guide on how to set up your kit to more advanced features like data analysis or using the SCK's shell .","title":"Main"},{"location":"Guides/#a-modular-tool-for-citizen-action","text":"These guides will help you get started with your projects during MINKE . We will complete this section with tools and resources around the sensor. Find here guides that will help with making the best use of the sensors, from a step-by-step guide on how to set up your kit to more advanced features like data analysis or using the SCK's shell .","title":"A modular tool for citizen action"},{"location":"Guides/calibration/Water%20sensors/","text":"Atlas Scientific \u00b6 The Smart Citizen firmware has built-in support for the calibration of the Atlas Scientific sensors. In order to calibrate the sensors you will need to use the SCK Shell . The Smart Citizen firmware has built-in support for the calibration of some Atlas Scientific sensors. The supported sensors are: pH Electric Conductivity Dissolved Oxygen Oxidation reduction potential Temperature In order to calibrate the sensors you will need to use the SCK Shell . To enable the sensors you just need to plug you board to the Smart Citizen kit aux port and reboot the Smart Citizen Kit and the sensors will be handled by the board. Warning When calibrating don't use the normal read sensor command , this command applies temperature/salinity compensation, calibration should be done without any compensation. Instead you should use control sensorName com,r and that will return the raw metrics that sensor can provide. On the documentation of each sensor calibration procedure we describe the format of this metrics. Before we start Two important notes: 1. A lot of the materials from this guide are taken from Atlas Scientific datasheets. All credit to the well-designed images is theirs. We have integrated these probes in the Smart Citizen Kit because of their quality and good documentation. This page is not meant to be a replacement for Atlas Scientific documents and we do not have any affiliation to Atlas Scientific . 2. There is also additional webinars that can support this page in more detail. Here you can find the presentation and the link to the videos below: Smart Citizen Webinar - 3.1 Water sensors (Part 1) Smart Citizen Webinar - 3.2 Water sensors (Part 2) Smart Citizen Webinar - 3.3 Water sensors preparation Smart Citizen Webinar - 3.4 Water sensors calibration Smart Citizen Webinar - 3.5 Water sensors deployment Atlas PH \u00b6 You need to perform a 3-point calibration with the calibration solutions. The solutions vary their pH with temperature, so make sure to check the temperature prior. The pH value at current temperature can be found on the reference table on the calibration solution bottle - you can find it here . Datasheet Here you can find: The consumer grade pH probe datasheet The lab grade pH probe datasheet The pH driver datasheet : Calibration theory on page 11 Commands on page 52 Example commands control ph com,r control ph com,cal,[mid,low,high],value control ph com,cal,clear control ph com,cal,? 3-point calibration \u00b6 This is the order of the calibration: Mid point (7.00) Low point (4.00) High point (10.00) Warning Always calibrate the mid point first because it will erase all the previous calibrations you may have done. Danger Always clean the probe with distilled water between each calibration . Mid point calibration \u00b6 Put the sensor in the pH 7 calibration solution. Read the sensor multiple times until the reading is stable : control ph com,r 6.48 control ph com,r 6.45 ... Issue the mid point calibration command. Remember to input the pH value of the calibration solution at the current temperature control atlas ph com,cal,mid,[value of pH at current temperature] Example at 30\u00b0C SCK > control atlas ph com cal,mid,6.99 After this command, if you take a pH reading, the result should be 7.00 (or very close to it). You can now remove the probe from the calibration solution and clean it . Low Point Calibration \u00b6 Put the sensor in the pH 4.00 calibration solution (low point, the red one). The probe needs to be in the calibration solution until you issue the calibration command . Read the sensor multiple times until the reading is stable: control atlas ph com,cal,mid,6.99 After this command if you take a pH reading the result should be 7.00 (or very close to it) Low Point Calibration \u00b6 Repeat the procedure with the Low point 4.00 solution (the red one). First, read the sensor multiple times until the reading is stable: control ph com,r 3.98 control ph com,r 3.98 ... Issue the low point calibration command. Remember to input the pH value of the calibration solution at the current temperature control atlas ph com,cal,low,[value of pH at current temperature] Example at 30\u00b0C SCK > control atlas ph com cal,low,4.01 After this command, if you take a pH reading, the result should be 4.00 (or very close to it). You can now remove the probe from the calibration solution and clean it . High Point Calibration \u00b6 Put the sensor in the pH 10.00 calibration solution (high point, the blue one). The probe needs to be in the calibration solution until you issue the calibration command . Read the sensor multiple times until the reading is stable: control atlas ph com,cal,low,4.01 High Point Calibration \u00b6 The same step with High point 10.00 calibration solution (blue). First, read the sensor multiple times until the reading is stable: control ph com,r 9.84 control ph com,r 9.84 ... Issue the high point calibration command . Remember to input the pH value of the calibration solution at the current temperature control atlas ph com,cal,high,[value of pH at current temperature] Example at 30\u00b0C control atlas ph com,cal,high,9.96 Extra notes The command control com,cal,? can be used to check the calibration status as explained on datasheet page 52. The answers can be: ?CAL,0 \u2192 No calibration done ?CAL,1 \u2192 One point calibration done ?CAL,2 \u2192 Two point calibration done ?CAL,3 \u2192 Three point calibration done (not tested) If your calibration solutions are not 4, 7 and 10, you can still use them and replace [value of pH at current temperature] by your values. Electric conductivity \u00b6 The pH value of the calibration solutions is affected by temperature. Make sure you compensate according to the table below when you input the calibration value: Atlas Conductivity \u00b6 You need to perform a 3 step calibration process with a dry point (in air), followed by a 2-point calibration (with the calibration solutions). Datasheet Here you can find: The K0.1 conductivity probe datasheet The K1 conductivity probe datasheet The K10 conductivity probe datasheet The driver datasheet : Calibration info on page 12 Calibration commands on page 55 Example commands control conductivity com,r control conductivity com,K,[probeType] control conductivity com,K,? control conductivity com,cal,[dry,clear,84] control conductivity com,cal,low,1413 control conductivity com,cal,high,12,880 control conductivity com,cal,? 2-point calibration \u00b6 This is the order of the calibration: Set probe type. Dry point calibration (independent of the probe type). Low point calibration (calibration solution to use dependent on the probe type). High point calibration (calibration solution to use dependent on the probe type). Set probe type \u00b6 Depending on which probe you have (check drawing for reference) you should set the probe type to K 0.1, 1.0 or 10 (new drivers have K1.0 as default): To set the correct probe type: control conductivity com,K,1.0 control conductivity com,K,? SCK > control conductivity com K,? ?K,1.0 About the sensor The Electrical Conductivity sensor provides four different metrics: Electrical Conductivity \u2192 EC Total Dissolved Solids \u2192 TDS Salinity \u2192 S Specific Gravity \u2192 SG The data is presented in order and comma separated EC,TDS,S,SG , for instance 0.00,0,0.00,1.000 Readings are 0? It is normal that if the probe type has changed (for instance, if you are using a K10 probe), that the readings are 0 after setting the probe type. Dry calibration \u00b6 Follow the steps below with a dry sensor before introducing it to the calibration solutions. You need to do this step even if the readings in are 0 . Read the sensor multiple times until the reading is stable: control conductivity com,r 0.00,0,0.00,1.000 control conductivity com,r 0.00,0,0.00,1.000 ... Issue the dry calibration command: control conductivity com,cal,dry Low point calibration \u00b6 You can check the recommended calibration solutions for each probe on the Probetypes drawing (for instance, for the K1.0 probe, the 12,880uS and 80,000uS solutions are recomended) Put the probe in the low point calibration solution. Make sure there are no bubbles. The probe needs to be in the calibration solution until you issue the calibration command . Read the sensor multiple times until the reading is stable: control conductivity com,r 13470,7278,7.76,1.0 control conductivity com,r 13230,7144,7.61,1.0 ... Issue the low point calibration command. The value to input is the one of the calibration solution , for example 12880 : control conductivity com,cal,low,12880 After this command readings will not change . You can remove the probe from the calibration solution and rinse it now. Calibration solution can be reused. High point calibration \u00b6 Repeat the steps above with high point calibration solution. control conductivity com,cal,high,80000 After this steps the two point calibration is complete and the readings will change . Dissolved Oxygen \u00b6 You have two options for this calibration: Single point calibration (dry point) 2-point calibration (dry point and 0 mg/l point) - only if you need accurate readings below 1mg/l Make sure you have followed the probe reconditioning before proceeding with this calibration. Datasheets Here you can find: The datasheet of the lab grade probe The datasheet of the mini lab grade probe The datasheet of the driver : Calibration info on page 9 Calibration commands on page 52 Example commands (you can put control ox , control oxygen or control dissolved oxygen - however! do not put control dissolved as it will use TDS) control ox com,r control ox com,cal control ox com,cal,0 control ox com,cal,clear control ox com,cal,? Pressure compensation If the sensor is going to be used more than 10 meters deep into the water Pressure compensation should be set with: control ox com,P,kPaValue More information on datasheet , page 57 Single point calibration \u00b6 First calibrate, compensate later Temperature, salinity and pressure compensation values have no effect on calibration. Read the sensor multiple times until the reading is stable. control ox com,r 13.95,50% control ox com,r 13.76,49% ... Issue the calibration command, after this the readings will change. In this case, there is no need to add any value after cal . The sensor will take the current reading as the dry point . control ox com,cal Be careful If at any point of the calibration process you see akward readings (for instance, that using a 0mg/l solution for dissolved oxygen you see weirdly high values), it is better to start over. For this, proceed with: control ox com,cal,clear And start from the beginning. 2-point calibration \u00b6 Two point calibration is recommended if you require accurate readings below 1.0 mg/l. After completing the single point calibration procedure put the probe in the calibration solution. Put the probe in the 0mg/l point calibration solution. Make sure there are no bubbles. The probe needs to be in the calibration solution until you issue the calibration command . Be careful As you are calibrating the probe, oxygen is going into the solution. This calibration solution can't be reused if left open for long periods of time. Make sure you check the driver datasheet (page 6 and 7) for more info. Read the sensor multiple times until the reading is stable: control ox com,r 13.95,50% control ox com,r 13.76,49% ... Issue the calibration command. In this case, you have to input the value of the calibration solution too, for example 0 : control ox com,cal,0 Check the common pitfalls Atlas has some interesting videos about this probe common issues: Dissolved Oxygen | Common Mistakes | Air Bubble Dissolved Oxygen | Common Mistakes | Stagnant vs Moving Water Dissolved Oxygen | Common Mistakes | Damaged Membrane Oxidation-Reduction Potential \u00b6 You only need to perform a single point calibration . You can use any calibrated solution, as long as it's within your sensor range. Atlas Scientific uses a 225mV calibration solution. Datasheet Here you can find: The consumer grade ORP probe datasheet The lab grade ORP probe datasheet The driver datasheet : Calibration info on page 12 Calibration commands on page 49 Example commands control redox com,r control redox com,cal control redox com,cal,[value] control redox com,cal,clear control redox com,cal,? Single point calibration \u00b6 Read the sensor multiple times until the reading is stable. Make sure there are no bubbles. The probe needs to be in the calibration solution until you issue the calibration command . control redox com,r 225 control redox com,r 224 ... Issue calibration command: control redox com,cal,[value of ORP] Example at 25\u00b0C control redox com,cal,225 Temperature \u00b6 You only need to perform a single point calibration. This process is only necessary if you change the probe cable or the first time you use the sensor. Datasheet Here you can find: The PT-1000 probe datasheet The driver datasheet : Calibration info on page 12 Calibration commands on page 53 Example commands control atlas temp com,r control atlas temp com,cal control atlas temp com,cal,[value] control atlas temp com,cal,clear control atlas temp com,cal,? Warning This is needed because the temperature probe is a resistive sensor \u2013 more cable \u2192 more resistance! Reference You will need another temperature probe or something of known temperature (like boiling water, or the triple point of water...) for this. If you are using a reference sensor, make sure both are stable before issuing calibration commands! Single point calibration \u00b6 Read the reference probe multiple times until the reading is stable. Write down the value: control atlas temp com,r 22.5 control atlas temp com,r 22.4 ... Read the target probe multiple times until the reading is stable: control atlas temp com,r 29.5 control atlas temp com,r 29.4 ... Issue calibration command: control atlas temp com,cal,[value of temperature from reference probe or temperature] Factory reset procedure \u00b6 Why is this needed? You may need to do a factory reset for water sensors for different reasons. However, the most common case is a wrong calibration process and it's very much related to a wrongful automatic temperature compensation of the sensor while calibrating the sensor. To explain further: EC, DO and pH sensor readings are automatically compensated by temperature readings. If there is an existing temperature correction in the EZO driver, or there is a correction in the middle of the calibration process, the data available for the calibration process will be invalid. Follow the steps below to be make sure there is no correction while you calibrate the probes. Each EZO driver has it's independent calibration and status. This process needs to be done per driver (i.e. per EZO metric). To make a factory reset procedure for the EZO drivers follow the steps below: Make sure that the Smart Citizen Data board will not take any readings while you follow the calibration process. The best option is to reset the configuration to the defaults. Make sure you back-up your information before: The config command will output your current configuration. Copy it and keep it safe: config Then issue the default configuration: config -defaults The LED should be red now (the Data Board is in Setup mode ) Issue the factory reset command to the driver in question. For instance, for the conductivity one: control cond com factory 0 Now you can check what the status of the device is: control cond com cal,? ?CAL,0 Reset the kit Follow the calibration process as you would normally would. Remember that for conductivity you may need to re-issue the probe type Reconfigure the kit using the config command, by putting back the information you backed-up before: config -mode ... Ready to go? If you want to send the data to the platform, you will need to register the unit using the Advanced Kit Selection . At the moment the closest Kit Blueprint will be #22 BioPV Kit or #31 SCK 2.1 Sea Water in case you are using a SCK2.1 with GPS. You can request in the forum for a custom blueprint with the specific sensors you are using. Danger After finishing the calibration process restart your SCK to start from a clean state.","title":"Water sensors"},{"location":"Guides/calibration/Water%20sensors/#atlas-scientific","text":"The Smart Citizen firmware has built-in support for the calibration of the Atlas Scientific sensors. In order to calibrate the sensors you will need to use the SCK Shell . The Smart Citizen firmware has built-in support for the calibration of some Atlas Scientific sensors. The supported sensors are: pH Electric Conductivity Dissolved Oxygen Oxidation reduction potential Temperature In order to calibrate the sensors you will need to use the SCK Shell . To enable the sensors you just need to plug you board to the Smart Citizen kit aux port and reboot the Smart Citizen Kit and the sensors will be handled by the board. Warning When calibrating don't use the normal read sensor command , this command applies temperature/salinity compensation, calibration should be done without any compensation. Instead you should use control sensorName com,r and that will return the raw metrics that sensor can provide. On the documentation of each sensor calibration procedure we describe the format of this metrics. Before we start Two important notes: 1. A lot of the materials from this guide are taken from Atlas Scientific datasheets. All credit to the well-designed images is theirs. We have integrated these probes in the Smart Citizen Kit because of their quality and good documentation. This page is not meant to be a replacement for Atlas Scientific documents and we do not have any affiliation to Atlas Scientific . 2. There is also additional webinars that can support this page in more detail. Here you can find the presentation and the link to the videos below: Smart Citizen Webinar - 3.1 Water sensors (Part 1) Smart Citizen Webinar - 3.2 Water sensors (Part 2) Smart Citizen Webinar - 3.3 Water sensors preparation Smart Citizen Webinar - 3.4 Water sensors calibration Smart Citizen Webinar - 3.5 Water sensors deployment","title":"Atlas Scientific"},{"location":"Guides/calibration/Water%20sensors/#atlas-ph","text":"You need to perform a 3-point calibration with the calibration solutions. The solutions vary their pH with temperature, so make sure to check the temperature prior. The pH value at current temperature can be found on the reference table on the calibration solution bottle - you can find it here . Datasheet Here you can find: The consumer grade pH probe datasheet The lab grade pH probe datasheet The pH driver datasheet : Calibration theory on page 11 Commands on page 52 Example commands control ph com,r control ph com,cal,[mid,low,high],value control ph com,cal,clear control ph com,cal,?","title":"Atlas PH"},{"location":"Guides/calibration/Water%20sensors/#3-point-calibration","text":"This is the order of the calibration: Mid point (7.00) Low point (4.00) High point (10.00) Warning Always calibrate the mid point first because it will erase all the previous calibrations you may have done. Danger Always clean the probe with distilled water between each calibration .","title":"3-point calibration"},{"location":"Guides/calibration/Water%20sensors/#mid-point-calibration","text":"Put the sensor in the pH 7 calibration solution. Read the sensor multiple times until the reading is stable : control ph com,r 6.48 control ph com,r 6.45 ... Issue the mid point calibration command. Remember to input the pH value of the calibration solution at the current temperature control atlas ph com,cal,mid,[value of pH at current temperature] Example at 30\u00b0C SCK > control atlas ph com cal,mid,6.99 After this command, if you take a pH reading, the result should be 7.00 (or very close to it). You can now remove the probe from the calibration solution and clean it .","title":"Mid point calibration"},{"location":"Guides/calibration/Water%20sensors/#low-point-calibration","text":"Put the sensor in the pH 4.00 calibration solution (low point, the red one). The probe needs to be in the calibration solution until you issue the calibration command . Read the sensor multiple times until the reading is stable: control atlas ph com,cal,mid,6.99 After this command if you take a pH reading the result should be 7.00 (or very close to it)","title":"Low Point Calibration"},{"location":"Guides/calibration/Water%20sensors/#low-point-calibration_1","text":"Repeat the procedure with the Low point 4.00 solution (the red one). First, read the sensor multiple times until the reading is stable: control ph com,r 3.98 control ph com,r 3.98 ... Issue the low point calibration command. Remember to input the pH value of the calibration solution at the current temperature control atlas ph com,cal,low,[value of pH at current temperature] Example at 30\u00b0C SCK > control atlas ph com cal,low,4.01 After this command, if you take a pH reading, the result should be 4.00 (or very close to it). You can now remove the probe from the calibration solution and clean it .","title":"Low Point Calibration"},{"location":"Guides/calibration/Water%20sensors/#high-point-calibration","text":"Put the sensor in the pH 10.00 calibration solution (high point, the blue one). The probe needs to be in the calibration solution until you issue the calibration command . Read the sensor multiple times until the reading is stable: control atlas ph com,cal,low,4.01","title":"High Point Calibration"},{"location":"Guides/calibration/Water%20sensors/#high-point-calibration_1","text":"The same step with High point 10.00 calibration solution (blue). First, read the sensor multiple times until the reading is stable: control ph com,r 9.84 control ph com,r 9.84 ... Issue the high point calibration command . Remember to input the pH value of the calibration solution at the current temperature control atlas ph com,cal,high,[value of pH at current temperature] Example at 30\u00b0C control atlas ph com,cal,high,9.96 Extra notes The command control com,cal,? can be used to check the calibration status as explained on datasheet page 52. The answers can be: ?CAL,0 \u2192 No calibration done ?CAL,1 \u2192 One point calibration done ?CAL,2 \u2192 Two point calibration done ?CAL,3 \u2192 Three point calibration done (not tested) If your calibration solutions are not 4, 7 and 10, you can still use them and replace [value of pH at current temperature] by your values.","title":"High Point Calibration"},{"location":"Guides/calibration/Water%20sensors/#electric-conductivity","text":"The pH value of the calibration solutions is affected by temperature. Make sure you compensate according to the table below when you input the calibration value:","title":"Electric conductivity"},{"location":"Guides/calibration/Water%20sensors/#atlas-conductivity","text":"You need to perform a 3 step calibration process with a dry point (in air), followed by a 2-point calibration (with the calibration solutions). Datasheet Here you can find: The K0.1 conductivity probe datasheet The K1 conductivity probe datasheet The K10 conductivity probe datasheet The driver datasheet : Calibration info on page 12 Calibration commands on page 55 Example commands control conductivity com,r control conductivity com,K,[probeType] control conductivity com,K,? control conductivity com,cal,[dry,clear,84] control conductivity com,cal,low,1413 control conductivity com,cal,high,12,880 control conductivity com,cal,?","title":"Atlas Conductivity"},{"location":"Guides/calibration/Water%20sensors/#2-point-calibration","text":"This is the order of the calibration: Set probe type. Dry point calibration (independent of the probe type). Low point calibration (calibration solution to use dependent on the probe type). High point calibration (calibration solution to use dependent on the probe type).","title":"2-point calibration"},{"location":"Guides/calibration/Water%20sensors/#set-probe-type","text":"Depending on which probe you have (check drawing for reference) you should set the probe type to K 0.1, 1.0 or 10 (new drivers have K1.0 as default): To set the correct probe type: control conductivity com,K,1.0 control conductivity com,K,? SCK > control conductivity com K,? ?K,1.0 About the sensor The Electrical Conductivity sensor provides four different metrics: Electrical Conductivity \u2192 EC Total Dissolved Solids \u2192 TDS Salinity \u2192 S Specific Gravity \u2192 SG The data is presented in order and comma separated EC,TDS,S,SG , for instance 0.00,0,0.00,1.000 Readings are 0? It is normal that if the probe type has changed (for instance, if you are using a K10 probe), that the readings are 0 after setting the probe type.","title":"Set probe type"},{"location":"Guides/calibration/Water%20sensors/#dry-calibration","text":"Follow the steps below with a dry sensor before introducing it to the calibration solutions. You need to do this step even if the readings in are 0 . Read the sensor multiple times until the reading is stable: control conductivity com,r 0.00,0,0.00,1.000 control conductivity com,r 0.00,0,0.00,1.000 ... Issue the dry calibration command: control conductivity com,cal,dry","title":"Dry calibration"},{"location":"Guides/calibration/Water%20sensors/#low-point-calibration_2","text":"You can check the recommended calibration solutions for each probe on the Probetypes drawing (for instance, for the K1.0 probe, the 12,880uS and 80,000uS solutions are recomended) Put the probe in the low point calibration solution. Make sure there are no bubbles. The probe needs to be in the calibration solution until you issue the calibration command . Read the sensor multiple times until the reading is stable: control conductivity com,r 13470,7278,7.76,1.0 control conductivity com,r 13230,7144,7.61,1.0 ... Issue the low point calibration command. The value to input is the one of the calibration solution , for example 12880 : control conductivity com,cal,low,12880 After this command readings will not change . You can remove the probe from the calibration solution and rinse it now. Calibration solution can be reused.","title":"Low point calibration"},{"location":"Guides/calibration/Water%20sensors/#high-point-calibration_2","text":"Repeat the steps above with high point calibration solution. control conductivity com,cal,high,80000 After this steps the two point calibration is complete and the readings will change .","title":"High point calibration"},{"location":"Guides/calibration/Water%20sensors/#dissolved-oxygen","text":"You have two options for this calibration: Single point calibration (dry point) 2-point calibration (dry point and 0 mg/l point) - only if you need accurate readings below 1mg/l Make sure you have followed the probe reconditioning before proceeding with this calibration. Datasheets Here you can find: The datasheet of the lab grade probe The datasheet of the mini lab grade probe The datasheet of the driver : Calibration info on page 9 Calibration commands on page 52 Example commands (you can put control ox , control oxygen or control dissolved oxygen - however! do not put control dissolved as it will use TDS) control ox com,r control ox com,cal control ox com,cal,0 control ox com,cal,clear control ox com,cal,? Pressure compensation If the sensor is going to be used more than 10 meters deep into the water Pressure compensation should be set with: control ox com,P,kPaValue More information on datasheet , page 57","title":"Dissolved Oxygen"},{"location":"Guides/calibration/Water%20sensors/#single-point-calibration","text":"First calibrate, compensate later Temperature, salinity and pressure compensation values have no effect on calibration. Read the sensor multiple times until the reading is stable. control ox com,r 13.95,50% control ox com,r 13.76,49% ... Issue the calibration command, after this the readings will change. In this case, there is no need to add any value after cal . The sensor will take the current reading as the dry point . control ox com,cal Be careful If at any point of the calibration process you see akward readings (for instance, that using a 0mg/l solution for dissolved oxygen you see weirdly high values), it is better to start over. For this, proceed with: control ox com,cal,clear And start from the beginning.","title":"Single point calibration"},{"location":"Guides/calibration/Water%20sensors/#2-point-calibration_1","text":"Two point calibration is recommended if you require accurate readings below 1.0 mg/l. After completing the single point calibration procedure put the probe in the calibration solution. Put the probe in the 0mg/l point calibration solution. Make sure there are no bubbles. The probe needs to be in the calibration solution until you issue the calibration command . Be careful As you are calibrating the probe, oxygen is going into the solution. This calibration solution can't be reused if left open for long periods of time. Make sure you check the driver datasheet (page 6 and 7) for more info. Read the sensor multiple times until the reading is stable: control ox com,r 13.95,50% control ox com,r 13.76,49% ... Issue the calibration command. In this case, you have to input the value of the calibration solution too, for example 0 : control ox com,cal,0 Check the common pitfalls Atlas has some interesting videos about this probe common issues: Dissolved Oxygen | Common Mistakes | Air Bubble Dissolved Oxygen | Common Mistakes | Stagnant vs Moving Water Dissolved Oxygen | Common Mistakes | Damaged Membrane","title":"2-point calibration"},{"location":"Guides/calibration/Water%20sensors/#oxidation-reduction-potential","text":"You only need to perform a single point calibration . You can use any calibrated solution, as long as it's within your sensor range. Atlas Scientific uses a 225mV calibration solution. Datasheet Here you can find: The consumer grade ORP probe datasheet The lab grade ORP probe datasheet The driver datasheet : Calibration info on page 12 Calibration commands on page 49 Example commands control redox com,r control redox com,cal control redox com,cal,[value] control redox com,cal,clear control redox com,cal,?","title":"Oxidation-Reduction Potential"},{"location":"Guides/calibration/Water%20sensors/#single-point-calibration_1","text":"Read the sensor multiple times until the reading is stable. Make sure there are no bubbles. The probe needs to be in the calibration solution until you issue the calibration command . control redox com,r 225 control redox com,r 224 ... Issue calibration command: control redox com,cal,[value of ORP] Example at 25\u00b0C control redox com,cal,225","title":"Single point calibration"},{"location":"Guides/calibration/Water%20sensors/#temperature","text":"You only need to perform a single point calibration. This process is only necessary if you change the probe cable or the first time you use the sensor. Datasheet Here you can find: The PT-1000 probe datasheet The driver datasheet : Calibration info on page 12 Calibration commands on page 53 Example commands control atlas temp com,r control atlas temp com,cal control atlas temp com,cal,[value] control atlas temp com,cal,clear control atlas temp com,cal,? Warning This is needed because the temperature probe is a resistive sensor \u2013 more cable \u2192 more resistance! Reference You will need another temperature probe or something of known temperature (like boiling water, or the triple point of water...) for this. If you are using a reference sensor, make sure both are stable before issuing calibration commands!","title":"Temperature"},{"location":"Guides/calibration/Water%20sensors/#single-point-calibration_2","text":"Read the reference probe multiple times until the reading is stable. Write down the value: control atlas temp com,r 22.5 control atlas temp com,r 22.4 ... Read the target probe multiple times until the reading is stable: control atlas temp com,r 29.5 control atlas temp com,r 29.4 ... Issue calibration command: control atlas temp com,cal,[value of temperature from reference probe or temperature]","title":"Single point calibration"},{"location":"Guides/calibration/Water%20sensors/#factory-reset-procedure","text":"Why is this needed? You may need to do a factory reset for water sensors for different reasons. However, the most common case is a wrong calibration process and it's very much related to a wrongful automatic temperature compensation of the sensor while calibrating the sensor. To explain further: EC, DO and pH sensor readings are automatically compensated by temperature readings. If there is an existing temperature correction in the EZO driver, or there is a correction in the middle of the calibration process, the data available for the calibration process will be invalid. Follow the steps below to be make sure there is no correction while you calibrate the probes. Each EZO driver has it's independent calibration and status. This process needs to be done per driver (i.e. per EZO metric). To make a factory reset procedure for the EZO drivers follow the steps below: Make sure that the Smart Citizen Data board will not take any readings while you follow the calibration process. The best option is to reset the configuration to the defaults. Make sure you back-up your information before: The config command will output your current configuration. Copy it and keep it safe: config Then issue the default configuration: config -defaults The LED should be red now (the Data Board is in Setup mode ) Issue the factory reset command to the driver in question. For instance, for the conductivity one: control cond com factory 0 Now you can check what the status of the device is: control cond com cal,? ?CAL,0 Reset the kit Follow the calibration process as you would normally would. Remember that for conductivity you may need to re-issue the probe type Reconfigure the kit using the config command, by putting back the information you backed-up before: config -mode ... Ready to go? If you want to send the data to the platform, you will need to register the unit using the Advanced Kit Selection . At the moment the closest Kit Blueprint will be #22 BioPV Kit or #31 SCK 2.1 Sea Water in case you are using a SCK2.1 with GPS. You can request in the forum for a custom blueprint with the specific sensors you are using. Danger After finishing the calibration process restart your SCK to start from a clean state.","title":"Factory reset procedure"},{"location":"Guides/deployments/Citizen%20Kit/","text":"","title":"Citizen Kit"},{"location":"Guides/deployments/Citizen%20Water%20Station/","text":"","title":"Citizen Water Station"},{"location":"Guides/deployments/Using%20the%20power%20supply/","text":"Smart Citizen Power Supply \u00b6 The Smart Citizen Power Supply is a simple power supply to power the SCK and the Smart Citizen Station. It supports an input of 110-230 VAC, including a 1.6A input fuse protection and a 5VDC regulated output. The power supply can be one of two options: MeanWell-IRM-10-5 (datasheet in References folder and here ) TracoPower-TMPS-10105 (datasheet in References folder and here ) Check the datasheets for other available input convertions and limits. Enclosure \u00b6 The PCB has the footprint to fit inside a Bopla Ref. 38102200 IP65 Enclosure with two built-in cable glands. A Bopla Polymas PK 102-211 enclosure is used. The models can be found in the manufacturer's site in STP format. Check the source Handling \u00b6 The power supply is very simple to operate. If you have purchased one, normally, everything should be connected and ready to go. In some cases, the AC cable (left screw connector) is not connected, and it can be simply connected through the cable gland into the terminals. No ground is required. When connecting the plug to the wall socket, the red LED should turn on indicating 5V output. The input is protected with a 1A Fuse and the pack should be enclosed in a waterproof enclosure as detailed here . The indication LED shows the Power Supply is active. It is also a warning in case you have unplugged it but there is still some charge in it (it might take some seconds to fade out): More information regarding the power input is shown below and available in the datasheet : Input range: 100V-240VAC 50-60Hz, max 0.25A input, 1A Fused, or 277VAC 0.125A, also 50-60Hz Output range: 5V DC, max 2.0A","title":"Smart Citizen Power Supply"},{"location":"Guides/deployments/Using%20the%20power%20supply/#smart-citizen-power-supply","text":"The Smart Citizen Power Supply is a simple power supply to power the SCK and the Smart Citizen Station. It supports an input of 110-230 VAC, including a 1.6A input fuse protection and a 5VDC regulated output. The power supply can be one of two options: MeanWell-IRM-10-5 (datasheet in References folder and here ) TracoPower-TMPS-10105 (datasheet in References folder and here ) Check the datasheets for other available input convertions and limits.","title":"Smart Citizen Power Supply"},{"location":"Guides/deployments/Using%20the%20power%20supply/#enclosure","text":"The PCB has the footprint to fit inside a Bopla Ref. 38102200 IP65 Enclosure with two built-in cable glands. A Bopla Polymas PK 102-211 enclosure is used. The models can be found in the manufacturer's site in STP format. Check the source","title":"Enclosure"},{"location":"Guides/deployments/Using%20the%20power%20supply/#handling","text":"The power supply is very simple to operate. If you have purchased one, normally, everything should be connected and ready to go. In some cases, the AC cable (left screw connector) is not connected, and it can be simply connected through the cable gland into the terminals. No ground is required. When connecting the plug to the wall socket, the red LED should turn on indicating 5V output. The input is protected with a 1A Fuse and the pack should be enclosed in a waterproof enclosure as detailed here . The indication LED shows the Power Supply is active. It is also a warning in case you have unplugged it but there is still some charge in it (it might take some seconds to fade out): More information regarding the power input is shown below and available in the datasheet : Input range: 100V-240VAC 50-60Hz, max 0.25A input, 1A Fused, or 277VAC 0.125A, also 50-60Hz Output range: 5V DC, max 2.0A","title":"Handling"},{"location":"Guides/firmware/Edit%20the%20firmware/","text":"Edit the Firmware \u00b6 The data board of your Smart Citizen Kit is has two two microcontrollers : The main one is an Atmel SAMD21 , this chip is in charge of all the normal tasks like reading the sensors, saving data, interacting with the user, etc. For this chip we need two software components the bootloader and the main firmware. For communications the SCK has an ESP8266 microcontroler with Wifi capabilities , this chip receives instructions from the SAMD21 via serial port and takes care of publishing the collected data through the network and takes care of serving the web pages for the setup mode configuration server. Prerequisites \u00b6 Getting the firmware \u00b6 The Smart Citizen Kit Firmware is on our repository on github so you will need git software installed . Danger Do not install anything until reading completely this guide. Specially for Windows users, it can be particularly painful and we don't guarantee everything is going to work. Drop us an email at support@smartcitizen.me if you need help. Building the firmware \u00b6 To build the SmartCitizen Kit firmware you need a computer with platformio installed. You don't need the full IDE installation (Atom or VSCode). You can follow these instructions to install only the console version. See below if you don't have python yet (or you don't know it's ok). Advanced For bootloader upload you also need OpenOCD somewhere in your PATH (more advanced). Windows users If you have Windows, the CLI version is available via PowerShell . An environment variable (PATH) needs to be set to give access to pio.exe . It's given in the Platformio instructions . Installing Python \u00b6 Platformio is written in python , and this guide makes use of a lot of python scripts. You need to have at least python=3.6 installed. If not, follow this guide . This guide will asume you use either python , python3 for running scripts, or pip and pip3 for installing things, we will just detail instructions run by python and packages installed by pip , but you should know what it's installed on your computer. Windows users We recommend: Using PowerShell (with admin rights ). If you don't have it installed you can follow these instructions Installing Chocolatey and then proceeding with: choco install python Read very carefully the output of the installation . You can check if you have python installed: > which python /usr/bin/python Windows To do this in Windows , you can check the output of python --version Install pip if you don't have it (check pip before): > curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py > python get-pip.py Installing requirements \u00b6 You can use this requirements file to install everything you need to compile the firmware. Alternatively you can follow the steps below or if you want to control each version: Install pyserial : > pip install pyserial==3.5 Install requests : > pip install requests==2.26.0 Install platformio : > pip install platformio==5.1.1 Versions Versions for these packages are tested to work on OSX and Linux. If you can't find the same version for your platform, try to install something similar to the one provided in order to ensure everything works fine Once this is running, you can do either of the ones below. We will use the generic one throughout the guide: Windows/linux/macOS > cd smartcitizen-kit-21 > python make.py -h linux/macOS > cd smartcitizen-kit-21 > ./make.py -h Getting the firmware \u00b6 To get the firmware just run: > git clone --recursive https://github.com/fablabbcn/smartcitizen-kit-21 The bootloader and tools repositories are submodules of the main firmware so you must do a --recursive clone to get them. Info If you download the code manually (with the clone or download button on github) you will not get the bootloader and tools submodules code. To be able to compile the firmware you need to download the tools submodule and place it in the proper folder. Getting latest changes \u00b6 If you want to update firmware, you can do so since the repository is connected with our Github repository via git . You can do so by: cd smartcitizen-kit-21 git pull ... cd tools git pull origin master ... Or simply: cd smartcitizen-kit-21 git pull --recurse-submodules ... SAMD21 bootloader \u00b6 Make sure you need to do this This instructions only are needed if your kit doesn't have the bootloader already flashed. If you don't know what you are doing here, skip to the flashing section . If your kit doesn't have the bootloader already flashed (all the kits that we ship come with it) you will need an ATMEL-ICE programmer. This process can also be done with a Raspberry Pi computer and the proper connector and cables, in this guide you will find information on how to do this. Connect the Atmel-ICE programmer to the 10 pin SWD connector and to your computer. Power the SCK via USB, you can use any USB charger or even your computer. Open a terminal, go to the folder where you cloned the firmware repository and run: > cd smartcitizen-kit-21 > ./make.py boot You will see a lot of output when compiling, the led on the SCK should breath in green and you should see an output similar to this: You are ready for the next step, just remember to disconnect the Atmel-ICE programmer and connect the SCK to your computer with a USB cable. Bricked kit? Check this guide on how to identify and recover the bootloader. SAMD21 firmware \u00b6 The bootloader we just flashed allows a very simple way of uploading the SCK firmware based on the UF2 format, when you double-click the reset button of your kit it will expose a MSD interface to your computer and a new drive will popup where you can just drag the compiled firmware file (converted to UF2 format). Build script \u00b6 > python make.py You need to specify at least one action!!! USAGE: build.py [options] action[s] target[s] -p port -f options: -v: verbose -k: keep configuration actions: boot (only for sam), build, flash targets: sam, esp [-p port [-f]] -p port [-f]: specify a port instead of scanning -f: option ignores serial device description (must contain Smartcitizen otherwise) You can use the same script used to flash the bootloader ( make.py ) that will do everything for you: compile the firmware, convert the binary to UF2 format and upload it to the kit: > python make.py build flash sam -v You can make each action separate: Build SAMD21 > python make.py build sam -v Flash SAMD21 > python make.py flash sam -v Both > python make.py build flash sam -v SCK not found In some platforms, the SCK doesn't show up as \"Smartcitizen\" in the USB Device Description. This might make the script to fail and not detect it. This can be bypassed by specifying the port in which the SCK is connected. To find out which port it is, check here . Then, run the command below, where is to be replaced: > python make.py flash sam -p <PORT> -v If this is your first time building the software, platformio will take a while installing all the needed dependencies, be patient. If there are no errors you should see an output similar to this: > python make.py build flash sam [0] Smartcitizen Kit S/N: 6E9FE7335150364852202020FF180E30 Building SAM firmware... OK Flashing SAM firmware... OK A copy of the compiled software in UF2 format called SAM_firmware.uf2 will remain in the bin folder. You can use this file to reflash your kit without compiling it again. Info If you have any problem you can enable verbose output by calling build.py script with the -v flag. There is a known issue that causes first compilation to fail, if this happens please just try again. Manual process \u00b6 If you want to install the firmware manually (or you had some problem with the build script) just follow this steps: > cd sam > pio run After a lot of compilation messages you should see an output similar to this: Indexing .pio/build/sck2/libFrameworkArduino.a Linking .pio/build/sck2/firmware.elf Checking size .pio/build/sck2/firmware.elf Building .pio/build/sck2/firmware.bin Advanced Memory Usage is available via \"PlatformIO Home > Project Inspect\" RAM: [======= ] 73.3% (used 24004 bytes from 32768 bytes) Flash: [======== ] 80.7% (used 211548 bytes from 262144 bytes) ====================== [SUCCESS] Took 43.41 seconds ====================== then to convert the binary firmware to UF2 format do: > cd .. > ./tools/uf2conv.py -o SAM_firmware.uf2 sam/.pio/build/sck2/firmware.bin And you should see something like this: Converting to uf2, output size: 423424, start address: 0x2000 Wrote 423424 bytes to SAM_firmware.uf2. Now double-click the reset button of your kit open your favorite file browser and drag the file you just created to the SCK-2.0 drive. The kit will reset and run the new firmware. Info Keep in mind that if your computer is not configured to automount new drives you will need to mount your sck manually ( as any other USB drive ). ESP8266 firmware \u00b6 Just like the other parts of the process this is also covered by our make.py script. So you can just do: Build ESP > python make.py build esp -v Flash ESP > python make.py flash esp -v Both > python make.py build flash esp -v As before, if this is the first time you do it, it will take a while on downloading dependecies and building the firmware. In this case the upload process is different, since the ESP8266 chip is not connected to the USB interface the data must be uploadded through the SAMD21 chip. Our upload script takes care of searching for a SCK on the USB bus, sending a command to the kit so it put's himself in what we call bridge mode (white led) and uploading the firmware. This is the expected output: > python make.py build flash esp [0] Smartcitizen Kit S/N: 6E9FE7335150364852202020FF180E30 Building ESP firmware... OK Flashing ESP firmware... OK Warning Sometimes the ESP8266 and the uploader software don't get synced and the upload fails. Normally if you try again it will work. After first try you don't need to rebuild, you can just do python make.py flash esp . Manual update \u00b6 You can perform a manual update if you only want or can have a small python installation. Another option is possible if you have platformio and you want to use esptool binaries. Using esptool.py \u00b6 Preparation \u00b6 Get esptool.py : > wget https://raw.githubusercontent.com/fablabbcn/smartcitizen-tools/master/esptool.py Get the latest firmware from https://github.com/fablabbcn/smartcitizen-kit-21/releases or ask us at support@smartcitizen.me . Flashing \u00b6 Get your usb-port id (check here ): Put the SAM in bridge mode (replace <PORT> with the portname from above). > echo 'esp -flash 115200' > <PORT> echo not working? You can do the same in the Arduino IDE, using the Serial Monitor and writing esp -flash 115200 . Remember to close the Serial Monitor window after it. Now you should see the SCK's LED in WHITE. Flash the esp using esptool.py from before. Make sure the ESP_firmware.bin is also there (replace <PORT> ): > python esptool.py --port <PORT> --baud 115200 write_flash 0x000000 ESP_firmware.bin Using esptool binaries \u00b6 Locate esptool binaries: > cd smartcitizen-kit-21/sam > pio run -t envdump | grep PROJECT_PACKAGES_DIR ... Find PROJECT_PACKAGES_DIR in the output and navigate to (replace <PROJECT_PACKAGES_DIR> ): > cd <PROJECT_PACKAGES_DIR>/tool-esptool > ls ... There you should find a binary file for esptool . Now you should be able to run (replace <PROJECT_PACKAGES_DIR> and <PORT> ): > cd smartcitizen-kit-21 > echo 'esp -flash 115200' > <PORT> > <PROJECT_PACKAGES_DIR>/tool-esptool/esptool -cp <PORT> -cb 115200 -ca 0x000000 -cf bin/ESP_firmware.bin Remember you can put the SAMD21 in bridge mode (white LED) by using Arduino IDE, sending esp -flash 115200 using the Serial Monitor and then closing the Serial Monitor window. Finding the port \u00b6 For Windows, open the device manager and find the SCK in Ports (COM & LPT) . Use that port (normally COM... ). For macOS and linux, normally /dev/* : macOS > ls /dev/* | grep usb linux > ls /dev/* | grep tty","title":"Edit the Firmware"},{"location":"Guides/firmware/Edit%20the%20firmware/#edit-the-firmware","text":"The data board of your Smart Citizen Kit is has two two microcontrollers : The main one is an Atmel SAMD21 , this chip is in charge of all the normal tasks like reading the sensors, saving data, interacting with the user, etc. For this chip we need two software components the bootloader and the main firmware. For communications the SCK has an ESP8266 microcontroler with Wifi capabilities , this chip receives instructions from the SAMD21 via serial port and takes care of publishing the collected data through the network and takes care of serving the web pages for the setup mode configuration server.","title":"Edit the Firmware"},{"location":"Guides/firmware/Edit%20the%20firmware/#prerequisites","text":"","title":"Prerequisites"},{"location":"Guides/firmware/Edit%20the%20firmware/#getting-the-firmware","text":"The Smart Citizen Kit Firmware is on our repository on github so you will need git software installed . Danger Do not install anything until reading completely this guide. Specially for Windows users, it can be particularly painful and we don't guarantee everything is going to work. Drop us an email at support@smartcitizen.me if you need help.","title":"Getting the firmware"},{"location":"Guides/firmware/Edit%20the%20firmware/#building-the-firmware","text":"To build the SmartCitizen Kit firmware you need a computer with platformio installed. You don't need the full IDE installation (Atom or VSCode). You can follow these instructions to install only the console version. See below if you don't have python yet (or you don't know it's ok). Advanced For bootloader upload you also need OpenOCD somewhere in your PATH (more advanced). Windows users If you have Windows, the CLI version is available via PowerShell . An environment variable (PATH) needs to be set to give access to pio.exe . It's given in the Platformio instructions .","title":"Building the firmware"},{"location":"Guides/firmware/Edit%20the%20firmware/#installing-python","text":"Platformio is written in python , and this guide makes use of a lot of python scripts. You need to have at least python=3.6 installed. If not, follow this guide . This guide will asume you use either python , python3 for running scripts, or pip and pip3 for installing things, we will just detail instructions run by python and packages installed by pip , but you should know what it's installed on your computer. Windows users We recommend: Using PowerShell (with admin rights ). If you don't have it installed you can follow these instructions Installing Chocolatey and then proceeding with: choco install python Read very carefully the output of the installation . You can check if you have python installed: > which python /usr/bin/python Windows To do this in Windows , you can check the output of python --version Install pip if you don't have it (check pip before): > curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py > python get-pip.py","title":"Installing Python"},{"location":"Guides/firmware/Edit%20the%20firmware/#installing-requirements","text":"You can use this requirements file to install everything you need to compile the firmware. Alternatively you can follow the steps below or if you want to control each version: Install pyserial : > pip install pyserial==3.5 Install requests : > pip install requests==2.26.0 Install platformio : > pip install platformio==5.1.1 Versions Versions for these packages are tested to work on OSX and Linux. If you can't find the same version for your platform, try to install something similar to the one provided in order to ensure everything works fine Once this is running, you can do either of the ones below. We will use the generic one throughout the guide: Windows/linux/macOS > cd smartcitizen-kit-21 > python make.py -h linux/macOS > cd smartcitizen-kit-21 > ./make.py -h","title":"Installing requirements"},{"location":"Guides/firmware/Edit%20the%20firmware/#getting-the-firmware_1","text":"To get the firmware just run: > git clone --recursive https://github.com/fablabbcn/smartcitizen-kit-21 The bootloader and tools repositories are submodules of the main firmware so you must do a --recursive clone to get them. Info If you download the code manually (with the clone or download button on github) you will not get the bootloader and tools submodules code. To be able to compile the firmware you need to download the tools submodule and place it in the proper folder.","title":"Getting the firmware"},{"location":"Guides/firmware/Edit%20the%20firmware/#getting-latest-changes","text":"If you want to update firmware, you can do so since the repository is connected with our Github repository via git . You can do so by: cd smartcitizen-kit-21 git pull ... cd tools git pull origin master ... Or simply: cd smartcitizen-kit-21 git pull --recurse-submodules ...","title":"Getting latest changes"},{"location":"Guides/firmware/Edit%20the%20firmware/#samd21-bootloader","text":"Make sure you need to do this This instructions only are needed if your kit doesn't have the bootloader already flashed. If you don't know what you are doing here, skip to the flashing section . If your kit doesn't have the bootloader already flashed (all the kits that we ship come with it) you will need an ATMEL-ICE programmer. This process can also be done with a Raspberry Pi computer and the proper connector and cables, in this guide you will find information on how to do this. Connect the Atmel-ICE programmer to the 10 pin SWD connector and to your computer. Power the SCK via USB, you can use any USB charger or even your computer. Open a terminal, go to the folder where you cloned the firmware repository and run: > cd smartcitizen-kit-21 > ./make.py boot You will see a lot of output when compiling, the led on the SCK should breath in green and you should see an output similar to this: You are ready for the next step, just remember to disconnect the Atmel-ICE programmer and connect the SCK to your computer with a USB cable. Bricked kit? Check this guide on how to identify and recover the bootloader.","title":"SAMD21 bootloader"},{"location":"Guides/firmware/Edit%20the%20firmware/#samd21-firmware","text":"The bootloader we just flashed allows a very simple way of uploading the SCK firmware based on the UF2 format, when you double-click the reset button of your kit it will expose a MSD interface to your computer and a new drive will popup where you can just drag the compiled firmware file (converted to UF2 format).","title":"SAMD21 firmware"},{"location":"Guides/firmware/Edit%20the%20firmware/#build-script","text":"> python make.py You need to specify at least one action!!! USAGE: build.py [options] action[s] target[s] -p port -f options: -v: verbose -k: keep configuration actions: boot (only for sam), build, flash targets: sam, esp [-p port [-f]] -p port [-f]: specify a port instead of scanning -f: option ignores serial device description (must contain Smartcitizen otherwise) You can use the same script used to flash the bootloader ( make.py ) that will do everything for you: compile the firmware, convert the binary to UF2 format and upload it to the kit: > python make.py build flash sam -v You can make each action separate: Build SAMD21 > python make.py build sam -v Flash SAMD21 > python make.py flash sam -v Both > python make.py build flash sam -v SCK not found In some platforms, the SCK doesn't show up as \"Smartcitizen\" in the USB Device Description. This might make the script to fail and not detect it. This can be bypassed by specifying the port in which the SCK is connected. To find out which port it is, check here . Then, run the command below, where is to be replaced: > python make.py flash sam -p <PORT> -v If this is your first time building the software, platformio will take a while installing all the needed dependencies, be patient. If there are no errors you should see an output similar to this: > python make.py build flash sam [0] Smartcitizen Kit S/N: 6E9FE7335150364852202020FF180E30 Building SAM firmware... OK Flashing SAM firmware... OK A copy of the compiled software in UF2 format called SAM_firmware.uf2 will remain in the bin folder. You can use this file to reflash your kit without compiling it again. Info If you have any problem you can enable verbose output by calling build.py script with the -v flag. There is a known issue that causes first compilation to fail, if this happens please just try again.","title":"Build script"},{"location":"Guides/firmware/Edit%20the%20firmware/#manual-process","text":"If you want to install the firmware manually (or you had some problem with the build script) just follow this steps: > cd sam > pio run After a lot of compilation messages you should see an output similar to this: Indexing .pio/build/sck2/libFrameworkArduino.a Linking .pio/build/sck2/firmware.elf Checking size .pio/build/sck2/firmware.elf Building .pio/build/sck2/firmware.bin Advanced Memory Usage is available via \"PlatformIO Home > Project Inspect\" RAM: [======= ] 73.3% (used 24004 bytes from 32768 bytes) Flash: [======== ] 80.7% (used 211548 bytes from 262144 bytes) ====================== [SUCCESS] Took 43.41 seconds ====================== then to convert the binary firmware to UF2 format do: > cd .. > ./tools/uf2conv.py -o SAM_firmware.uf2 sam/.pio/build/sck2/firmware.bin And you should see something like this: Converting to uf2, output size: 423424, start address: 0x2000 Wrote 423424 bytes to SAM_firmware.uf2. Now double-click the reset button of your kit open your favorite file browser and drag the file you just created to the SCK-2.0 drive. The kit will reset and run the new firmware. Info Keep in mind that if your computer is not configured to automount new drives you will need to mount your sck manually ( as any other USB drive ).","title":"Manual process"},{"location":"Guides/firmware/Edit%20the%20firmware/#esp8266-firmware","text":"Just like the other parts of the process this is also covered by our make.py script. So you can just do: Build ESP > python make.py build esp -v Flash ESP > python make.py flash esp -v Both > python make.py build flash esp -v As before, if this is the first time you do it, it will take a while on downloading dependecies and building the firmware. In this case the upload process is different, since the ESP8266 chip is not connected to the USB interface the data must be uploadded through the SAMD21 chip. Our upload script takes care of searching for a SCK on the USB bus, sending a command to the kit so it put's himself in what we call bridge mode (white led) and uploading the firmware. This is the expected output: > python make.py build flash esp [0] Smartcitizen Kit S/N: 6E9FE7335150364852202020FF180E30 Building ESP firmware... OK Flashing ESP firmware... OK Warning Sometimes the ESP8266 and the uploader software don't get synced and the upload fails. Normally if you try again it will work. After first try you don't need to rebuild, you can just do python make.py flash esp .","title":"ESP8266 firmware"},{"location":"Guides/firmware/Edit%20the%20firmware/#manual-update","text":"You can perform a manual update if you only want or can have a small python installation. Another option is possible if you have platformio and you want to use esptool binaries.","title":"Manual update"},{"location":"Guides/firmware/Edit%20the%20firmware/#using-esptoolpy","text":"","title":"Using esptool.py"},{"location":"Guides/firmware/Edit%20the%20firmware/#preparation","text":"Get esptool.py : > wget https://raw.githubusercontent.com/fablabbcn/smartcitizen-tools/master/esptool.py Get the latest firmware from https://github.com/fablabbcn/smartcitizen-kit-21/releases or ask us at support@smartcitizen.me .","title":"Preparation"},{"location":"Guides/firmware/Edit%20the%20firmware/#flashing","text":"Get your usb-port id (check here ): Put the SAM in bridge mode (replace <PORT> with the portname from above). > echo 'esp -flash 115200' > <PORT> echo not working? You can do the same in the Arduino IDE, using the Serial Monitor and writing esp -flash 115200 . Remember to close the Serial Monitor window after it. Now you should see the SCK's LED in WHITE. Flash the esp using esptool.py from before. Make sure the ESP_firmware.bin is also there (replace <PORT> ): > python esptool.py --port <PORT> --baud 115200 write_flash 0x000000 ESP_firmware.bin","title":"Flashing"},{"location":"Guides/firmware/Edit%20the%20firmware/#using-esptool-binaries","text":"Locate esptool binaries: > cd smartcitizen-kit-21/sam > pio run -t envdump | grep PROJECT_PACKAGES_DIR ... Find PROJECT_PACKAGES_DIR in the output and navigate to (replace <PROJECT_PACKAGES_DIR> ): > cd <PROJECT_PACKAGES_DIR>/tool-esptool > ls ... There you should find a binary file for esptool . Now you should be able to run (replace <PROJECT_PACKAGES_DIR> and <PORT> ): > cd smartcitizen-kit-21 > echo 'esp -flash 115200' > <PORT> > <PROJECT_PACKAGES_DIR>/tool-esptool/esptool -cp <PORT> -cb 115200 -ca 0x000000 -cf bin/ESP_firmware.bin Remember you can put the SAMD21 in bridge mode (white LED) by using Arduino IDE, sending esp -flash 115200 using the Serial Monitor and then closing the Serial Monitor window.","title":"Using esptool binaries"},{"location":"Guides/firmware/Edit%20the%20firmware/#finding-the-port","text":"For Windows, open the device manager and find the SCK in Ports (COM & LPT) . Use that port (normally COM... ). For macOS and linux, normally /dev/* : macOS > ls /dev/* | grep usb linux > ls /dev/* | grep tty","title":"Finding the port"},{"location":"Guides/firmware/Update%20the%20firmware/","text":"Upgrade the firmware \u00b6 When new features are developed or bugs are fixed we will release new versions of the SCK firmware. Make a back-up of your info \u00b6 Info If you already configured your kit on the smartcitizen platform you will need the token that the platform gave you during the onboarding process , to recover it from your kit: Click your kit button until the kit is in setup mode , the led should be red. Connect to the kit with your mobile device as you did during the onboarding process. Write down the token of your kit. After updating the firmware follow this same steps to input the token and wifi credentials, after this your kit will be publishing on the same registered device than before. A note about versions The guide below applies to both, SCK 2.0 and SCK2.1. Updating the SAM firmware \u00b6 The SAMD21 (SAM for short) chip manages the main part of the firmware. This firmware is frequently updated with latest improvements in the official firmware repository . Check the releases pages for more info. Updating your kit is very simple Connect your kit with a micro USB cable to your computer Double click the reset button of your SCK, the SCK led should turn green and a new drive called SCK-20 should appear on your computer file browser Inside the SCK-20 drive you should see some files, double click the INDEX.HTM file and our github releases page will open in your browser Download the new firmware called SAM_firmware_XXX.uf2 and save it to your computer Tip You can backup your current firmware version just saving the file called CURRENT.UF2 . Simply drag the firmware file you downloaded over the SCK-20 drive , your kit led will blink in green and after some seconds it will reset and start with the new version. Updating the ESP firmware \u00b6 The ESP8266 (ESP for short) chip sometimes also needs upgrade to match the latest version of the SAM firmware. The ESP chip manages all the communications of the SCK with the outer world. The firmware can be found here . Example If your WiFi module needs a firmware update when you connect to your kit to setup the network you will see a screen that will ask for the new file. You can find it in our github releases page , look for the file called ESP_firmware_XXX.bin . If you don't see it, check in a previous release (some releases don't include Wi-Fi firmware) This file needs to be downloaded to the same device (phone or laptop) that is connecting to the SmartCitizen[...] network. If you are using your phone, you will need to download it there Once you have it, you can select the file in the screen below. If it doesn't appear, check the section to force ESP upload below After the update you just did, you can configure your kit as a new device following the onboarding process or use your previous token as explained before. Force ESP upload \u00b6 If you want to force the ESP to upload, please, follow the steps below. Force ESP upload If you already have the latest version but for some reason you still want to upload the firmware, you can force by clicking the info button (top right) on the setup screen that you find when conected to your kit in setup mode: And activate the Force allow firmware update : So you will be asked for the firmware file: Doesn't work? Sometimes in the phone the firmware selection screen will not pop up. You can always try to do the developer-way with check this guide here Using command-line tools \u00b6 The steps below are a summary of the steps you will need to update the firmware in case you are handling a lot of sensosr. The process builds on top the tools used in the edit the firmware , but simplified as we do not want to compile the firmware (since we are not changing it): Install python as per the instructions here Install python requirements Install git following these instructions . Check that you need to install it first by simply typing git in your terminal. If the output is not command not found , skip to step 4 In your terminal, navigate to a folder in which you want to download the firmware in. Then, get the firmware following the instructions here Navigate to the firmware folder, plug the sensor to your computer and run the command below. This will upload the SAM firmware: python make.py flash sam -v This will also upload the ESP firmware: python make.py flash esp -v You can upload both at the same time by: python make.py flash sam esp -v","title":"Upgrade the firmware"},{"location":"Guides/firmware/Update%20the%20firmware/#upgrade-the-firmware","text":"When new features are developed or bugs are fixed we will release new versions of the SCK firmware.","title":"Upgrade the firmware"},{"location":"Guides/firmware/Update%20the%20firmware/#make-a-back-up-of-your-info","text":"Info If you already configured your kit on the smartcitizen platform you will need the token that the platform gave you during the onboarding process , to recover it from your kit: Click your kit button until the kit is in setup mode , the led should be red. Connect to the kit with your mobile device as you did during the onboarding process. Write down the token of your kit. After updating the firmware follow this same steps to input the token and wifi credentials, after this your kit will be publishing on the same registered device than before. A note about versions The guide below applies to both, SCK 2.0 and SCK2.1.","title":"Make a back-up of your info"},{"location":"Guides/firmware/Update%20the%20firmware/#updating-the-sam-firmware","text":"The SAMD21 (SAM for short) chip manages the main part of the firmware. This firmware is frequently updated with latest improvements in the official firmware repository . Check the releases pages for more info. Updating your kit is very simple Connect your kit with a micro USB cable to your computer Double click the reset button of your SCK, the SCK led should turn green and a new drive called SCK-20 should appear on your computer file browser Inside the SCK-20 drive you should see some files, double click the INDEX.HTM file and our github releases page will open in your browser Download the new firmware called SAM_firmware_XXX.uf2 and save it to your computer Tip You can backup your current firmware version just saving the file called CURRENT.UF2 . Simply drag the firmware file you downloaded over the SCK-20 drive , your kit led will blink in green and after some seconds it will reset and start with the new version.","title":"Updating the SAM firmware"},{"location":"Guides/firmware/Update%20the%20firmware/#updating-the-esp-firmware","text":"The ESP8266 (ESP for short) chip sometimes also needs upgrade to match the latest version of the SAM firmware. The ESP chip manages all the communications of the SCK with the outer world. The firmware can be found here . Example If your WiFi module needs a firmware update when you connect to your kit to setup the network you will see a screen that will ask for the new file. You can find it in our github releases page , look for the file called ESP_firmware_XXX.bin . If you don't see it, check in a previous release (some releases don't include Wi-Fi firmware) This file needs to be downloaded to the same device (phone or laptop) that is connecting to the SmartCitizen[...] network. If you are using your phone, you will need to download it there Once you have it, you can select the file in the screen below. If it doesn't appear, check the section to force ESP upload below After the update you just did, you can configure your kit as a new device following the onboarding process or use your previous token as explained before.","title":"Updating the ESP firmware"},{"location":"Guides/firmware/Update%20the%20firmware/#force-esp-upload","text":"If you want to force the ESP to upload, please, follow the steps below. Force ESP upload If you already have the latest version but for some reason you still want to upload the firmware, you can force by clicking the info button (top right) on the setup screen that you find when conected to your kit in setup mode: And activate the Force allow firmware update : So you will be asked for the firmware file: Doesn't work? Sometimes in the phone the firmware selection screen will not pop up. You can always try to do the developer-way with check this guide here","title":"Force ESP upload"},{"location":"Guides/firmware/Update%20the%20firmware/#using-command-line-tools","text":"The steps below are a summary of the steps you will need to update the firmware in case you are handling a lot of sensosr. The process builds on top the tools used in the edit the firmware , but simplified as we do not want to compile the firmware (since we are not changing it): Install python as per the instructions here Install python requirements Install git following these instructions . Check that you need to install it first by simply typing git in your terminal. If the output is not command not found , skip to step 4 In your terminal, navigate to a folder in which you want to download the firmware in. Then, get the firmware following the instructions here Navigate to the firmware folder, plug the sensor to your computer and run the command below. This will upload the SAM firmware: python make.py flash sam -v This will also upload the ESP firmware: python make.py flash esp -v You can upload both at the same time by: python make.py flash sam esp -v","title":"Using command-line tools"},{"location":"Guides/getting%20started/Debugging%20your%20sensors/","text":"Debugging your kit \u00b6 This guide will try to summarize the basic steps to debug your kits whenever there's any problem. Let's be clear, there is no unique reason or point of failure for the kits to fail, and very likely, if you use them extensively, something will happen, either after 1 month, 1 year, or 5 years. It is key to know how to debug them: Reset the kit using the hardware reset button . This is either here: or here: or here (similar 3D printed versions will also have a small hole): or here: If this doesn't solve the problem, you might want to connect to the kits using the Shell . The next steps would depend on what the actual problem of your kits is. The most common problems are: Sensor or hardware issues Connectivity or configuration issues Basic steps Reset the kit Follow this guide Check the FAQs Check the forum Ask support with a nice explanation Sensors or hardware issues \u00b6 As said above, there is no single point of failure for the kits. If the LED is working normally, but there is one or more sensosr that are not responding, connect the Shell and type: version Note this for later. If it's an old version of the firmware, it might help to directly upgrade . sensor This should show if all the sensors are being recognised. If one of them is missing from the list, you can try to check the i2c bus (where most of the sensors are connected): i2c If one of the sensors is not shown, it means that there is probably a hardware issue with the sensor itself and that the microcontroller is not recognising it. Now, it would be useful to look for corrosion signs around the sensors and maybe reflash the firmware in case there is a better detection of the sensors in a firmware update. Otherwise, it is likely that the hardware is no longer functioning and it needs replacement. If the LED is static , very likely there is a problem with the detection or an electric problem with the sensors. For this, it is useful to start disconnecting each component to understand which component fails: Disconnect the power (USB and battery) and disconnect the PMS5003 sensor. Power on again and check Disconnect the power (USB and battery) and disconnect the Urban Board. Power on again and check If this doesn't help, try to upgrade the firmware , as there might be improvements. If it helps, also update and check if it improves. If the sensors heat up too much (it burns to touch), there might be an electric issue. Connectivity or configuration issues \u00b6 Normally, configuration or connectivity issues can be due to the following reasons: Typo during the setup process Old firmware If not using the Shell , make sure that the information provided for the network is correct by putting the SCK in SETUP mode (RED LED) and accessing the SmartCitizeXXXX network. If using the Shell , you can check the recording configuration by typing: config If you see a problem with the configuration, you can fix each item or the whole thing by typing: config -mode network -wifi \"SSID\" \"PASS\" -token token Beware of the quoutes Note that the token does not have quotes around it and that the SSID and PASS have straight quotes. If the issue is not solved, you can use the Shell and look for an ERROR message. You can write on the forum and we will support there! !!! info \"Not solved\"? In case there is no problem with the configuration, there problem might get solved by a firmware update.","title":"Debugging your sensors"},{"location":"Guides/getting%20started/Debugging%20your%20sensors/#debugging-your-kit","text":"This guide will try to summarize the basic steps to debug your kits whenever there's any problem. Let's be clear, there is no unique reason or point of failure for the kits to fail, and very likely, if you use them extensively, something will happen, either after 1 month, 1 year, or 5 years. It is key to know how to debug them: Reset the kit using the hardware reset button . This is either here: or here: or here (similar 3D printed versions will also have a small hole): or here: If this doesn't solve the problem, you might want to connect to the kits using the Shell . The next steps would depend on what the actual problem of your kits is. The most common problems are: Sensor or hardware issues Connectivity or configuration issues Basic steps Reset the kit Follow this guide Check the FAQs Check the forum Ask support with a nice explanation","title":"Debugging your kit"},{"location":"Guides/getting%20started/Debugging%20your%20sensors/#sensors-or-hardware-issues","text":"As said above, there is no single point of failure for the kits. If the LED is working normally, but there is one or more sensosr that are not responding, connect the Shell and type: version Note this for later. If it's an old version of the firmware, it might help to directly upgrade . sensor This should show if all the sensors are being recognised. If one of them is missing from the list, you can try to check the i2c bus (where most of the sensors are connected): i2c If one of the sensors is not shown, it means that there is probably a hardware issue with the sensor itself and that the microcontroller is not recognising it. Now, it would be useful to look for corrosion signs around the sensors and maybe reflash the firmware in case there is a better detection of the sensors in a firmware update. Otherwise, it is likely that the hardware is no longer functioning and it needs replacement. If the LED is static , very likely there is a problem with the detection or an electric problem with the sensors. For this, it is useful to start disconnecting each component to understand which component fails: Disconnect the power (USB and battery) and disconnect the PMS5003 sensor. Power on again and check Disconnect the power (USB and battery) and disconnect the Urban Board. Power on again and check If this doesn't help, try to upgrade the firmware , as there might be improvements. If it helps, also update and check if it improves. If the sensors heat up too much (it burns to touch), there might be an electric issue.","title":"Sensors or hardware issues"},{"location":"Guides/getting%20started/Debugging%20your%20sensors/#connectivity-or-configuration-issues","text":"Normally, configuration or connectivity issues can be due to the following reasons: Typo during the setup process Old firmware If not using the Shell , make sure that the information provided for the network is correct by putting the SCK in SETUP mode (RED LED) and accessing the SmartCitizeXXXX network. If using the Shell , you can check the recording configuration by typing: config If you see a problem with the configuration, you can fix each item or the whole thing by typing: config -mode network -wifi \"SSID\" \"PASS\" -token token Beware of the quoutes Note that the token does not have quotes around it and that the SSID and PASS have straight quotes. If the issue is not solved, you can use the Shell and look for an ERROR message. You can write on the forum and we will support there! !!! info \"Not solved\"? In case there is no problem with the configuration, there problem might get solved by a firmware update.","title":"Connectivity or configuration issues"},{"location":"Guides/getting%20started/Downloading%20the%20Data/","text":"Downloading data \u00b6 Once you've added your SCK to the platform and it's capturing and sending data correctly, you can interact with the platform in several ways. Visualizing the data, downloading the data and interacting with the data through the API. Direct CSV Download \u00b6 To download your data directly from the platform, and hit DOWNLOAD DATA . You will receive an email with a link to download your data on CSV format in a minute or two. And then: API \u00b6 The Smart Citizen API allows you to request back information from your devices and do many things with it. It is a REST API and it returns the information in JSON format. This means you can easily access the information from any language like Javascript, PHP, Python, etc. and start doing things with it quickly. Developer ready Check the developer documentation for more information. Using scripts \u00b6 Python scripts are provided in the scdata python package repository for downloading devices data in a programatic way. Make sure to check the examples in the git repository. Code examples You can also find some examples on our data tools page .","title":"Downloading platform data"},{"location":"Guides/getting%20started/Downloading%20the%20Data/#downloading-data","text":"Once you've added your SCK to the platform and it's capturing and sending data correctly, you can interact with the platform in several ways. Visualizing the data, downloading the data and interacting with the data through the API.","title":"Downloading data"},{"location":"Guides/getting%20started/Downloading%20the%20Data/#direct-csv-download","text":"To download your data directly from the platform, and hit DOWNLOAD DATA . You will receive an email with a link to download your data on CSV format in a minute or two. And then:","title":"Direct CSV Download"},{"location":"Guides/getting%20started/Downloading%20the%20Data/#api","text":"The Smart Citizen API allows you to request back information from your devices and do many things with it. It is a REST API and it returns the information in JSON format. This means you can easily access the information from any language like Javascript, PHP, Python, etc. and start doing things with it quickly. Developer ready Check the developer documentation for more information.","title":"API"},{"location":"Guides/getting%20started/Downloading%20the%20Data/#using-scripts","text":"Python scripts are provided in the scdata python package repository for downloading devices data in a programatic way. Make sure to check the examples in the git repository. Code examples You can also find some examples on our data tools page .","title":"Using scripts"},{"location":"Guides/getting%20started/Getting%20firmware%20information/","text":"Getting firmware information \u00b6 There are two ways to get the firmware version: Using the shell Following the steps below: Getting firmware information Set your kit in setup mode by pressing the ON/OFF button Connect to the kit with your mobile device as you did during the installation process. You will need to search for a Wi-Fi network called SmartCitizen[\u00b7\u00b7\u00b7] . If you have multiple kits [\u00b7\u00b7\u00b7] is the unique identifier of your kit. Next, go to http://sck.me on your mobile device and click on the top right corner icon: Here you go! Obtain your firmware version remotely (advanced) If you are an advance user managing a big deployment of devices you can obtain remotely the version of all the Kits you have registered by looking at the hardware_info property of each of your devices using the platform API /v0/devices/ . When your Kit is in Wi-Fi mode, it publishes the information daily. \"hardware_info\": { \"id\": \"DFD098A750515157382E3120FF101D12\", \"mac\": \"B6:E6:2D:66:47:6D\", \"time\": \"2020-04-14T03:00:24Z\", \"esp_bd\": \"\", \"hw_ver\": \"2.1\", \"sam_bd\": \"2019-11-27T12:49:13Z\", \"esp_ver\": \"\", \"sam_ver\": \"0.9.6-4e90c77\" } More info in the platform API documentation .","title":"Getting firmware information"},{"location":"Guides/getting%20started/Getting%20firmware%20information/#getting-firmware-information","text":"There are two ways to get the firmware version: Using the shell Following the steps below: Getting firmware information Set your kit in setup mode by pressing the ON/OFF button Connect to the kit with your mobile device as you did during the installation process. You will need to search for a Wi-Fi network called SmartCitizen[\u00b7\u00b7\u00b7] . If you have multiple kits [\u00b7\u00b7\u00b7] is the unique identifier of your kit. Next, go to http://sck.me on your mobile device and click on the top right corner icon: Here you go! Obtain your firmware version remotely (advanced) If you are an advance user managing a big deployment of devices you can obtain remotely the version of all the Kits you have registered by looking at the hardware_info property of each of your devices using the platform API /v0/devices/ . When your Kit is in Wi-Fi mode, it publishes the information daily. \"hardware_info\": { \"id\": \"DFD098A750515157382E3120FF101D12\", \"mac\": \"B6:E6:2D:66:47:6D\", \"time\": \"2020-04-14T03:00:24Z\", \"esp_bd\": \"\", \"hw_ver\": \"2.1\", \"sam_bd\": \"2019-11-27T12:49:13Z\", \"esp_ver\": \"\", \"sam_ver\": \"0.9.6-4e90c77\" } More info in the platform API documentation .","title":"Getting firmware information"},{"location":"Guides/getting%20started/Onboarding%20Sensors/","text":"Onboarding your kit \u00b6 The onboarding app guides you through the process of the setup using simple language and a friendly graphic language. It is built as a separate tool from the core Smart Citizen Webpage in order it can be customized for each deployment. Onboarding app Visit the onboarding app at start.smartcitizen.me . Before you start make sure you have: A computer to visit the onboarding app A smartphone (or tablet, or another computer) to connect to the kit and configure it The welcome page looks like this: You can then follow the steps by pressing on Let's go! . For experienced users, you can press Skip instructions and go to the Configuration page: Connect to the Kit \u00b6 After this, make sure that the SCK is in Setup Mode (LED is red) and connect with your smartphone to the SmartCitizen[...] network. In your phone, something like below should pop-up: If nothing comes up In some cases, your phone will be disconected from the WiFi as it doesn't have access to the internet. Stay connected to it! If nothing pop-up in your phone, open your phone's web browser and navigate to sck.me Now, choose where you want your data to go, either Wi-Fi Mode or SD-Card Mode Wi-Fi Mode \u00b6 If you go with Wi-Fi mode, you should see the screen below. In your computer, you should click Next and see a 6 letter token to be input in your phone: Depending on the mode selected (Wi-Fi or SD card), proceed with the steps and make sure the LED changes color: blue for Wi-Fi, purple for SD card. Once this is done, register your kit and add it to your user profile following the steps: You can also mark it's location in the map (this doesn't need to be accurate, it's as accurate as you want it to be): Location of the sensor The sensor location is only defined by the user in the registration process. It can be modified afterwards in the kit edit page . The Smart Citizen Kit does not retrieve location unless it has an onboard GPS. In this case, the GPS location never updates the location in the map . You can also add some tags to your sensor: Finally, add the sensor to an user account (if you don't have one you can register now). This step is needed as every device needs to be owned by one user: What is the email used for? The user account and email is only used for sensor data emails and sensor notifications (i.e. notification when the battery is almost empty). It is not used for commercial purposes at all, as stated in our policy You are done! Working with a community? You can either choose to create a joint email account, or work with each participant with one account. Working with a joint email account speeds things up, but it is not the same sense of ownership. When in doubt, we recommend giving each participant the freedom to choose, and if they do not want to create an account, a fallback option can be used. SD-Card Mode \u00b6 If you go with SD-Card mode, data will be stored only on the SD-card. Simply press start and the LED will turn pink. Check the sd-card operation mode for more information. Visit your Kit \u00b6 Visit the Kit on the platform. Wait one minute till it publishes data : When the data is available, scroll down to make some basic explorations: More on the data The platform allows you to check the data in a basic way, but if you want to have a deeper look you can: Download the data in CSV Get it from the API Use python to analyse it","title":"Onboarding Sensors"},{"location":"Guides/getting%20started/Onboarding%20Sensors/#onboarding-your-kit","text":"The onboarding app guides you through the process of the setup using simple language and a friendly graphic language. It is built as a separate tool from the core Smart Citizen Webpage in order it can be customized for each deployment. Onboarding app Visit the onboarding app at start.smartcitizen.me . Before you start make sure you have: A computer to visit the onboarding app A smartphone (or tablet, or another computer) to connect to the kit and configure it The welcome page looks like this: You can then follow the steps by pressing on Let's go! . For experienced users, you can press Skip instructions and go to the Configuration page:","title":"Onboarding your kit"},{"location":"Guides/getting%20started/Onboarding%20Sensors/#connect-to-the-kit","text":"After this, make sure that the SCK is in Setup Mode (LED is red) and connect with your smartphone to the SmartCitizen[...] network. In your phone, something like below should pop-up: If nothing comes up In some cases, your phone will be disconected from the WiFi as it doesn't have access to the internet. Stay connected to it! If nothing pop-up in your phone, open your phone's web browser and navigate to sck.me Now, choose where you want your data to go, either Wi-Fi Mode or SD-Card Mode","title":"Connect to the Kit"},{"location":"Guides/getting%20started/Onboarding%20Sensors/#wi-fi-mode","text":"If you go with Wi-Fi mode, you should see the screen below. In your computer, you should click Next and see a 6 letter token to be input in your phone: Depending on the mode selected (Wi-Fi or SD card), proceed with the steps and make sure the LED changes color: blue for Wi-Fi, purple for SD card. Once this is done, register your kit and add it to your user profile following the steps: You can also mark it's location in the map (this doesn't need to be accurate, it's as accurate as you want it to be): Location of the sensor The sensor location is only defined by the user in the registration process. It can be modified afterwards in the kit edit page . The Smart Citizen Kit does not retrieve location unless it has an onboard GPS. In this case, the GPS location never updates the location in the map . You can also add some tags to your sensor: Finally, add the sensor to an user account (if you don't have one you can register now). This step is needed as every device needs to be owned by one user: What is the email used for? The user account and email is only used for sensor data emails and sensor notifications (i.e. notification when the battery is almost empty). It is not used for commercial purposes at all, as stated in our policy You are done! Working with a community? You can either choose to create a joint email account, or work with each participant with one account. Working with a joint email account speeds things up, but it is not the same sense of ownership. When in doubt, we recommend giving each participant the freedom to choose, and if they do not want to create an account, a fallback option can be used.","title":"Wi-Fi Mode"},{"location":"Guides/getting%20started/Onboarding%20Sensors/#sd-card-mode","text":"If you go with SD-Card mode, data will be stored only on the SD-card. Simply press start and the LED will turn pink. Check the sd-card operation mode for more information.","title":"SD-Card Mode"},{"location":"Guides/getting%20started/Onboarding%20Sensors/#visit-your-kit","text":"Visit the Kit on the platform. Wait one minute till it publishes data : When the data is available, scroll down to make some basic explorations: More on the data The platform allows you to check the data in a basic way, but if you want to have a deeper look you can: Download the data in CSV Get it from the API Use python to analyse it","title":"Visit your Kit"},{"location":"Guides/getting%20started/Updating%20the%20Wi-Fi/","text":"Updating the Wi-Fi credentials \u00b6 This guide will help you update your kit's Wi-Fi settings. Warning The kit supports Wi-Fi WEP, WPA/WPA2 and open networks that are common networks in domestic environments and small businesses. But, it does not support WPA/WPA2 Enterprise networks such as EDUROAM or networks with captive portals such as those found in Airports and Hotels Connect to the Kit \u00b6 Click your kit button until the kit is in setup mode , the LED should be red. Connect to the kit with your mobile device as you did during the installation process. You will need to search for a Wi-Fi network called SmartCitizen[\u00b7\u00b7\u00b7] . If you have multiple kits [\u00b7\u00b7\u00b7] is the unique identifier of your kit. Once connected you should see the Setup App in your phone . If it doesn't show up automatically you can open http://192.168.1.1 on your phone browser. Info The process also works on laptops, desktops and tablets, connected than can connect to the SmartCitizen[\u00b7\u00b7\u00b7] network. Update the Wi-Fi \u00b6 On the app choose start to move to the next page. You will see your device key or token . Do not change it and choose next . Set your new Wi-Fi settings on the next screen as you did during the installation process. The LED will go blue and your kit should start to publish again using the new Wi-Fi . You can confirm it by visiting your device on smartcitizen.me/kits . You can repeat the process as many times as you want by going back to step 1. Info If your Kit is not publishing check the LED status chart to know more about it.","title":"Updating the Wi-Fi"},{"location":"Guides/getting%20started/Updating%20the%20Wi-Fi/#updating-the-wi-fi-credentials","text":"This guide will help you update your kit's Wi-Fi settings. Warning The kit supports Wi-Fi WEP, WPA/WPA2 and open networks that are common networks in domestic environments and small businesses. But, it does not support WPA/WPA2 Enterprise networks such as EDUROAM or networks with captive portals such as those found in Airports and Hotels","title":"Updating the Wi-Fi credentials"},{"location":"Guides/getting%20started/Updating%20the%20Wi-Fi/#connect-to-the-kit","text":"Click your kit button until the kit is in setup mode , the LED should be red. Connect to the kit with your mobile device as you did during the installation process. You will need to search for a Wi-Fi network called SmartCitizen[\u00b7\u00b7\u00b7] . If you have multiple kits [\u00b7\u00b7\u00b7] is the unique identifier of your kit. Once connected you should see the Setup App in your phone . If it doesn't show up automatically you can open http://192.168.1.1 on your phone browser. Info The process also works on laptops, desktops and tablets, connected than can connect to the SmartCitizen[\u00b7\u00b7\u00b7] network.","title":"Connect to the Kit"},{"location":"Guides/getting%20started/Updating%20the%20Wi-Fi/#update-the-wi-fi","text":"On the app choose start to move to the next page. You will see your device key or token . Do not change it and choose next . Set your new Wi-Fi settings on the next screen as you did during the installation process. The LED will go blue and your kit should start to publish again using the new Wi-Fi . You can confirm it by visiting your device on smartcitizen.me/kits . You can repeat the process as many times as you want by going back to step 1. Info If your Kit is not publishing check the LED status chart to know more about it.","title":"Update the Wi-Fi"},{"location":"Guides/getting%20started/Uploading%20SD%20Card%20Data/","text":"Uploading SD Card Data \u00b6 Here some instructions on how to upload CSV files to Smartcitizen platform. First be sure to be logged and go to your profile . On your kits' list, click on the wheel and then on \"Upload CSV\". Once on the upload page, you can add some files by clicking on the \"Load CSV files\" button. Select some files as much as you like, to be them ready to upload. Then on the drop-down menu select the \"Upload\" option Click on the \"Apply\" button to upload them Congrats! You just uploaded your files CSV files on the Smartcitizen platform.","title":"Uploading SD-card data"},{"location":"Guides/getting%20started/Uploading%20SD%20Card%20Data/#uploading-sd-card-data","text":"Here some instructions on how to upload CSV files to Smartcitizen platform. First be sure to be logged and go to your profile . On your kits' list, click on the wheel and then on \"Upload CSV\". Once on the upload page, you can add some files by clicking on the \"Load CSV files\" button. Select some files as much as you like, to be them ready to upload. Then on the drop-down menu select the \"Upload\" option Click on the \"Apply\" button to upload them Congrats! You just uploaded your files CSV files on the Smartcitizen platform.","title":"Uploading SD Card Data"},{"location":"Guides/getting%20started/Using%20the%20Shell/","text":"Using the Shell \u00b6 The SCK (from V2.0 onwards) has an integrated command shell over USB to manage all the kits functionalities. In this guide, we will cover how to access to this functionality in different platforms, and some examples! If you are using a webusb compatible browser , you can use the terminal below and access the shell right off-the-shelf! Monitor command The monitor command only works if you change the Settings > Line ending to \\n . What is it? \u00b6 The shell is a text-based interface to access almost any SCK functionality. In terms of hardware, it relies on the serial communication between the SCK and your computer, so any decent USB cable connected between them will do. How to access it? \u00b6 You can access the shell in different ways. The easiest is via webUSB , although you need a compatible browser. Otherwise, the Arduino IDE is a great option! For more advanced users, a terminal interface will work best. Using the Arduino IDE \u00b6 Download and install the Arduino IDE if you don't have it yet. Next, launch it and select the port under Tools > Port > : Launch the Serial Monitor under Tools > Serial Monitor . Make sure that the dropdowns in the bottom are set as in the image below ( Carriage return ). Type in help to get started: Using WebUSB \u00b6 You can use a terminal running on the browser, using the WebUSB technology (see above for a working example!). There are plenty of web services, such as spacehuhn webserial terminal . Not for all browsers Not all browsers support this at the moment. You can check its compatibility here . Using a terminal directly \u00b6 More advanced users would probably rather use a more rugged interface. In this case, you could use screen in your terminal of choice: > ls /dev/cu | grep usb cu.usbmodem1411 tty.usbmodem1411 > screen /dev/cu.usmodem1411 SCK > ... If you already installed platformio to edit the firmware you can use it here, too > pio device monitor SCK > ... Finally, if you are a linux user, you can use tio : > tio /dev/ttyACM0 [14:06:45.050] tio v2.5 [14:06:45.050] Press ctrl-t q to quit [14:06:45.109] Connected SCK > Be patient! The port will take a little time to appear in your list of devices. Normally the LED of your SCK will be breathing white during that period. Available commands \u00b6 Type help to get an explanation of each command available: SCK > help reset: Resets the SCK version: Shows versions and Hardware ID rcause: Show last reset cause (debug) outlevel: Shows/sets output level: outlevel [0:silent, 1:normal, 2:verbose] help: Duhhhh!! pinmux: Shows SAMD pin mapping status flash: Shows and manage flash memory state [no-param -> info] [-format (be careful)] [-dump sect-num (0-2040)] [-sector sect-num] [-recover sect-num/all net/sd] sensor: Shows/sets sensor state or interval: sensor sensor-name [-enable or -disable] [-interval interval(seconds)] monitor: Continously read sensor: monitor [-sd] [-notime] [-noms] [sensorName[,sensorNameN]] debug: Toggle debug messages: debug [-sdcard] [-flash] [-speed] [-serial] read: Reads sensor: read [sensorName] control: Control sensor: control [sensorName] [command] free: Shows the amount of free RAM memory i2c: Search the I2C bus for devices power: Controls/shows power config: power [-info (extra info)] [-batcap mAh] [-otg on/off] [-charge on/off] [-sleep min (0-disable)] config: Shows/sets configuration: config [-defaults] [-mode sdcard/network] [-pubint seconds] [-readint seconds] [-wifi \"ssid\" [\"pass\"]] [-token token] [-sanity(reset) on/off] esp: Controls or shows info from ESP: esp [-on -off -sleep -wake -reboot -flash] netinfo: Shows network information time: Shows/sets date and time: time [epoch time] [-sync] hello: Sends MQTT hello to platform shell: Shows or sets shell mode: shell [-on] [-off] publish: Publish custom mqtt message: mqtt [\"topic\" \"message\"] offline: Configure offline periods and WiFi retry interval: [-retryint seconds] [-period start-hour end-hour (UTC 0-23)] mqttsrv: Configure mqtt server address and port: [-host serverName] [-port portNum] ntpsrv: Configure ntp server address and port: [-host serverName] [-port portNum] sleep: Send the kit to sleep led: Changes led brightness: led [percent] file: SD card file operations: [-ls] [-rm filename] [-less filename] [-allcsv] Shell Mode - shell \u00b6 shell: Shows or sets shell mode: shell [-on] [-off] The SCK outputs a lot of information via serial. This can be sometimes confusing while typing commands. You can silent it a bit with this command: SCK > shell -on Shell mode: on This will turn your LED static yellow , and no output except responses to your commands will be given. Remember to turn it off after you are done experimenting! SCK > shell -off Shell mode: off Set the recording configuration - config \u00b6 config: Shows/sets configuration: config [-defaults] [-mode sdcard/network] [-pubint seconds] [-readint seconds] [-wifi \"ssid\" [\"pass\"]] [-token token] [-sanity(reset) on/off] If you want to change your recording mode to, for instance, sdcard mode, you could do so by typing: SCK > config -mode sdcard To set it up in network mode: SCK > config -mode network -wifi \"SSID\" \"PASSWORD\" -token 123456 Warning Note that the token is not between quotes since it's always 6 digits. To modify your Wi-Fi credentials: SCK > config -wifi \"NEWSSID\" \"NEWPASSWORD\" You can check your current configuration by typing config : SCK > config Mode: sdcard Publish interval: 60 Reading interval: 60 Wifi credentials: not configured Token: not configured Mac address: 11:22:33:44:55:66 Set recording and publication intervals \u00b6 In order to understand the reading and publication intervals, we first need to describe how measurements are taken: General reading interval : this defines the general period that the SCK uses to take measurements Individual sensor reading interval : period for each sensor . It is defined as N times the General reading interval Publication interval : period for the SCK to publish to the Smart Citizen Platform, independent of the reading interval. Each sensor interval can be configured independently. By default, readings are requested to all sensors every 60s, except the PM sensor, which is read every 5 minutes to save battery. The default publication interval to the Smart Citizen Platform is 3 minutes . Battery calculator This configuration option is very interesting to be used for battery saving. Make sure you check the battery calculator All these intervals can be configured using the shell interface. For instance, to set the publication interval to every 10 minutes, we do: config -pubint 600 Or to set the reading interval to every 3 minutes: config -readint 180 Or both at 10 minutes: config -pubint 600 -readint 600 Sensor based reading interval \u00b6 sensor: Shows/sets sensor state or interval: sensor sensor-name [-enable or -disable] [-interval interval(seconds)] To configure one specific sensor, remember that it's rounded to the closest multiple of the general reading interval : SCK > sensor temp -interval 360 The sensor read interval is calculated as a multiple of general read interval (180) Changing interval of Temperature to 360 Saved configuration on eeprom!! For instance, if we try to do set the temperature readings at 1.5 times, we will get: SCK > sensor temp -interval 240 The sensor read interval is calculated as a multiple of general read interval (180) Changing interval of Temperature to 180 Saved configuration on eeprom!! Limitations The minimum reading and publication interval is 30s The maximum reading interval is one hour The maximum publication interval is one hour For more customisation, please contact support@smartcitizen.me or post on the forum . Default configuration To reeturn to the default configuration: config -defaults -- New config -- Mode: not configured Publish interval (s): 180 Reading interval (s): 60 Wifi credentials: not configured Token: not configured Sanity reset (every 24 hours) is: on ** Please reset your kit ** And reset your kit. Disable sanity reset - config \u00b6 The daily sanity reset is used to ensure the device reboots every day to avoid issues. However, in some cases it can can be disabled by: SCK > config -sanity off -- New config -- Mode: network Publish interval (s): 180 Reading interval (s): 60 Wifi credentials: My Wi-Fi - mypassword Token: ---- Mac address: AA:BB:CC:CC:BB:AA Sanity reset (every 24 hours) is: off You can enable it back on by: SCK > config -sanity on -- New config -- Mode: network Publish interval (s): 180 Reading interval (s): 60 Wifi credentials: My Wi-Fi - mypassword Token: ---- Mac address: AA:BB:CC:CC:BB:AA Sanity reset (every 24 hours) is: on To check, simply type config . SCK > config Mode: network Publish interval (s): 180 Reading interval (s): 60 Wifi credentials: My Wi-Fi - mypassword Token: ---- Mac address: AA:BB:CC:CC:BB:AA Sanity reset (every 24 hours) is: on Get version data - version \u00b6 version: Shows versions and Hardware ID Check your hardware and firmware version data with the version command: Hardware Version: 2.3 SAM Hardware ID: 105816085030524E572E3120FF12123C SAM version: 0.9.10-88b69c2-master-sck23_air SAM build date: 2025-01-31T12:34:45Z ESP version: 0.9.9-6ffa643-master ESP build date: 2025-01-29T13:05:48Z Get network information - netinfo \u00b6 netinfo: Shows network information Check your network information data with the netinfo command: SCK > netinfo Hostname: SmartcitizenA07C IP address: 172.16.20.26 AP MAC address: EE:64:C9:E1:A0:7C STA MAC address: EC:64:C9:E1:A0:7C ESP version: 0.9.9-6ffa643-master ESP build date: 2025-01-29T13:05:48Z Explanation of each field: Hostname : Wi-Fi SSID and hostname IP address : SCK's local IP address AP MAC address : SCK's access point MAC address STA MAC address : SCK's station MAC address ESP version : Wi-Fi Antenna (ESP8266) firmware version ESP build date : Wi-Fi Antenna (ESP8266) firmware build date List/modify the active sensors - sensor \u00b6 sensor: Shows/sets sensor state or interval: sensor sensor-name [-enable or -disable] [-interval interval(seconds)] By typing in sensor , a list of enabled and supported sensors is displayed: SCK > sensor Disabled ---------- PM board Dallas Temperature [...] Enabled ---------- Temperature (60 sec) Humidity (60 sec) Battery (60 sec) Light (60 sec) Noise dBA (60 sec) Barometric pressure (60 sec) VOC Gas CCS811 (60 sec) eCO2 Gas CCS811 (60 sec) PM 1.0 (60 sec) PM 2.5 (60 sec) PM 10.0 (60 sec) To disable one sensor (you can type the name partially or fully): SCK > sensor Noise -disable Disabling Noise dBA Saved configuration on eeprom!! To enable it (only works if it's detected): SCK > sensor Noise -enable Enabling Noise dBA Saved configuration on eeprom!! Only if detected! If the sensor you are trying to connect is not recognised, the SCK will complain: SCK > sensor atlas -enable Failed enabling Atlas Temperature Read sensor data once - read \u00b6 read: Reads sensor: read [sensorName] You can `read`` data from one sensor: SCK > read Noise Noise dBA: 53.85 dBA Read sensor data continuously - monitor \u00b6 monitor: Continously read sensor: monitor [-sd] [-notime] [-noms] [sensorName[,sensorNameN]] Or monitor it continuously: SCK > monitor light Time Miliseconds Light 2019-07-10T17:58:07Z 6 137 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:07Z 98 136 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:07Z 108 137 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:07Z 108 137 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:08Z 98 137 2019-07-10T17:58:08Z 108 137 2019-07-10T17:58:08Z 98 136 ... Log monitor data on the SD card Adding the -sd option will store data into a MONITOR.TXT file on the SD card: SCK > monitor -sd light Time Miliseconds Light 2019-07-10T17:58:07Z 6 137 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:07Z 98 136 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:07Z 108 137 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:07Z 108 137 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:08Z 98 137 2019-07-10T17:58:08Z 108 137 2019-07-10T17:58:08Z 98 136 ... You can monitor several sensors at the same time, separating the names by comma: SCK > monitor light, temp Time Miliseconds Light Temperature 2019-07-10T17:58:07Z 6 137 23.2 2019-07-10T17:58:07Z 98 137 23.2 2019-07-10T17:58:07Z 98 136 23.2 2019-07-10T17:58:07Z 98 137 23.2 2019-07-10T17:58:07Z 108 137 23.2 2019-07-10T17:58:07Z 98 137 23.2 2019-07-10T17:58:07Z 98 137 23.3 2019-07-10T17:58:07Z 108 137 23.3 2019-07-10T17:58:07Z 98 137 23.3 2019-07-10T17:58:08Z 98 137 23.2 2019-07-10T17:58:08Z 108 137 23.2 2019-07-10T17:58:08Z 98 136 23.2 ... You can also monitor all of them at the same time (slow): SCK > monitor Time Miliseconds Battery Light Temperature Humidity Noise dBA Barometric pressure VOC Gas CCS811 eCO2 Gas CCS811 PM 1.0 PM 2.5 PM 10.0 2019-07-11T09:13:04Z 5 37 137 28.75 57.72 1.5 101.29 1.00 408.00 1.5 1.5 1.5 2019-07-11T09:13:07Z 3195 37 138 28.78 57.65 1.5 101.30 1.00 408.00 1.5 1.5 1.5 2019-07-11T09:13:08Z 694 37 136 28.77 57.62 1.5 101.29 1.00 408.00 1.5 1.5 1.5 If you don't need to output the miliseconds column (the time since last reading): SCK > monitor -noms light Time Light 2019-07-10T17:58:58Z 136 2019-07-10T17:58:58Z 136 2019-07-10T17:58:58Z 137 2019-07-10T17:58:58Z 137 2019-07-10T17:58:59Z 136 ... Or the timestamp : SCK > monitor -notime light Miliseconds Light 6 137 98 137 98 137 99 137 108 137 ... Or both: SCK > monitor -noms -notime light Light 136 136 137 137 136 ... Warning If your kit has no time configured (the LED should be flashing), the output would look like: SCK > monitor Noise Time Miliseconds Noise dBA 0 1 52.83 0 187 50.36 0 187 52.05 0 187 51.95 0 187 48.28 0 187 48.72 0 187 50.81 ... Pipe data into a file In a more advanced case, you can pipe the output to a file. For instance, in your terminal (using a mac) you could do: > echo \"monitor pm light\" > /dev/cu.usbmodem1411 && screen -L /dev/cu.usbmodem1411 Then, if we check the contents of the file (normally something like screenlog.X ): monitor light Time Miliseconds Light 2019-07-11T09:10:05Z 6 141 2019-07-11T09:10:05Z 98 141 2019-07-11T09:10:05Z 99 141 2019-07-11T09:10:05Z 98 141 2019-07-11T09:10:05Z 108 141 2019-07-11T09:10:05Z 98 141 2019-07-11T09:10:05Z 98 141 2019-07-11T09:10:05Z 98 141 2019-07-11T09:10:06Z 98 141 2019-07-11T09:10:06Z 98 141 2019-07-11T09:10:06Z 108 141 2019-07-11T09:10:06Z 98 141 2019-07-11T09:10:06Z 98 141 ... This can be useful in case you want to log data as fast as possible, with little delay between readings (~100ms). Changing mqtt or ntp servers - mqttsrv / ntpsrv \u00b6 mqttsrv: Configure mqtt server address and port: [-host serverName] [-port portNum] ntpsrv: Configure ntp server address and port: [-host serverName] [-port portNum] If you want to send data to your own server, or there is a firewall in your network, you can use these two commands to change both NTP or MQTT server. You can check the MQTT server with mqttsrv : SCK > mqttsrv Mqtt Host: mqtt.smartcitizen.me Mqtt Port: 1883 You can check the NTP server with ntpsrv : SCK > ntpsrv NTP Host: ntp.smartcitizen.me NTP Port: 80 Change mqttsrv host and port : SCK > mqttsrv -host mqtt.greatcity.me -port 80 Mqtt Host: mqtt.greatcity.me Mqtt Port: 80 Check the payload first! Check how we send data (note it's not a standard JSON): { t:ISO8601 Timestamp, <sensor_id>:<sensor_reading>, ... } Example: { t:2017-03-24T13:35:14Z, 29:48.45, 13:66, 12:28, 10:4.45 } Accessing the flash memory - flash \u00b6 flash: Shows and manage flash memory state [no-param -> info] [-format (be careful)] [-dump sect-num (0-2040)] [-sector sect-num] [-recover sect-num/all net/sd] This is an advanced feature and helps to explore the data stored in the onboard flash memory for debugging purposes. Get a complete map of used sectors in the flash memory: SCK > flash Scanning Flash memory (it can take a while!) 0 > |u38(_/_)|u36(_/_)|u34(_/_)|u35(_/_)|u35(_/_)|u34(_/_)|u34(_/_)|u35(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u37(_/_)|u37(_/_)|u37(_/_)| 32 > |u37(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u36(_/_)| ... Format the flash (will take a long time): flash -format Check a sector (see what's inside): SCK > flash -sector 300 Sector 300 in address 1228800 is: Used Sector 300 fully published to network: true Sector 300 fully published to sd-card: true Net published groups: 37 Net un-published groups: 0 Sd saved groups: 37 Sd not saved groups: 0 Total groups: 37 Freespace: 53 bytes First group: 2021-07-08T09:04:19Z Last group: 2021-07-12T07:34:49Z Recover a sector (send it to the platform or save in sdcard, or both - see help command): flash -recover all net Change the LED brightness - led \u00b6 led: Changes led brightness: led [percent] Change the led brightness by: SCK > led 25 SD card operations \u00b6 file: SD card file operations: [-ls] [-rm filename] [-less filename] [-allcsv] List SD card files: SCK > file -ls Remove a file in the SD card: SCK > file -rm 2025-01-25.CSV Print the content of one SD card file: SCK > file -less 2025-01-25.CSV Print all CSV files (long!): List SD card files: SCK > file -allcsv Advanced (but cool) example! \u00b6 Making most of the digital microphone The digital microphone in your SCK uses an FFT algorithm to calculate the final sound pressure level (SPL) in different scales (A, C, Z). The FFT spectrum is also available for user analysis. Let's have a look! First, enable it with: SCK > sensor fft -enable Enabling Noise FFT Then, monitor and log it in a file with: echo \"monitor fft\" > /dev/cu.usbmodem1411 && screen -L /dev/cu.usbmodem1411 In this file, we will have something like: 12 15 19 20 0 ... 12 23 2019-07-11T09:30:01Z 5 null ... The values between the dates are the actual FFT spectrum. We will now clean the lines with the dates and then plot the data. For this, we will use a python code to make things easier. You can download the code here . If we run this code in python3 in the same folder where the screenlog from before is: > python spectrum_example.py We will have two outputs: a csv file with the spectrums in rows, and a png image that looks like this! You can see that we were playing with a tone generator to make some high pitch noises at 10kHz and 20kHz.","title":"Using the Shell"},{"location":"Guides/getting%20started/Using%20the%20Shell/#using-the-shell","text":"The SCK (from V2.0 onwards) has an integrated command shell over USB to manage all the kits functionalities. In this guide, we will cover how to access to this functionality in different platforms, and some examples! If you are using a webusb compatible browser , you can use the terminal below and access the shell right off-the-shelf! Monitor command The monitor command only works if you change the Settings > Line ending to \\n .","title":"Using the Shell"},{"location":"Guides/getting%20started/Using%20the%20Shell/#what-is-it","text":"The shell is a text-based interface to access almost any SCK functionality. In terms of hardware, it relies on the serial communication between the SCK and your computer, so any decent USB cable connected between them will do.","title":"What is it?"},{"location":"Guides/getting%20started/Using%20the%20Shell/#how-to-access-it","text":"You can access the shell in different ways. The easiest is via webUSB , although you need a compatible browser. Otherwise, the Arduino IDE is a great option! For more advanced users, a terminal interface will work best.","title":"How to access it?"},{"location":"Guides/getting%20started/Using%20the%20Shell/#using-the-arduino-ide","text":"Download and install the Arduino IDE if you don't have it yet. Next, launch it and select the port under Tools > Port > : Launch the Serial Monitor under Tools > Serial Monitor . Make sure that the dropdowns in the bottom are set as in the image below ( Carriage return ). Type in help to get started:","title":"Using the Arduino IDE"},{"location":"Guides/getting%20started/Using%20the%20Shell/#using-webusb","text":"You can use a terminal running on the browser, using the WebUSB technology (see above for a working example!). There are plenty of web services, such as spacehuhn webserial terminal . Not for all browsers Not all browsers support this at the moment. You can check its compatibility here .","title":"Using WebUSB"},{"location":"Guides/getting%20started/Using%20the%20Shell/#using-a-terminal-directly","text":"More advanced users would probably rather use a more rugged interface. In this case, you could use screen in your terminal of choice: > ls /dev/cu | grep usb cu.usbmodem1411 tty.usbmodem1411 > screen /dev/cu.usmodem1411 SCK > ... If you already installed platformio to edit the firmware you can use it here, too > pio device monitor SCK > ... Finally, if you are a linux user, you can use tio : > tio /dev/ttyACM0 [14:06:45.050] tio v2.5 [14:06:45.050] Press ctrl-t q to quit [14:06:45.109] Connected SCK > Be patient! The port will take a little time to appear in your list of devices. Normally the LED of your SCK will be breathing white during that period.","title":"Using a terminal directly"},{"location":"Guides/getting%20started/Using%20the%20Shell/#available-commands","text":"Type help to get an explanation of each command available: SCK > help reset: Resets the SCK version: Shows versions and Hardware ID rcause: Show last reset cause (debug) outlevel: Shows/sets output level: outlevel [0:silent, 1:normal, 2:verbose] help: Duhhhh!! pinmux: Shows SAMD pin mapping status flash: Shows and manage flash memory state [no-param -> info] [-format (be careful)] [-dump sect-num (0-2040)] [-sector sect-num] [-recover sect-num/all net/sd] sensor: Shows/sets sensor state or interval: sensor sensor-name [-enable or -disable] [-interval interval(seconds)] monitor: Continously read sensor: monitor [-sd] [-notime] [-noms] [sensorName[,sensorNameN]] debug: Toggle debug messages: debug [-sdcard] [-flash] [-speed] [-serial] read: Reads sensor: read [sensorName] control: Control sensor: control [sensorName] [command] free: Shows the amount of free RAM memory i2c: Search the I2C bus for devices power: Controls/shows power config: power [-info (extra info)] [-batcap mAh] [-otg on/off] [-charge on/off] [-sleep min (0-disable)] config: Shows/sets configuration: config [-defaults] [-mode sdcard/network] [-pubint seconds] [-readint seconds] [-wifi \"ssid\" [\"pass\"]] [-token token] [-sanity(reset) on/off] esp: Controls or shows info from ESP: esp [-on -off -sleep -wake -reboot -flash] netinfo: Shows network information time: Shows/sets date and time: time [epoch time] [-sync] hello: Sends MQTT hello to platform shell: Shows or sets shell mode: shell [-on] [-off] publish: Publish custom mqtt message: mqtt [\"topic\" \"message\"] offline: Configure offline periods and WiFi retry interval: [-retryint seconds] [-period start-hour end-hour (UTC 0-23)] mqttsrv: Configure mqtt server address and port: [-host serverName] [-port portNum] ntpsrv: Configure ntp server address and port: [-host serverName] [-port portNum] sleep: Send the kit to sleep led: Changes led brightness: led [percent] file: SD card file operations: [-ls] [-rm filename] [-less filename] [-allcsv]","title":"Available commands"},{"location":"Guides/getting%20started/Using%20the%20Shell/#shell-mode-shell","text":"shell: Shows or sets shell mode: shell [-on] [-off] The SCK outputs a lot of information via serial. This can be sometimes confusing while typing commands. You can silent it a bit with this command: SCK > shell -on Shell mode: on This will turn your LED static yellow , and no output except responses to your commands will be given. Remember to turn it off after you are done experimenting! SCK > shell -off Shell mode: off","title":"Shell Mode - shell"},{"location":"Guides/getting%20started/Using%20the%20Shell/#set-the-recording-configuration-config","text":"config: Shows/sets configuration: config [-defaults] [-mode sdcard/network] [-pubint seconds] [-readint seconds] [-wifi \"ssid\" [\"pass\"]] [-token token] [-sanity(reset) on/off] If you want to change your recording mode to, for instance, sdcard mode, you could do so by typing: SCK > config -mode sdcard To set it up in network mode: SCK > config -mode network -wifi \"SSID\" \"PASSWORD\" -token 123456 Warning Note that the token is not between quotes since it's always 6 digits. To modify your Wi-Fi credentials: SCK > config -wifi \"NEWSSID\" \"NEWPASSWORD\" You can check your current configuration by typing config : SCK > config Mode: sdcard Publish interval: 60 Reading interval: 60 Wifi credentials: not configured Token: not configured Mac address: 11:22:33:44:55:66","title":"Set the recording configuration - config"},{"location":"Guides/getting%20started/Using%20the%20Shell/#set-recording-and-publication-intervals","text":"In order to understand the reading and publication intervals, we first need to describe how measurements are taken: General reading interval : this defines the general period that the SCK uses to take measurements Individual sensor reading interval : period for each sensor . It is defined as N times the General reading interval Publication interval : period for the SCK to publish to the Smart Citizen Platform, independent of the reading interval. Each sensor interval can be configured independently. By default, readings are requested to all sensors every 60s, except the PM sensor, which is read every 5 minutes to save battery. The default publication interval to the Smart Citizen Platform is 3 minutes . Battery calculator This configuration option is very interesting to be used for battery saving. Make sure you check the battery calculator All these intervals can be configured using the shell interface. For instance, to set the publication interval to every 10 minutes, we do: config -pubint 600 Or to set the reading interval to every 3 minutes: config -readint 180 Or both at 10 minutes: config -pubint 600 -readint 600","title":"Set recording and publication intervals"},{"location":"Guides/getting%20started/Using%20the%20Shell/#sensor-based-reading-interval","text":"sensor: Shows/sets sensor state or interval: sensor sensor-name [-enable or -disable] [-interval interval(seconds)] To configure one specific sensor, remember that it's rounded to the closest multiple of the general reading interval : SCK > sensor temp -interval 360 The sensor read interval is calculated as a multiple of general read interval (180) Changing interval of Temperature to 360 Saved configuration on eeprom!! For instance, if we try to do set the temperature readings at 1.5 times, we will get: SCK > sensor temp -interval 240 The sensor read interval is calculated as a multiple of general read interval (180) Changing interval of Temperature to 180 Saved configuration on eeprom!! Limitations The minimum reading and publication interval is 30s The maximum reading interval is one hour The maximum publication interval is one hour For more customisation, please contact support@smartcitizen.me or post on the forum . Default configuration To reeturn to the default configuration: config -defaults -- New config -- Mode: not configured Publish interval (s): 180 Reading interval (s): 60 Wifi credentials: not configured Token: not configured Sanity reset (every 24 hours) is: on ** Please reset your kit ** And reset your kit.","title":"Sensor based reading interval"},{"location":"Guides/getting%20started/Using%20the%20Shell/#disable-sanity-reset-config","text":"The daily sanity reset is used to ensure the device reboots every day to avoid issues. However, in some cases it can can be disabled by: SCK > config -sanity off -- New config -- Mode: network Publish interval (s): 180 Reading interval (s): 60 Wifi credentials: My Wi-Fi - mypassword Token: ---- Mac address: AA:BB:CC:CC:BB:AA Sanity reset (every 24 hours) is: off You can enable it back on by: SCK > config -sanity on -- New config -- Mode: network Publish interval (s): 180 Reading interval (s): 60 Wifi credentials: My Wi-Fi - mypassword Token: ---- Mac address: AA:BB:CC:CC:BB:AA Sanity reset (every 24 hours) is: on To check, simply type config . SCK > config Mode: network Publish interval (s): 180 Reading interval (s): 60 Wifi credentials: My Wi-Fi - mypassword Token: ---- Mac address: AA:BB:CC:CC:BB:AA Sanity reset (every 24 hours) is: on","title":"Disable sanity reset - config"},{"location":"Guides/getting%20started/Using%20the%20Shell/#get-version-data-version","text":"version: Shows versions and Hardware ID Check your hardware and firmware version data with the version command: Hardware Version: 2.3 SAM Hardware ID: 105816085030524E572E3120FF12123C SAM version: 0.9.10-88b69c2-master-sck23_air SAM build date: 2025-01-31T12:34:45Z ESP version: 0.9.9-6ffa643-master ESP build date: 2025-01-29T13:05:48Z","title":"Get version data - version"},{"location":"Guides/getting%20started/Using%20the%20Shell/#get-network-information-netinfo","text":"netinfo: Shows network information Check your network information data with the netinfo command: SCK > netinfo Hostname: SmartcitizenA07C IP address: 172.16.20.26 AP MAC address: EE:64:C9:E1:A0:7C STA MAC address: EC:64:C9:E1:A0:7C ESP version: 0.9.9-6ffa643-master ESP build date: 2025-01-29T13:05:48Z Explanation of each field: Hostname : Wi-Fi SSID and hostname IP address : SCK's local IP address AP MAC address : SCK's access point MAC address STA MAC address : SCK's station MAC address ESP version : Wi-Fi Antenna (ESP8266) firmware version ESP build date : Wi-Fi Antenna (ESP8266) firmware build date","title":"Get network information - netinfo"},{"location":"Guides/getting%20started/Using%20the%20Shell/#listmodify-the-active-sensors-sensor","text":"sensor: Shows/sets sensor state or interval: sensor sensor-name [-enable or -disable] [-interval interval(seconds)] By typing in sensor , a list of enabled and supported sensors is displayed: SCK > sensor Disabled ---------- PM board Dallas Temperature [...] Enabled ---------- Temperature (60 sec) Humidity (60 sec) Battery (60 sec) Light (60 sec) Noise dBA (60 sec) Barometric pressure (60 sec) VOC Gas CCS811 (60 sec) eCO2 Gas CCS811 (60 sec) PM 1.0 (60 sec) PM 2.5 (60 sec) PM 10.0 (60 sec) To disable one sensor (you can type the name partially or fully): SCK > sensor Noise -disable Disabling Noise dBA Saved configuration on eeprom!! To enable it (only works if it's detected): SCK > sensor Noise -enable Enabling Noise dBA Saved configuration on eeprom!! Only if detected! If the sensor you are trying to connect is not recognised, the SCK will complain: SCK > sensor atlas -enable Failed enabling Atlas Temperature","title":"List/modify the active sensors - sensor"},{"location":"Guides/getting%20started/Using%20the%20Shell/#read-sensor-data-once-read","text":"read: Reads sensor: read [sensorName] You can `read`` data from one sensor: SCK > read Noise Noise dBA: 53.85 dBA","title":"Read sensor data once - read"},{"location":"Guides/getting%20started/Using%20the%20Shell/#read-sensor-data-continuously-monitor","text":"monitor: Continously read sensor: monitor [-sd] [-notime] [-noms] [sensorName[,sensorNameN]] Or monitor it continuously: SCK > monitor light Time Miliseconds Light 2019-07-10T17:58:07Z 6 137 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:07Z 98 136 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:07Z 108 137 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:07Z 108 137 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:08Z 98 137 2019-07-10T17:58:08Z 108 137 2019-07-10T17:58:08Z 98 136 ... Log monitor data on the SD card Adding the -sd option will store data into a MONITOR.TXT file on the SD card: SCK > monitor -sd light Time Miliseconds Light 2019-07-10T17:58:07Z 6 137 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:07Z 98 136 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:07Z 108 137 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:07Z 108 137 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:08Z 98 137 2019-07-10T17:58:08Z 108 137 2019-07-10T17:58:08Z 98 136 ... You can monitor several sensors at the same time, separating the names by comma: SCK > monitor light, temp Time Miliseconds Light Temperature 2019-07-10T17:58:07Z 6 137 23.2 2019-07-10T17:58:07Z 98 137 23.2 2019-07-10T17:58:07Z 98 136 23.2 2019-07-10T17:58:07Z 98 137 23.2 2019-07-10T17:58:07Z 108 137 23.2 2019-07-10T17:58:07Z 98 137 23.2 2019-07-10T17:58:07Z 98 137 23.3 2019-07-10T17:58:07Z 108 137 23.3 2019-07-10T17:58:07Z 98 137 23.3 2019-07-10T17:58:08Z 98 137 23.2 2019-07-10T17:58:08Z 108 137 23.2 2019-07-10T17:58:08Z 98 136 23.2 ... You can also monitor all of them at the same time (slow): SCK > monitor Time Miliseconds Battery Light Temperature Humidity Noise dBA Barometric pressure VOC Gas CCS811 eCO2 Gas CCS811 PM 1.0 PM 2.5 PM 10.0 2019-07-11T09:13:04Z 5 37 137 28.75 57.72 1.5 101.29 1.00 408.00 1.5 1.5 1.5 2019-07-11T09:13:07Z 3195 37 138 28.78 57.65 1.5 101.30 1.00 408.00 1.5 1.5 1.5 2019-07-11T09:13:08Z 694 37 136 28.77 57.62 1.5 101.29 1.00 408.00 1.5 1.5 1.5 If you don't need to output the miliseconds column (the time since last reading): SCK > monitor -noms light Time Light 2019-07-10T17:58:58Z 136 2019-07-10T17:58:58Z 136 2019-07-10T17:58:58Z 137 2019-07-10T17:58:58Z 137 2019-07-10T17:58:59Z 136 ... Or the timestamp : SCK > monitor -notime light Miliseconds Light 6 137 98 137 98 137 99 137 108 137 ... Or both: SCK > monitor -noms -notime light Light 136 136 137 137 136 ... Warning If your kit has no time configured (the LED should be flashing), the output would look like: SCK > monitor Noise Time Miliseconds Noise dBA 0 1 52.83 0 187 50.36 0 187 52.05 0 187 51.95 0 187 48.28 0 187 48.72 0 187 50.81 ... Pipe data into a file In a more advanced case, you can pipe the output to a file. For instance, in your terminal (using a mac) you could do: > echo \"monitor pm light\" > /dev/cu.usbmodem1411 && screen -L /dev/cu.usbmodem1411 Then, if we check the contents of the file (normally something like screenlog.X ): monitor light Time Miliseconds Light 2019-07-11T09:10:05Z 6 141 2019-07-11T09:10:05Z 98 141 2019-07-11T09:10:05Z 99 141 2019-07-11T09:10:05Z 98 141 2019-07-11T09:10:05Z 108 141 2019-07-11T09:10:05Z 98 141 2019-07-11T09:10:05Z 98 141 2019-07-11T09:10:05Z 98 141 2019-07-11T09:10:06Z 98 141 2019-07-11T09:10:06Z 98 141 2019-07-11T09:10:06Z 108 141 2019-07-11T09:10:06Z 98 141 2019-07-11T09:10:06Z 98 141 ... This can be useful in case you want to log data as fast as possible, with little delay between readings (~100ms).","title":"Read sensor data continuously - monitor"},{"location":"Guides/getting%20started/Using%20the%20Shell/#changing-mqtt-or-ntp-servers-mqttsrv-ntpsrv","text":"mqttsrv: Configure mqtt server address and port: [-host serverName] [-port portNum] ntpsrv: Configure ntp server address and port: [-host serverName] [-port portNum] If you want to send data to your own server, or there is a firewall in your network, you can use these two commands to change both NTP or MQTT server. You can check the MQTT server with mqttsrv : SCK > mqttsrv Mqtt Host: mqtt.smartcitizen.me Mqtt Port: 1883 You can check the NTP server with ntpsrv : SCK > ntpsrv NTP Host: ntp.smartcitizen.me NTP Port: 80 Change mqttsrv host and port : SCK > mqttsrv -host mqtt.greatcity.me -port 80 Mqtt Host: mqtt.greatcity.me Mqtt Port: 80 Check the payload first! Check how we send data (note it's not a standard JSON): { t:ISO8601 Timestamp, <sensor_id>:<sensor_reading>, ... } Example: { t:2017-03-24T13:35:14Z, 29:48.45, 13:66, 12:28, 10:4.45 }","title":"Changing mqtt or ntp servers - mqttsrv / ntpsrv"},{"location":"Guides/getting%20started/Using%20the%20Shell/#accessing-the-flash-memory-flash","text":"flash: Shows and manage flash memory state [no-param -> info] [-format (be careful)] [-dump sect-num (0-2040)] [-sector sect-num] [-recover sect-num/all net/sd] This is an advanced feature and helps to explore the data stored in the onboard flash memory for debugging purposes. Get a complete map of used sectors in the flash memory: SCK > flash Scanning Flash memory (it can take a while!) 0 > |u38(_/_)|u36(_/_)|u34(_/_)|u35(_/_)|u35(_/_)|u34(_/_)|u34(_/_)|u35(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u37(_/_)|u37(_/_)|u37(_/_)| 32 > |u37(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u36(_/_)| ... Format the flash (will take a long time): flash -format Check a sector (see what's inside): SCK > flash -sector 300 Sector 300 in address 1228800 is: Used Sector 300 fully published to network: true Sector 300 fully published to sd-card: true Net published groups: 37 Net un-published groups: 0 Sd saved groups: 37 Sd not saved groups: 0 Total groups: 37 Freespace: 53 bytes First group: 2021-07-08T09:04:19Z Last group: 2021-07-12T07:34:49Z Recover a sector (send it to the platform or save in sdcard, or both - see help command): flash -recover all net","title":"Accessing the flash memory - flash"},{"location":"Guides/getting%20started/Using%20the%20Shell/#change-the-led-brightness-led","text":"led: Changes led brightness: led [percent] Change the led brightness by: SCK > led 25","title":"Change the LED brightness - led"},{"location":"Guides/getting%20started/Using%20the%20Shell/#sd-card-operations","text":"file: SD card file operations: [-ls] [-rm filename] [-less filename] [-allcsv] List SD card files: SCK > file -ls Remove a file in the SD card: SCK > file -rm 2025-01-25.CSV Print the content of one SD card file: SCK > file -less 2025-01-25.CSV Print all CSV files (long!): List SD card files: SCK > file -allcsv","title":"SD card operations"},{"location":"Guides/getting%20started/Using%20the%20Shell/#advanced-but-cool-example","text":"Making most of the digital microphone The digital microphone in your SCK uses an FFT algorithm to calculate the final sound pressure level (SPL) in different scales (A, C, Z). The FFT spectrum is also available for user analysis. Let's have a look! First, enable it with: SCK > sensor fft -enable Enabling Noise FFT Then, monitor and log it in a file with: echo \"monitor fft\" > /dev/cu.usbmodem1411 && screen -L /dev/cu.usbmodem1411 In this file, we will have something like: 12 15 19 20 0 ... 12 23 2019-07-11T09:30:01Z 5 null ... The values between the dates are the actual FFT spectrum. We will now clean the lines with the dates and then plot the data. For this, we will use a python code to make things easier. You can download the code here . If we run this code in python3 in the same folder where the screenlog from before is: > python spectrum_example.py We will have two outputs: a csv file with the spectrums in rows, and a png image that looks like this! You can see that we were playing with a tone generator to make some high pitch noises at 10kHz and 20kHz.","title":"Advanced (but cool) example!"},{"location":"Units/","text":"Sensors \u00b6 The MINKE sensor portfolio is a selection of sensors from the Smart Citizen project , and aims to create a boilerplate for individuals and communities with different sensing expertise levels in a modular, expandable and intuitive way . We have made a selection of sensors to get started with the most common use cases. How to get them? If you are interested, and have an use case or project that needs of some sensors, support or maybe some enclosures, this is for you! We will be creating a series of open calls . Sensor packs \u00b6 Citizen Kit : for those cases where a low cost sensor is needed for basic monitoring of climate metrics, or some basic air pollution setups Citizen Water Kit : a combination of water and air sensors, to choose between pH and ORP for water sensors, water temperature, and adding an air temperature and humidity Citizen Water Station : a flexible solution for water monitoring. Includes metrics like pH, DO, Conductivity, ORP and submergible temperature, with optional GPS Kit Use Available units Metrics Power Battery only? Citizen Kit Air quality 60-90 T, H, P, PM, Noise, Light and VOCs USB or AC with Power supply Yes Basic Water Station Air/Water 40-50 Air T, H; Water pH, ORP or T USB or AC with Power supply Yes Advanced Water Station Water 16 Water pH, ORP, DO, COND, T and optional GPS USB or AC with Power supply No (yes with external battery pack) Looking for mobile measurements? We also include GPS readings in some of the sensors, to be able to measure dynamically like in the Pati Cientific IDs for platform registration \u00b6 Kit Extras ID Metrics Citizen Kit None 26 (default) T, H, P, PM, Noise, Light and VOCs Citizen Kit with External T/H Probe T/H Probe 38 T, H, P, PM, Noise, Light and VOCs and external T/H probe Citizen Kit with GPS GPS 38 T, H, P, PM, Noise, Light and VOCs and GPS Metrics Basic Water Kit Reduced Water sensors 31 One of pH, ORP, Temp Advanced Water Station Water sensors and GPS (optional) 31 Some or all of pH, ORP, DO, COND, T and optional GPS","title":"Index"},{"location":"Units/#sensors","text":"The MINKE sensor portfolio is a selection of sensors from the Smart Citizen project , and aims to create a boilerplate for individuals and communities with different sensing expertise levels in a modular, expandable and intuitive way . We have made a selection of sensors to get started with the most common use cases. How to get them? If you are interested, and have an use case or project that needs of some sensors, support or maybe some enclosures, this is for you! We will be creating a series of open calls .","title":"Sensors"},{"location":"Units/#sensor-packs","text":"Citizen Kit : for those cases where a low cost sensor is needed for basic monitoring of climate metrics, or some basic air pollution setups Citizen Water Kit : a combination of water and air sensors, to choose between pH and ORP for water sensors, water temperature, and adding an air temperature and humidity Citizen Water Station : a flexible solution for water monitoring. Includes metrics like pH, DO, Conductivity, ORP and submergible temperature, with optional GPS Kit Use Available units Metrics Power Battery only? Citizen Kit Air quality 60-90 T, H, P, PM, Noise, Light and VOCs USB or AC with Power supply Yes Basic Water Station Air/Water 40-50 Air T, H; Water pH, ORP or T USB or AC with Power supply Yes Advanced Water Station Water 16 Water pH, ORP, DO, COND, T and optional GPS USB or AC with Power supply No (yes with external battery pack) Looking for mobile measurements? We also include GPS readings in some of the sensors, to be able to measure dynamically like in the Pati Cientific","title":"Sensor packs"},{"location":"Units/#ids-for-platform-registration","text":"Kit Extras ID Metrics Citizen Kit None 26 (default) T, H, P, PM, Noise, Light and VOCs Citizen Kit with External T/H Probe T/H Probe 38 T, H, P, PM, Noise, Light and VOCs and external T/H probe Citizen Kit with GPS GPS 38 T, H, P, PM, Noise, Light and VOCs and GPS Metrics Basic Water Kit Reduced Water sensors 31 One of pH, ORP, Temp Advanced Water Station Water sensors and GPS (optional) 31 Some or all of pH, ORP, DO, COND, T and optional GPS","title":"IDs for platform registration"},{"location":"Units/Citizen%20Kit/","text":"Smart Citizen Kit \u00b6 Quick links Buy: seeedstudio.com Installation: start.smartcitizen.me Platform: smartcitizen.me/kits API: api.smartcitizen.me Discuss: forum.smartcitizen.me Support: support@smartcitizen.me Something big?: info@smartcitizen.me Platform status: status.smartcitizen.me Enclosures: enclosures.smartcitizen.me What is the Smart Citizen Kit? \u00b6 The Smart Citizen Kit ( SCK for short, also just the Kit ) is an open hardware solution for environmental monitoring designed to be used by anyone (you name it: citizen scientists , educators , researchers , etc.). It can take measurements of many variables, such as particulate matter, noise, light, and temperature, among many others. The latest version is the SCK2.3 (see the other versions below). More on the use cases If you want to learn more about how to use the Smart Citizen Kit, visit our resources page. The SCK is designed in a modular way, with a central data logger (the Data Board ) with Wi-Fi connectivity, a micro SD-card slot, a micro USB, and a battery connector. Various sensors can be connected, either via the Urban Board , featuring different onboard sensors and a particulate matter sensor connector, or through the Auxiliary port . The SCK can send the data to the Smart Citizen Platform , which offers a web interface to vizualise data and an open API that can be interfaced with many other tools . The SCK is designed to be flexible , and many custom configurations are possible by adding various third-party sensors . This can be the starting point for more complex setups, monitoring air , soil, or water parameters. Any custom configuration based on the SCK also connects to the Smart Citizen Platform with all features freely available. Some more complex configurations are what we call the Smart Citizen Stations . Want to contribute? The whole project is open source, and it makes us very happy when we see contributions to it! Feel free to check, copy, and modify the firmware/hardware repository or any other ! Versions \u00b6 Most of the documentation applies to the SCK2.1, the SCK2.2, and the SCK2.3 versions . SCK2.3 SCK2.2 SCK2.1 Differences A summary of the differences : Data Board : 2.1, 2.2, and 2.3 are mostly the same. Only some tweaks on the silkscreen and passive components have changed. Urban Board : 2.1, 2.2, and 2.3 have many differences. From version 2.1 to 2.2, the PM sensor and pressure sensors have changed. We have added a UV Sensor, and removed the tVOC/eCO2 sensor, as the manufacturer (AMS) discontinued it. The rest has stayed the same (noise, light, temperature, and humidity). The 2.3 version features a small hole to reset the Data board from outside the enclosure and the pressure sensor has changed again, back to the one we had in the SCK2.1. A note about versions and compatibility All the SCK2.X generations above 2.1 (included) are fully compatible regarding firmware, and their respective Urban Boards are fully compatible with any Data Board of the 2.X series (above and including 2.1). Measurements \u00b6 All the SCK2.X generations above 2.1 (included) measure at least air temperature, relative humidity, noise level, ambient light, barometric pressure, and particulate matter (PM). Sensor performance Make sure you visit the sensor knowledge page for more information! SCK 2.3 Measurement Units Sensor Air temperature \u00baC Sensirion SHT-31 Relative Humidity % REL Sensirion SHT-31 Noise level dBA Invensense ICS-434342 Ambient light lux Rohm BH1721FVC Barometric pressure kPa NXP MPL3115A26S UV-A, B, C uW/cm2 AMS AS7311 Particulate Matter PM1, PM2.5, PM4, PM10 \u00b5g/m3 Sensirion SEN5X NOx Index, VOCs Index (Optional) - Sensirion SEN54, 55 SCK 2.2 Measurement Units Sensor Air temperature \u00baC Sensirion SHT-31 Relative Humidity % REL Sensirion SHT-31 Noise level dBA Invensense ICS-434342 Ambient light lux Rohm BH1721FVC Barometric pressure kPa ST LPS33K UV-A, B, C uW/cm2 AMS AS7311 Particulate Matter PM1, PM2.5, PM4, PM10 \u00b5g/m3 Sensirion SEN5X NOx Index, VOCs Index (Optional) - Sensirion SEN54, 55 SCK 2.1 Measurement Units Sensor Air temperature \u00baC Sensirion SHT-31 Relative Humidity % REL Sensirion SHT-31 Noise level dBA Invensense ICS-434342 Ambient light lux Rohm BH1721FVC Barometric pressure kPa NXP MPL3115A26 Equivalent Carbon Dioxide ppm AMS CCS811 Volatile Organic Compounds ppb AMS CCS811 Particulate Matter PM1, PM2.5, PM10 \u00b5g/m3 Plantower PMS 5003 About the SEN5X SEN5X refers to the different configurations of the PM sensors in that series: SEN50 , SEN54 , SEN55 . We chose the SEN50 since it offers a good, cheap solution to measure PM. The SEN55 and the SEN54 are also compatible using the same connector in both the SCK2.2 and SCK2.3! The SEN50 measures only PM, the SEN54 PM and NOx index, and the SEN55 PM, NOx and VOC indexes. Installation instructions \u00b6 The SCK comes almost ready to be used: You can head over to start the onboarding at start.smartcitizen.me for all the setup instructions: Detailed guide Have a look at this guide for a step-by-step installation. If you select the Wi-Fi option, data will be available on the Smart Citizen Platform . You can explore the data on the platform or download it, either using the CSV Download option or the API . If you prefer to work Offline , data will be available on the SD card in CSV format. Internal memory An additional data collection feature, used in both online and offline options, is the internal memory . This feature saves data regardless of the mode configured, using limited internal memory to ensure no data gets lost. The Kit will automatically publish or store new data once the primary data storage solution is functional again. Enclosures \u00b6 If you want to leave the SCK outdoors, protect the electronics. There are plenty of freely available designs on our enclosures repository . We have a wide range of open source designs that you can 3D print and build yourself, saving some industrial plastic manufacturing in the process. If you don\u2019t have a 3D printer, you can always find a Fab Lab near you and once the enclosure\u2019s use has run its course, you can repurpose it to make more 3D printing filament! Want to contribute? Or buy one? Visit the Smart Citizen Enclosures repository to download, modify, or add your own! Also, make sure you read this fantastic summary on how to waterproof sensors. The enclosure is not available for purchases through official channels, but for large orders, we can provide it from the Fab Lab Barcelona sales channel . Deployment tips \u00b6 SCK2.3 needs a battery Due to the power needs of the SCK2.3 (and SCK2.2), it always needs a battery connected. Some basic deployment tips: Try to keep the SCK continuously powered if it is installed in a fixed location. Avoid using the SCK in places with high humidity or large amounts of dust; otherwise, clean/check the device periodically to prevent potential issues. Avoid covering the sensors, especially the PM sensor. Deploy the SCK facing downwards if outdoors, so that dust doesn't accumulate on the sensors. Avoid direct airflow towards the sensors; if exposed under flow conditions, keep the flow parallel to the sensor surfaces. Avoid exhaust from air conditioning units, kitchens, etc. Protect the sensors from moisture using filtering foam, nail polish, or both to cover the sensor pads (see here ).","title":"Citizen Kit"},{"location":"Units/Citizen%20Kit/#smart-citizen-kit","text":"Quick links Buy: seeedstudio.com Installation: start.smartcitizen.me Platform: smartcitizen.me/kits API: api.smartcitizen.me Discuss: forum.smartcitizen.me Support: support@smartcitizen.me Something big?: info@smartcitizen.me Platform status: status.smartcitizen.me Enclosures: enclosures.smartcitizen.me","title":"Smart Citizen Kit"},{"location":"Units/Citizen%20Kit/#what-is-the-smart-citizen-kit","text":"The Smart Citizen Kit ( SCK for short, also just the Kit ) is an open hardware solution for environmental monitoring designed to be used by anyone (you name it: citizen scientists , educators , researchers , etc.). It can take measurements of many variables, such as particulate matter, noise, light, and temperature, among many others. The latest version is the SCK2.3 (see the other versions below). More on the use cases If you want to learn more about how to use the Smart Citizen Kit, visit our resources page. The SCK is designed in a modular way, with a central data logger (the Data Board ) with Wi-Fi connectivity, a micro SD-card slot, a micro USB, and a battery connector. Various sensors can be connected, either via the Urban Board , featuring different onboard sensors and a particulate matter sensor connector, or through the Auxiliary port . The SCK can send the data to the Smart Citizen Platform , which offers a web interface to vizualise data and an open API that can be interfaced with many other tools . The SCK is designed to be flexible , and many custom configurations are possible by adding various third-party sensors . This can be the starting point for more complex setups, monitoring air , soil, or water parameters. Any custom configuration based on the SCK also connects to the Smart Citizen Platform with all features freely available. Some more complex configurations are what we call the Smart Citizen Stations . Want to contribute? The whole project is open source, and it makes us very happy when we see contributions to it! Feel free to check, copy, and modify the firmware/hardware repository or any other !","title":"What is the Smart Citizen Kit?"},{"location":"Units/Citizen%20Kit/#versions","text":"Most of the documentation applies to the SCK2.1, the SCK2.2, and the SCK2.3 versions . SCK2.3 SCK2.2 SCK2.1 Differences A summary of the differences : Data Board : 2.1, 2.2, and 2.3 are mostly the same. Only some tweaks on the silkscreen and passive components have changed. Urban Board : 2.1, 2.2, and 2.3 have many differences. From version 2.1 to 2.2, the PM sensor and pressure sensors have changed. We have added a UV Sensor, and removed the tVOC/eCO2 sensor, as the manufacturer (AMS) discontinued it. The rest has stayed the same (noise, light, temperature, and humidity). The 2.3 version features a small hole to reset the Data board from outside the enclosure and the pressure sensor has changed again, back to the one we had in the SCK2.1. A note about versions and compatibility All the SCK2.X generations above 2.1 (included) are fully compatible regarding firmware, and their respective Urban Boards are fully compatible with any Data Board of the 2.X series (above and including 2.1).","title":"Versions"},{"location":"Units/Citizen%20Kit/#measurements","text":"All the SCK2.X generations above 2.1 (included) measure at least air temperature, relative humidity, noise level, ambient light, barometric pressure, and particulate matter (PM). Sensor performance Make sure you visit the sensor knowledge page for more information! SCK 2.3 Measurement Units Sensor Air temperature \u00baC Sensirion SHT-31 Relative Humidity % REL Sensirion SHT-31 Noise level dBA Invensense ICS-434342 Ambient light lux Rohm BH1721FVC Barometric pressure kPa NXP MPL3115A26S UV-A, B, C uW/cm2 AMS AS7311 Particulate Matter PM1, PM2.5, PM4, PM10 \u00b5g/m3 Sensirion SEN5X NOx Index, VOCs Index (Optional) - Sensirion SEN54, 55 SCK 2.2 Measurement Units Sensor Air temperature \u00baC Sensirion SHT-31 Relative Humidity % REL Sensirion SHT-31 Noise level dBA Invensense ICS-434342 Ambient light lux Rohm BH1721FVC Barometric pressure kPa ST LPS33K UV-A, B, C uW/cm2 AMS AS7311 Particulate Matter PM1, PM2.5, PM4, PM10 \u00b5g/m3 Sensirion SEN5X NOx Index, VOCs Index (Optional) - Sensirion SEN54, 55 SCK 2.1 Measurement Units Sensor Air temperature \u00baC Sensirion SHT-31 Relative Humidity % REL Sensirion SHT-31 Noise level dBA Invensense ICS-434342 Ambient light lux Rohm BH1721FVC Barometric pressure kPa NXP MPL3115A26 Equivalent Carbon Dioxide ppm AMS CCS811 Volatile Organic Compounds ppb AMS CCS811 Particulate Matter PM1, PM2.5, PM10 \u00b5g/m3 Plantower PMS 5003 About the SEN5X SEN5X refers to the different configurations of the PM sensors in that series: SEN50 , SEN54 , SEN55 . We chose the SEN50 since it offers a good, cheap solution to measure PM. The SEN55 and the SEN54 are also compatible using the same connector in both the SCK2.2 and SCK2.3! The SEN50 measures only PM, the SEN54 PM and NOx index, and the SEN55 PM, NOx and VOC indexes.","title":"Measurements"},{"location":"Units/Citizen%20Kit/#installation-instructions","text":"The SCK comes almost ready to be used: You can head over to start the onboarding at start.smartcitizen.me for all the setup instructions: Detailed guide Have a look at this guide for a step-by-step installation. If you select the Wi-Fi option, data will be available on the Smart Citizen Platform . You can explore the data on the platform or download it, either using the CSV Download option or the API . If you prefer to work Offline , data will be available on the SD card in CSV format. Internal memory An additional data collection feature, used in both online and offline options, is the internal memory . This feature saves data regardless of the mode configured, using limited internal memory to ensure no data gets lost. The Kit will automatically publish or store new data once the primary data storage solution is functional again.","title":"Installation instructions"},{"location":"Units/Citizen%20Kit/#enclosures","text":"If you want to leave the SCK outdoors, protect the electronics. There are plenty of freely available designs on our enclosures repository . We have a wide range of open source designs that you can 3D print and build yourself, saving some industrial plastic manufacturing in the process. If you don\u2019t have a 3D printer, you can always find a Fab Lab near you and once the enclosure\u2019s use has run its course, you can repurpose it to make more 3D printing filament! Want to contribute? Or buy one? Visit the Smart Citizen Enclosures repository to download, modify, or add your own! Also, make sure you read this fantastic summary on how to waterproof sensors. The enclosure is not available for purchases through official channels, but for large orders, we can provide it from the Fab Lab Barcelona sales channel .","title":"Enclosures"},{"location":"Units/Citizen%20Kit/#deployment-tips","text":"SCK2.3 needs a battery Due to the power needs of the SCK2.3 (and SCK2.2), it always needs a battery connected. Some basic deployment tips: Try to keep the SCK continuously powered if it is installed in a fixed location. Avoid using the SCK in places with high humidity or large amounts of dust; otherwise, clean/check the device periodically to prevent potential issues. Avoid covering the sensors, especially the PM sensor. Deploy the SCK facing downwards if outdoors, so that dust doesn't accumulate on the sensors. Avoid direct airflow towards the sensors; if exposed under flow conditions, keep the flow parallel to the sensor surfaces. Avoid exhaust from air conditioning units, kitchens, etc. Protect the sensors from moisture using filtering foam, nail polish, or both to cover the sensor pads (see here ).","title":"Deployment tips"},{"location":"Units/Citizen%20Water%20Kit/","text":"One-Sensor Water Station \u00b6 Grade : intermediate The One-Sensor Water Station is meant to measure one physico-chemical parameter at a time. Choose from pH, Temperature, Dissolved Oxygen, Conductivity or ORP. One-Sensor pH Water Station Measurements \u00b6 Measurements on the water stations can be 1 of the ones below: Measurement Units Sensor Temperature \u00baC Atlas PT-1000, PT-100 probes pH - Atlas pH probes Conductivity uS/cm Atlas Conductivity probes Dissolved Oxygen mg/l Atlas DO probes ORP mV Atlas ORP probes In the image at the top of the page you can see an example of a One-Sensor Water Station that measures pH, and below you can see another that measures temperature. One-Sensor Temperature Water Station Technical specifications \u00b6 Dimensions and weight \u00b6 Version Dimensions Weight Main Box Probe support Design files If you are looking for the design files about the Smart Citizen Station, take a look at the enclosures repository . Power \u00b6 Currently, the Smart Citizen Air Quality Stations have only been tested with an external power supply (230VAC to 5VDC), with a small battery for backup during power brownouts. Due to the number of sensors, and depending on the configuration the solution is normally not meant for long term deployment with just battery power. For detailed specifications of the power supply, visit the power supply section . Power DC Voltage 5V DC Current 2A recommended AC Voltage 230V into the Power Supply AC Current <0.16A into the Power Supply Battery or solar operation? The Station currently supports battery operation only for short periods of time (<2d days). Depending on the location, solar power might be available, but we do not recommend it unless you are willing to experiment . Connectivity \u00b6 Similar to the Smart Citizen Kit if you want to have your data online, the Smart Citizen Air Quality Station requires a Wi-Fi connection to report data to the platform . If not, the unit can also store data locally on its onboard sd-card. Read more about the operation modes and the supported networks . Preparing the probes \u00b6 Atlas Scientific has great documents on how to use their probes, and maintain them (all the images below are theirs). Many other probes by other manufacturers will have the same issues, as they are based on the similar working principles. Below we compile some guidelines specific to the sensors. Make sure you also follow the instructions on how to calibrate them as specified for each probe . All probes \u00b6 Most of the probes will generate potassium chloride (KCl) crystals that are fully harmless. Make sure you clean them with distilled water before use. _Image Credit: Atlas Scientific Once you are done using them, the probes that have a protective electrolyte solution (pH and ORP) will need to be put back in. Dissolved Oxygen \u00b6 The dissolved oxygen probe needs to be actively maintained. The datasheet has a good information on how to maintain and clean the probe. Here is a small brief: When you open the probe the first time, make sure you only open the rubber cap, and not any sensor component such as the membrane cap _Image Credit: Atlas Scientific The sensor has an electrolyte solution inside to support the chemical reaction in the electrodes. This solution depletes over time, as the sensor is used and it will generate a solid residue that needs to be cleaned periodically (roughly every 6 months for the Mini DO probe, but better to check) _Image Credit: Atlas Scientific You can recondition the sensor with a small file and remove all Zinc Oxyde. Make sure that the probe membrane is cleaned with a very soft brush both inside and outside. The membrane can be replaced if damaged. Make sure it is in good conditions because it will otherwise leak the electrolyte solution and the sensor will work erratically. _Image Credit: Atlas Scientific _Image Credit: Atlas Scientific First time use? Do it Even it the sensor is brand new, we recommend you follow this process to avoid issues. pH and ORP \u00b6 No particular consideration for these probes, other than they are very delicate: _Image Credit: Atlas Scientific Storage solution Both probes need storage solution in a small soaker bottle to prevent it from drying out. If the probe is not being used you need to put the soaker bottle back on. Maintenance \u00b6 Make sure that the sensors are cleaned frequently, specially if deployed on the field. In some cases, sensors will be affected by biofouling and they will need more or less often cleanup - in some cases weekly! Public Domain, Link","title":"Citizen Water Kit"},{"location":"Units/Citizen%20Water%20Kit/#one-sensor-water-station","text":"Grade : intermediate The One-Sensor Water Station is meant to measure one physico-chemical parameter at a time. Choose from pH, Temperature, Dissolved Oxygen, Conductivity or ORP. One-Sensor pH Water Station","title":"One-Sensor Water Station"},{"location":"Units/Citizen%20Water%20Kit/#measurements","text":"Measurements on the water stations can be 1 of the ones below: Measurement Units Sensor Temperature \u00baC Atlas PT-1000, PT-100 probes pH - Atlas pH probes Conductivity uS/cm Atlas Conductivity probes Dissolved Oxygen mg/l Atlas DO probes ORP mV Atlas ORP probes In the image at the top of the page you can see an example of a One-Sensor Water Station that measures pH, and below you can see another that measures temperature. One-Sensor Temperature Water Station","title":"Measurements"},{"location":"Units/Citizen%20Water%20Kit/#technical-specifications","text":"","title":"Technical specifications"},{"location":"Units/Citizen%20Water%20Kit/#dimensions-and-weight","text":"Version Dimensions Weight Main Box Probe support Design files If you are looking for the design files about the Smart Citizen Station, take a look at the enclosures repository .","title":"Dimensions and weight"},{"location":"Units/Citizen%20Water%20Kit/#power","text":"Currently, the Smart Citizen Air Quality Stations have only been tested with an external power supply (230VAC to 5VDC), with a small battery for backup during power brownouts. Due to the number of sensors, and depending on the configuration the solution is normally not meant for long term deployment with just battery power. For detailed specifications of the power supply, visit the power supply section . Power DC Voltage 5V DC Current 2A recommended AC Voltage 230V into the Power Supply AC Current <0.16A into the Power Supply Battery or solar operation? The Station currently supports battery operation only for short periods of time (<2d days). Depending on the location, solar power might be available, but we do not recommend it unless you are willing to experiment .","title":"Power"},{"location":"Units/Citizen%20Water%20Kit/#connectivity","text":"Similar to the Smart Citizen Kit if you want to have your data online, the Smart Citizen Air Quality Station requires a Wi-Fi connection to report data to the platform . If not, the unit can also store data locally on its onboard sd-card. Read more about the operation modes and the supported networks .","title":"Connectivity"},{"location":"Units/Citizen%20Water%20Kit/#preparing-the-probes","text":"Atlas Scientific has great documents on how to use their probes, and maintain them (all the images below are theirs). Many other probes by other manufacturers will have the same issues, as they are based on the similar working principles. Below we compile some guidelines specific to the sensors. Make sure you also follow the instructions on how to calibrate them as specified for each probe .","title":"Preparing the probes"},{"location":"Units/Citizen%20Water%20Kit/#all-probes","text":"Most of the probes will generate potassium chloride (KCl) crystals that are fully harmless. Make sure you clean them with distilled water before use. _Image Credit: Atlas Scientific Once you are done using them, the probes that have a protective electrolyte solution (pH and ORP) will need to be put back in.","title":"All probes"},{"location":"Units/Citizen%20Water%20Kit/#dissolved-oxygen","text":"The dissolved oxygen probe needs to be actively maintained. The datasheet has a good information on how to maintain and clean the probe. Here is a small brief: When you open the probe the first time, make sure you only open the rubber cap, and not any sensor component such as the membrane cap _Image Credit: Atlas Scientific The sensor has an electrolyte solution inside to support the chemical reaction in the electrodes. This solution depletes over time, as the sensor is used and it will generate a solid residue that needs to be cleaned periodically (roughly every 6 months for the Mini DO probe, but better to check) _Image Credit: Atlas Scientific You can recondition the sensor with a small file and remove all Zinc Oxyde. Make sure that the probe membrane is cleaned with a very soft brush both inside and outside. The membrane can be replaced if damaged. Make sure it is in good conditions because it will otherwise leak the electrolyte solution and the sensor will work erratically. _Image Credit: Atlas Scientific _Image Credit: Atlas Scientific First time use? Do it Even it the sensor is brand new, we recommend you follow this process to avoid issues.","title":"Dissolved Oxygen"},{"location":"Units/Citizen%20Water%20Kit/#ph-and-orp","text":"No particular consideration for these probes, other than they are very delicate: _Image Credit: Atlas Scientific Storage solution Both probes need storage solution in a small soaker bottle to prevent it from drying out. If the probe is not being used you need to put the soaker bottle back on.","title":"pH and ORP"},{"location":"Units/Citizen%20Water%20Kit/#maintenance","text":"Make sure that the sensors are cleaned frequently, specially if deployed on the field. In some cases, sensors will be affected by biofouling and they will need more or less often cleanup - in some cases weekly! Public Domain, Link","title":"Maintenance"},{"location":"Units/Citizen%20Water%20Station/","text":"Multi-Sensor Water Station \u00b6 Grade : advanced The Water Station is a multiparametric water unit, capable of measuring pH, Temperature, Dissolved Oxygen, Conductivity and ORP. Multi-Sensor Water Station Measurements \u00b6 Measurements on the water stations can be from 2, to all 5 from below: Measurement Units Sensor Temperature \u00baC Atlas PT-1000, PT-100 probes pH - Atlas pH probes Conductivity uS/cm Atlas Conductivity probes Dissolved Oxygen mg/l Atlas DO probes ORP mV Atlas ORP probes Technical specifications \u00b6 Dimensions and weight \u00b6 Version Dimensions Weight Main Box Probe support Design files If you are looking for the design files about the Smart Citizen Station, take a look at the enclosures repository . Power \u00b6 Currently, the Smart Citizen Air Quality Stations have only been tested with an external power supply (230VAC to 5VDC), with a small battery for backup during power brownouts. Due to the number of sensors, and depending on the configuration the solution is normally not meant for long term deployment with just battery power. For detailed specifications of the power supply, visit the power supply section . Power DC Voltage 5V DC Current 2A recommended AC Voltage 230V into the Power Supply AC Current <0.16A into the Power Supply Battery or solar operation? The Station currently supports battery operation only for short periods of time (<2d days). Depending on the location, solar power might be available, but we do not recommend it unless you are willing to experiment . Connectivity \u00b6 Similar to the Smart Citizen Kit if you want to have your data online, the Smart Citizen Air Quality Station requires a Wi-Fi connection to report data to the platform . If not, the unit can also store data locally on its onboard sd-card. Read more about the operation modes and the supported networks . Preparing the probes \u00b6 Atlas Scientific has great documents on how to use their probes, and maintain them (all the images below are theirs). Many other probes by other manufacturers will have the same issues, as they are based on the similar working principles. Below we compile some guidelines specific to the sensors. Make sure you also follow the instructions on how to calibrate them as specified for each probe . All probes \u00b6 Most of the probes will generate potassium chloride (KCl) crystals that are fully harmless. Make sure you clean them with distilled water before use. _Image Credit: Atlas Scientific Once you are done using them, the probes that have a protective electrolyte solution (pH and ORP) will need to be put back in. Dissolved Oxygen \u00b6 The dissolved oxygen probe needs to be actively maintained. The datasheet has a good information on how to maintain and clean the probe. Here is a small brief: When you open the probe the first time, make sure you only open the rubber cap, and not any sensor component such as the membrane cap _Image Credit: Atlas Scientific The sensor has an electrolyte solution inside to support the chemical reaction in the electrodes. This solution depletes over time, as the sensor is used and it will generate a solid residue that needs to be cleaned periodically (roughly every 6 months for the Mini DO probe, but better to check) _Image Credit: Atlas Scientific You can recondition the sensor with a small file and remove all Zinc Oxyde. Make sure that the probe membrane is cleaned with a very soft brush both inside and outside. The membrane can be replaced if damaged. Make sure it is in good conditions because it will otherwise leak the electrolyte solution and the sensor will work erratically. _Image Credit: Atlas Scientific _Image Credit: Atlas Scientific First time use? Do it Even it the sensor is brand new, we recommend you follow this process to avoid issues. pH and ORP \u00b6 No particular consideration for these probes, other than they are very delicate: _Image Credit: Atlas Scientific Storage solution Both probes need storage solution in a small soaker bottle to prevent it from drying out. If the probe is not being used you need to put the soaker bottle back on. Maintenance \u00b6 Make sure that the sensors are cleaned frequently, specially if deployed on the field. In some cases, sensors will be affected by biofouling and they will need more or less often cleanup - in some cases weekly! Public Domain, Link","title":"Citizen Water Station"},{"location":"Units/Citizen%20Water%20Station/#multi-sensor-water-station","text":"Grade : advanced The Water Station is a multiparametric water unit, capable of measuring pH, Temperature, Dissolved Oxygen, Conductivity and ORP. Multi-Sensor Water Station","title":"Multi-Sensor Water Station"},{"location":"Units/Citizen%20Water%20Station/#measurements","text":"Measurements on the water stations can be from 2, to all 5 from below: Measurement Units Sensor Temperature \u00baC Atlas PT-1000, PT-100 probes pH - Atlas pH probes Conductivity uS/cm Atlas Conductivity probes Dissolved Oxygen mg/l Atlas DO probes ORP mV Atlas ORP probes","title":"Measurements"},{"location":"Units/Citizen%20Water%20Station/#technical-specifications","text":"","title":"Technical specifications"},{"location":"Units/Citizen%20Water%20Station/#dimensions-and-weight","text":"Version Dimensions Weight Main Box Probe support Design files If you are looking for the design files about the Smart Citizen Station, take a look at the enclosures repository .","title":"Dimensions and weight"},{"location":"Units/Citizen%20Water%20Station/#power","text":"Currently, the Smart Citizen Air Quality Stations have only been tested with an external power supply (230VAC to 5VDC), with a small battery for backup during power brownouts. Due to the number of sensors, and depending on the configuration the solution is normally not meant for long term deployment with just battery power. For detailed specifications of the power supply, visit the power supply section . Power DC Voltage 5V DC Current 2A recommended AC Voltage 230V into the Power Supply AC Current <0.16A into the Power Supply Battery or solar operation? The Station currently supports battery operation only for short periods of time (<2d days). Depending on the location, solar power might be available, but we do not recommend it unless you are willing to experiment .","title":"Power"},{"location":"Units/Citizen%20Water%20Station/#connectivity","text":"Similar to the Smart Citizen Kit if you want to have your data online, the Smart Citizen Air Quality Station requires a Wi-Fi connection to report data to the platform . If not, the unit can also store data locally on its onboard sd-card. Read more about the operation modes and the supported networks .","title":"Connectivity"},{"location":"Units/Citizen%20Water%20Station/#preparing-the-probes","text":"Atlas Scientific has great documents on how to use their probes, and maintain them (all the images below are theirs). Many other probes by other manufacturers will have the same issues, as they are based on the similar working principles. Below we compile some guidelines specific to the sensors. Make sure you also follow the instructions on how to calibrate them as specified for each probe .","title":"Preparing the probes"},{"location":"Units/Citizen%20Water%20Station/#all-probes","text":"Most of the probes will generate potassium chloride (KCl) crystals that are fully harmless. Make sure you clean them with distilled water before use. _Image Credit: Atlas Scientific Once you are done using them, the probes that have a protective electrolyte solution (pH and ORP) will need to be put back in.","title":"All probes"},{"location":"Units/Citizen%20Water%20Station/#dissolved-oxygen","text":"The dissolved oxygen probe needs to be actively maintained. The datasheet has a good information on how to maintain and clean the probe. Here is a small brief: When you open the probe the first time, make sure you only open the rubber cap, and not any sensor component such as the membrane cap _Image Credit: Atlas Scientific The sensor has an electrolyte solution inside to support the chemical reaction in the electrodes. This solution depletes over time, as the sensor is used and it will generate a solid residue that needs to be cleaned periodically (roughly every 6 months for the Mini DO probe, but better to check) _Image Credit: Atlas Scientific You can recondition the sensor with a small file and remove all Zinc Oxyde. Make sure that the probe membrane is cleaned with a very soft brush both inside and outside. The membrane can be replaced if damaged. Make sure it is in good conditions because it will otherwise leak the electrolyte solution and the sensor will work erratically. _Image Credit: Atlas Scientific _Image Credit: Atlas Scientific First time use? Do it Even it the sensor is brand new, we recommend you follow this process to avoid issues.","title":"Dissolved Oxygen"},{"location":"Units/Citizen%20Water%20Station/#ph-and-orp","text":"No particular consideration for these probes, other than they are very delicate: _Image Credit: Atlas Scientific Storage solution Both probes need storage solution in a small soaker bottle to prevent it from drying out. If the probe is not being used you need to put the soaker bottle back on.","title":"pH and ORP"},{"location":"Units/Citizen%20Water%20Station/#maintenance","text":"Make sure that the sensors are cleaned frequently, specially if deployed on the field. In some cases, sensors will be affected by biofouling and they will need more or less often cleanup - in some cases weekly! Public Domain, Link","title":"Maintenance"},{"location":"Webinars/","text":"Webinars \u00b6 We conducted a series of online webinars as part of the MINKE project . Basics \u00b6 These first four webinars offer a basic introduction to the SCK device, setting it up, and accessing the data you collect. Get the presentation notes on basic introductory topics Do you prefer to follow along with the presentation notes? Or would you just rather read through the notes on your own? We've got you covered. MINKE Webinar Basics - Online, 2022, presentation notes 1.1 What\u2019s in the box? \u00b6 1.2 Understanding your kit \u00b6 1.3 Collecting some data \u00b6 1.4 Accessing the data \u00b6 Advanced \u00b6 The five webinars grouped as \"Advanced\" dive deeper into topics including updating firmware, shell commands, and debugging tips. Get the presentation notes on more advanced topics Do you prefer to follow along with the presentation notes? Or would you just rather read through the notes on your own? We've got you covered. MINKE Webinar Advanced - Online, 2022, presentation notes 2.1 Updating the firmware \u00b6 2.2 Talking to your kit \u00b6 2.3 Shell Commands (Part 1) \u00b6 2.4 Shell Commands (Part 2) \u00b6 2.5 Debugging tips \u00b6 Water Metrics \u00b6 The five webinars cover everything about water sensors, including an introduction to the metrics and sensors, preparation of the probes, calibration, and deployment. Get the presentation notes on Water Metrics Do you prefer to follow along with the presentation notes? Or would you just rather read through the notes on your own? We've got you covered. MINKE Webinar Water Metrics - Online, 2022, presentation notes 3.1 Water sensors (Part 1) \u00b6 3.2 Water sensors (Part 2) \u00b6 3.3 Water sensors preparation \u00b6 3.4 Water sensors calibration \u00b6 3.5 Water sensors deployment \u00b6 Air Metrics \u00b6 These four webinars take a deeper dive into air sensors, including an introduction to the metrics and sensors, GPS and collecting data on the move, and other deployments. Get the presentation notes on Air Metrics Do you prefer to follow along with the presentation notes? Or would you just rather read through the notes on your own? We've got you covered. MINKE Webinar Air Metrics - Online, 2022, presentation notes 4.1 Air sensors (Part 1) \u00b6 4.2 Air sensors (Part 2) \u00b6 4.3 Measuring on the move \u00b6 4.4 Air sensor deployment \u00b6 Data Analysis (Part 1) \u00b6 Dive into data with these six webinars starting out with visualizing data on the dashboard, getting started with R and python, and data visualization using python. Get the presentation notes on Data Analysis (Part 1) Do you prefer to follow along with the presentation notes? Or would you just rather read through the notes on your own? We've got you covered. MINKE Webinar Data Analysis (1) - Online, 2022, presentation notes 5.1 Data access basics \u00b6 5.2 Web Visualization and dashboards \u00b6 5.3 Getting started with data \u00b6 5.4 Getting started with R \u00b6 5.5 Getting started with python \u00b6 5.6 Visualizing data in python \u00b6 Data Analysis (Part 2) \u00b6 Dive even further into data in these four webinars covering more on data in R and python, loading data from an SD card using python, processing sensor data in python, and project legacy through digital presence. Get the presentation notes on Data Analysis (Part 2) Do you prefer to follow along with the presentation notes? Or would you just rather read through the notes on your own? We've got you covered. MINKE Webinar Data Analysis (2) - Online, 2022, presentation notes 6.1 More on data in R and python \u00b6 6.2 Loading data from SD Card in python \u00b6 6.3 Processing sensor data in python \u00b6 6.4 Project legacy and digital presence \u00b6","title":"Webinars"},{"location":"Webinars/#webinars","text":"We conducted a series of online webinars as part of the MINKE project .","title":"Webinars"},{"location":"Webinars/#basics","text":"These first four webinars offer a basic introduction to the SCK device, setting it up, and accessing the data you collect. Get the presentation notes on basic introductory topics Do you prefer to follow along with the presentation notes? Or would you just rather read through the notes on your own? We've got you covered. MINKE Webinar Basics - Online, 2022, presentation notes","title":"Basics"},{"location":"Webinars/#11-whats-in-the-box","text":"","title":"1.1 What\u2019s in the box?"},{"location":"Webinars/#12-understanding-your-kit","text":"","title":"1.2 Understanding your kit"},{"location":"Webinars/#13-collecting-some-data","text":"","title":"1.3 Collecting some data"},{"location":"Webinars/#14-accessing-the-data","text":"","title":"1.4 Accessing the data"},{"location":"Webinars/#advanced","text":"The five webinars grouped as \"Advanced\" dive deeper into topics including updating firmware, shell commands, and debugging tips. Get the presentation notes on more advanced topics Do you prefer to follow along with the presentation notes? Or would you just rather read through the notes on your own? We've got you covered. MINKE Webinar Advanced - Online, 2022, presentation notes","title":"Advanced"},{"location":"Webinars/#21-updating-the-firmware","text":"","title":"2.1 Updating the firmware"},{"location":"Webinars/#22-talking-to-your-kit","text":"","title":"2.2 Talking to your kit"},{"location":"Webinars/#23-shell-commands-part-1","text":"","title":"2.3 Shell Commands (Part 1)"},{"location":"Webinars/#24-shell-commands-part-2","text":"","title":"2.4 Shell Commands (Part 2)"},{"location":"Webinars/#25-debugging-tips","text":"","title":"2.5 Debugging tips"},{"location":"Webinars/#water-metrics","text":"The five webinars cover everything about water sensors, including an introduction to the metrics and sensors, preparation of the probes, calibration, and deployment. Get the presentation notes on Water Metrics Do you prefer to follow along with the presentation notes? Or would you just rather read through the notes on your own? We've got you covered. MINKE Webinar Water Metrics - Online, 2022, presentation notes","title":"Water Metrics"},{"location":"Webinars/#31-water-sensors-part-1","text":"","title":"3.1 Water sensors (Part 1)"},{"location":"Webinars/#32-water-sensors-part-2","text":"","title":"3.2 Water sensors (Part 2)"},{"location":"Webinars/#33-water-sensors-preparation","text":"","title":"3.3 Water sensors preparation"},{"location":"Webinars/#34-water-sensors-calibration","text":"","title":"3.4 Water sensors calibration"},{"location":"Webinars/#35-water-sensors-deployment","text":"","title":"3.5 Water sensors deployment"},{"location":"Webinars/#air-metrics","text":"These four webinars take a deeper dive into air sensors, including an introduction to the metrics and sensors, GPS and collecting data on the move, and other deployments. Get the presentation notes on Air Metrics Do you prefer to follow along with the presentation notes? Or would you just rather read through the notes on your own? We've got you covered. MINKE Webinar Air Metrics - Online, 2022, presentation notes","title":"Air Metrics"},{"location":"Webinars/#41-air-sensors-part-1","text":"","title":"4.1 Air sensors (Part 1)"},{"location":"Webinars/#42-air-sensors-part-2","text":"","title":"4.2 Air sensors (Part 2)"},{"location":"Webinars/#43-measuring-on-the-move","text":"","title":"4.3 Measuring on the move"},{"location":"Webinars/#44-air-sensor-deployment","text":"","title":"4.4 Air sensor deployment"},{"location":"Webinars/#data-analysis-part-1","text":"Dive into data with these six webinars starting out with visualizing data on the dashboard, getting started with R and python, and data visualization using python. Get the presentation notes on Data Analysis (Part 1) Do you prefer to follow along with the presentation notes? Or would you just rather read through the notes on your own? We've got you covered. MINKE Webinar Data Analysis (1) - Online, 2022, presentation notes","title":"Data Analysis (Part 1)"},{"location":"Webinars/#51-data-access-basics","text":"","title":"5.1 Data access basics"},{"location":"Webinars/#52-web-visualization-and-dashboards","text":"","title":"5.2 Web Visualization and dashboards"},{"location":"Webinars/#53-getting-started-with-data","text":"","title":"5.3 Getting started with data"},{"location":"Webinars/#54-getting-started-with-r","text":"","title":"5.4 Getting started with R"},{"location":"Webinars/#55-getting-started-with-python","text":"","title":"5.5 Getting started with python"},{"location":"Webinars/#56-visualizing-data-in-python","text":"","title":"5.6 Visualizing data in python"},{"location":"Webinars/#data-analysis-part-2","text":"Dive even further into data in these four webinars covering more on data in R and python, loading data from an SD card using python, processing sensor data in python, and project legacy through digital presence. Get the presentation notes on Data Analysis (Part 2) Do you prefer to follow along with the presentation notes? Or would you just rather read through the notes on your own? We've got you covered. MINKE Webinar Data Analysis (2) - Online, 2022, presentation notes","title":"Data Analysis (Part 2)"},{"location":"Webinars/#61-more-on-data-in-r-and-python","text":"","title":"6.1 More on data in R and python"},{"location":"Webinars/#62-loading-data-from-sd-card-in-python","text":"","title":"6.2 Loading data from SD Card in python"},{"location":"Webinars/#63-processing-sensor-data-in-python","text":"","title":"6.3 Processing sensor data in python"},{"location":"Webinars/#64-project-legacy-and-digital-presence","text":"","title":"6.4 Project legacy and digital presence"},{"location":"includes/aq-stations/","text":"Air quality stations \u00b6 Hardware design \u00b6 A note about versions Some of the diagrams below are from older designs, but you they haven't changed much! Hopefully they are still understandable! The Stations should come assembled and ready to use. They consist of various parts: Enclosure and mounting system : for protection and support. Sensors module: contains the electronics and sensors, it can be accessed without having to uninstall the rain cover. Power supply : is separated from the main module, so that intervention in the sensors' area can be performed safely with a tangible desconection of the mains power. Enclosure and mounting system \u00b6 The enclosure holds the sensors in place and protects them against weather. A rain and sun radiation cover for additional protection can be used, which carries out the structural support of the station and protects the unit against rain, wind or heat. Flexible attachment This mounting is thought to work on a lampost, fence or wall. We recommend a somewhat flexible join (i.e. zip-ties) in case of windy locations. The enclosure can be installed using the mounting holes seen below. There is sufficient space to pass zip ties. If you want to use drills, we recommend at least 6mm screws (or 8mm) and to dissasemble the plastic cover from the sandwich pannel for safer installation. Deployment tips \u00b6 Below are some general guidelines for the installation of the device: Avoid areas with moist accumulation when possible Avoid temperature and humidity transients Avoid covering the sensors in front of the sensors, specially the PM sensor Avoid covering the microphone and particles to go in the microphone port Avoid direct flow towards the sensors. If exposed under flow conditions, have the flow go parallel to the sensors' surface Despite the umbrella cover, sun radiation and transients are better to be avoided A good height for installing the sensors is somewhere between 2-3m, but it all depends on the case study and available support structures. Sensor placement \u00b6 The device should never be placed horizontally (wide side flat on a surface). This placement would cover completely the sensor inlets, or leave them exposed to dust accumulation. Likewise, the sensors, do not work properly on this configuration. For indoor placement, check the placement below: For outdoow placement, if you are using the umbrella, check the image below. Sensors should be facing down : Handling calibration data \u00b6 Some components of the Station have individual calibrations such as the Alphasense Electrochemical Sensors. For this reason, it's necessary to store the physical ID (hardware ID) of the Station alonside to the virtual device in the Smart Citizen Platform. The harwdware ID should normally be in a sticker to the enclosure both inside and outside and looks like this: SCAS2100XX This number is important to relate to the actual calibration values of the sensors, stored in the data repository . In order to postprocess the data and calculate pollutants, make sure that the Hardware ID is safely stored in the platform's device, by posting this data to postprocessing_info field of the device. You can follow these instructions to store the postprocessing_info of your device. All the data is sent in raw to the Smart Citizen Platform and it's then processed outside of the sensors themselves. Both raw, and processed data are kept on the platform and can be accessed at any time. Data can be published to other APIs or to Zenodo as well, in case of research projects that seek contribution to Open Science Datasets. More on the processing of the data Check this guide to learn more about how to postprocess the data of the sensors your own way.","title":"Air quality stations"},{"location":"includes/aq-stations/#air-quality-stations","text":"","title":"Air quality stations"},{"location":"includes/aq-stations/#hardware-design","text":"A note about versions Some of the diagrams below are from older designs, but you they haven't changed much! Hopefully they are still understandable! The Stations should come assembled and ready to use. They consist of various parts: Enclosure and mounting system : for protection and support. Sensors module: contains the electronics and sensors, it can be accessed without having to uninstall the rain cover. Power supply : is separated from the main module, so that intervention in the sensors' area can be performed safely with a tangible desconection of the mains power.","title":"Hardware design"},{"location":"includes/aq-stations/#enclosure-and-mounting-system","text":"The enclosure holds the sensors in place and protects them against weather. A rain and sun radiation cover for additional protection can be used, which carries out the structural support of the station and protects the unit against rain, wind or heat. Flexible attachment This mounting is thought to work on a lampost, fence or wall. We recommend a somewhat flexible join (i.e. zip-ties) in case of windy locations. The enclosure can be installed using the mounting holes seen below. There is sufficient space to pass zip ties. If you want to use drills, we recommend at least 6mm screws (or 8mm) and to dissasemble the plastic cover from the sandwich pannel for safer installation.","title":"Enclosure and mounting system"},{"location":"includes/aq-stations/#deployment-tips","text":"Below are some general guidelines for the installation of the device: Avoid areas with moist accumulation when possible Avoid temperature and humidity transients Avoid covering the sensors in front of the sensors, specially the PM sensor Avoid covering the microphone and particles to go in the microphone port Avoid direct flow towards the sensors. If exposed under flow conditions, have the flow go parallel to the sensors' surface Despite the umbrella cover, sun radiation and transients are better to be avoided A good height for installing the sensors is somewhere between 2-3m, but it all depends on the case study and available support structures.","title":"Deployment tips"},{"location":"includes/aq-stations/#sensor-placement","text":"The device should never be placed horizontally (wide side flat on a surface). This placement would cover completely the sensor inlets, or leave them exposed to dust accumulation. Likewise, the sensors, do not work properly on this configuration. For indoor placement, check the placement below: For outdoow placement, if you are using the umbrella, check the image below. Sensors should be facing down :","title":"Sensor placement"},{"location":"includes/aq-stations/#handling-calibration-data","text":"Some components of the Station have individual calibrations such as the Alphasense Electrochemical Sensors. For this reason, it's necessary to store the physical ID (hardware ID) of the Station alonside to the virtual device in the Smart Citizen Platform. The harwdware ID should normally be in a sticker to the enclosure both inside and outside and looks like this: SCAS2100XX This number is important to relate to the actual calibration values of the sensors, stored in the data repository . In order to postprocess the data and calculate pollutants, make sure that the Hardware ID is safely stored in the platform's device, by posting this data to postprocessing_info field of the device. You can follow these instructions to store the postprocessing_info of your device. All the data is sent in raw to the Smart Citizen Platform and it's then processed outside of the sensors themselves. Both raw, and processed data are kept on the platform and can be accessed at any time. Data can be published to other APIs or to Zenodo as well, in case of research projects that seek contribution to Open Science Datasets. More on the processing of the data Check this guide to learn more about how to postprocess the data of the sensors your own way.","title":"Handling calibration data"},{"location":"includes/pre-calibration-water-stations/","text":"Pre-calibration water stations \u00b6 Warning When calibrating don't use the normal read sensor command , this command applies temperature/salinity compensation, calibration should be done without any compensation. Instead you should use control sensorName com,r and that will return the raw metrics that sensor can provide. On the documentation of each sensor calibration procedure we describe the format of this metrics.","title":"Pre-calibration water stations"},{"location":"includes/pre-calibration-water-stations/#pre-calibration-water-stations","text":"Warning When calibrating don't use the normal read sensor command , this command applies temperature/salinity compensation, calibration should be done without any compensation. Instead you should use control sensorName com,r and that will return the raw metrics that sensor can provide. On the documentation of each sensor calibration procedure we describe the format of this metrics.","title":"Pre-calibration water stations"},{"location":"includes/references/","text":"Szulczy\u0144ski, Bartosz, and Jacek G\u0119bicki. \u201cCurrently Commercially Available Chemical Sensors Employed for Detection of Volatile Organic Compounds in Outdoor and Indoor Air.\u201d Environments 4, no. 1 (March 6, 2017): 21. https://doi.org/10.3390/environments4010021 . \u21a9 Chojer, H., P.T.B.S. Branco, F.G. Martins, M.C.M. Alvim-Ferraz, and S.I.V. Sousa. \u201cDevelopment of Low-Cost Indoor Air Quality Monitoring Devices: Recent Advancements.\u201d Science of The Total Environment 727 (July 2020): 138385. https://doi.org/10.1016/j.scitotenv.2020.138385 . \u21a9 Branco, P.T.B.S., M.C.M. Alvim-Ferraz, F.G. Martins, and S.I.V. Sousa. \u201cQuantifying Indoor Air Quality Determinants in Urban and Rural Nursery and Primary Schools.\u201d Environmental Research 176 (September 2019): 108534. https://doi.org/10.1016/j.envres.2019.108534 . \u21a9 Who Guidelines for Indoor Air Quality Selected Pollutants. WHO, 2010. https://apps.who.int/iris/handle/10665/260127 . \u21a9 Halima Hadziahmetovic, Rejhana Blazevic, Mirela Alispahic, Sanda Midzic Kurtagic, and Raza Sunulahpasic. \u201cANALYSIS OF PARAMETERS INFLUENCING THE INDOOR AIR QUALITY.\u201d 33RD DAAAM INTERNATIONAL SYMPOSIUM ON INTELLIGENT MANUFACTURING AND AUTOMATION, n.d. https://www.daaam.info/Downloads/Pdfs/proceedings/proceedings_2022/working_papers/dpn22391_a_1_Hadziahmetovic.pdf . \u21a9 Kuula, Joel, Timo M\u00e4kel\u00e4, Minna Aurela, Kimmo Teinil\u00e4, Samu Varjonen, \u00d3scar Gonz\u00e1lez, and Hilkka Timonen. \u201cLaboratory Evaluation of Particle-Size Selectivity of Optical Low-Cost Particulate Matter Sensors.\u201d Atmospheric Measurement Techniques 13, no. 5 (May 15, 2020): 2413\u201323. https://doi.org/10.5194/amt-13-2413-2020 . \u21a9 Alfano, Brigida, Luigi Barretta, Antonio Del Giudice, Saverio De Vito, Girolamo Di Francia, Elena Esposito, Fabrizio Formisano, Ettore Massera, Maria Lucia Miglietta, and Tiziana Polichetti. \u201cA Review of Low-Cost Particulate Matter Sensors from the Developers\u2019 Perspectives.\u201d Sensors 20, no. 23 (November 29, 2020): 6819. https://doi.org/10.3390/s20236819 . \u21a9 TDK Smart Environ Product Page (Accessed January 2023) https://invensense.tdk.com/smartenviro/ \u21a9 Hall, E., S. Kaushik, R. Vanderpool, R. Duvall, M. Beaver, R. Long, AND P. Solomon. Integrating Sensor Monitoring Technology into the Current Air Pollution Regulatory Support Paradigm: Practical Considerations. American Journal of Environmental Engineering. Scientific & Academic Publishing, Rosemead, CA, 4(6):147-154, (2014). \u21a9 South Coast AQMD AQ-SPEC (Accessed january 2023) http://www.aqmd.gov/aq-spec/evaluations \u21a9 Airparif Site (Accessed January 2023) https://airparif.asso.fr/en/node/110 \u21a9 Piera Systems Intelligent Particle Sensors (Accessed January 2023): https://pierasystems.com/intelligent-particle-sensors/ \u21a9 Sensor specification statement Particulate Matter Sensors (Accessed January 2023) https://sensirion.com/media/documents/B7AAA101/61653FB8/Sensirion_Particulate_Matter_AppNotes_Specification_Statement.pdf \u21a9 Clements, A., S. Lung, A. Arfire, AND A. Polidori. An Update on Low-Cost Sensors for the Measurement of Atmospheric Composition: Evaluation Activities. An Update on Low-Cost Sensors for the Measurement of Atmospheric Composition. World Meteorological Organization, Geneva, Switzerland, , NA, (2020). \u21a9 Li, Zhisheng, Qingmei Wen, and Ruilin Zhang. \u201cSources, Health Effects and Control Strategies of Indoor Fine Particulate Matter (PM2.5): A Review.\u201d Science of The Total Environment 586 (May 2017): 610\u201322. https://doi.org/10.1016/j.scitotenv.2017.02.029 . \u21a9 Park, Jihoon, Seunghon Ham, Miyeon Jang, Jinho Lee, Sunju Kim, Sungkyoon Kim, Kiyoung Lee, et al. \u201cSpatial\u2013Temporal Dispersion of Aerosolized Nanoparticles During the Use of Consumer Spray Products and Estimates of Inhalation Exposure.\u201d Environmental Science & Technology 51, no. 13 (July 5, 2017): 7624\u201338. https://doi.org/10.1021/acs.est.7b00211 . \u21a9 Dacunto, Philip J., Kai-Chung Cheng, Viviana Acevedo-Bolton, Ruo-Ting Jiang, Neil E. Klepeis, James L. Repace, Wayne R. Ott, and Lynn M. Hildemann. \u201cReal-Time Particle Monitor Calibration Factors and PM2.5 Emission Factors for Multiple Indoor Sources.\u201d Environmental Science: Processes & Impacts 15, no. 8 (2013): 1511. https://doi.org/10.1039/c3em00209h . \u21a9 Taner, Simge, Beyhan Pekey, and Hakan Pekey. \u201cFine Particulate Matter in the Indoor Air of Barbeque Restaurants: Elemental Compositions, Sources and Health Risks.\u201d Science of The Total Environment 454\u2013455 (June 2013): 79\u201387. https://doi.org/10.1016/j.scitotenv.2013.03.018 . \u21a9 Di Antonio, Andrea, Olalekan Popoola, Bin Ouyang, John Saffell, and Roderic Jones. \u201cDeveloping a Relative Humidity Correction for Low-Cost Sensors Measuring Ambient Particulate Matter.\u201d Sensors 18, no. 9 (August 24, 2018): 2790. https://doi.org/10.3390/s18092790 . \u21a9 Wang, Yang, Jiayu Li, He Jing, Qiang Zhang, Jingkun Jiang, and Pratim Biswas. \u201cLaboratory Evaluation and Calibration of Three Low-Cost Particle Sensors for Particulate Matter Measurement.\u201d Aerosol Science and Technology 49, no. 11 (November 2, 2015): 1063\u201377. https://doi.org/10.1080/02786826.2015.1100710 . \u21a9 iSCAPE Project Deliverable 7.8 Sensor monitoring experiences and technological innovations (November 2019). (Accessed January 2023) https://www.iscapeproject.eu/wp-content/uploads/2020/06/iSCAPE_D7.8_Sensor-monitoring-experiences-and-technological-innovations.pdf \u21a9 Dinh, Trieu-Vuong, In-Young Choi, Youn-Suk Son, and Jo-Chun Kim. \u201cA Review on Non-Dispersive Infrared Gas Sensors: Improvement of Sensor Detection Limit and Interference Correction.\u201d Sensors and Actuators B: Chemical 231 (August 2016): 529\u201338. https://doi.org/10.1016/j.snb.2016.03.040 . \u21a9 M\u00fcller, Michael, Peter Graf, Jonas Meyer, Anastasia Pentina, Dominik Brunner, Fernando Perez-Cruz, Christoph H\u00fcglin, and Lukas Emmenegger. \u201cIntegration and Calibration of Non-Dispersive Infrared (NDIR) CO2 Low-Cost Sensors and Their Operation in a Sensor Network Covering Switzerland.\u201d Atmospheric Measurement Techniques 13, no. 7 (July 15, 2020): 3815\u201334. https://doi.org/10.5194/amt-13-3815-2020 . \u21a9 Sensirion SCD30 Field Calibration Application Note (Accessed January 2023) https://sensirion.com/media/documents/33C09C07/620638B8/Sensirion_SCD30_Field_Calibration.pdf \u21a9 Demanega, Ingrid, Igor Mujan, Brett C. Singer, Aleksandar S. An\u0111elkovi\u0107, Francesco Babich, and Dusan Licina. \u201cPerformance Assessment of Low-Cost Environmental Monitors and Single Sensors under Variable Indoor Air Quality and Thermal Conditions.\u201d Building and Environment 187 (January 2021): 107415. https://doi.org/10.1016/j.buildenv.2020.107415 . \u21a9 Zheng, Hailin, Vinayak Krishnan, Shalika Walker, Marcel Loomans, and Wim Zeiler. \u201cLaboratory Evaluation of Low-Cost Air Quality Monitors and Single Sensors for Monitoring Typical Indoor Emission Events in Dutch Daycare Centers.\u201d Environment International 166 (August 2022): 107372. https://doi.org/10.1016/j.envint.2022.107372 . \u21a9 Tryner, Jessica, John Mehaffy, Daniel Miller-Lionberg, and John Volckens. \u201cEffects of Aerosol Type and Simulated Aging on Performance of Low-Cost PM Sensors.\u201d Journal of Aerosol Science 150 (December 2020): 105654. https://doi.org/10.1016/j.jaerosci.2020.105654 . \u21a9 Xu, Wei, Yunfei Cai, Song Gao, Shuang Hou, Yong Yang, Yusen Duan, Qingyan Fu, Fei Chen, and Jie Wu. \u201cNew Understanding of Miniaturized VOCs Monitoring Device: PID-Type Sensors Performance Evaluations in Ambient Air.\u201d Sensors and Actuators B: Chemical 330 (March 2021): 129285. https://doi.org/10.1016/j.snb.2020.129285 . \u21a9 Vogt, Matthias, Philipp Schneider, Nuria Castell, and Paul Hamer. \u201cAssessment of Low-Cost Particulate Matter Sensor Systems against Optical and Gravimetric Methods in a Field Co-Location in Norway.\u201d Atmosphere 12, no. 8 (July 27, 2021): 961. https://doi.org/10.3390/atmos12080961 . \u21a9 Tera NextPM product page (Accessed January 2023) https://tera-sensor.com/markets-products-services/nextpm/ . \u21a9 Tera NextPM AQ-SPEC Sensor evaluation (Accessed January 2023) http://www.aqmd.gov/aq-spec/sensordetail/tera-sensor---nextpm . \u21a9 Alphasense Ltd. Website (Accessed January 2023) https://alphasense.com/ . \u21a9 SPEC Sensor Website (Accessed January 2023) https://spec-sensors.com . \u21a9 Sensirion SCD41 Product Page (Accessed January 2023) https://sensirion.com/products/catalog/SCD41/ . \u21a9 Peltier, Richard & Castell, N\u00faria & Clements, Andrea & Dye, Tim & H\u00fcglin, Christoph & Kroll, Jesse & Shih-Chun, & Lung, Candice & Ning, Zhi & Parsons, Matthew & Penza, Michele & Reisen, Fabienne & von Schneidemesser, Erika & Arfire, Adrian & Boso, \u00c0lex & Fu, Qingyan & Hagan, David & Henshaw, Geoff & Jayaratne, Rohan & Zellweger, Christoph. \u201cAn Update on Low-Cost Sensors for the Measurement of Atmospheric Composition.\u201d Technical, 2021. https://www.researchgate.net/publication/351130704_An_update_on_low-cost_sensors_for_the_measurement_of_atmospheric_composition . \u21a9 Ouyang, Bin. \u201cFirst-Principles Algorithm for Air Quality Electrochemical Gas Sensors.\u201d ACS Sensors 5, no. 9 (September 25, 2020): 2742\u201346. https://doi.org/10.1021/acssensors.0c01129 . \u21a9 Popa, Daniel, and Florin Udrea. \u201cTowards Integrated Mid-Infrared Gas Sensors.\u201d Sensors 19, no. 9 (May 4, 2019): 2076. https://doi.org/10.3390/s19092076 . \u21a9 Marinov, Marin B., Nina Djermanova, Borislav Ganev, Georgi Nikolov, and Emilija Janchevska. \u201cPerformance Evaluation of Low-Cost Carbon Dioxide Sensors.\u201d In 2018 IEEE XXVII International Scientific Conference Electronics - ET, 1\u20134. Sozopol: IEEE, 2018. https://doi.org/10.1109/ET.2018.8549621 . \u21a9 Carsen Banister, Justin Berquist, and Talal Toushan. \u201cEvaluation of Low-Cost CO2 Sensors.\u201d National Research Council Canada, March 14, 2019. https://publications.gc.ca/collections/collection_2021/cnrc-nrc/NR24-35-2019-eng.pdf . \u21a9 Pang, Xiaobing, Haijun Nan, Jinping Zhong, Daiqi Ye, Marvin D. Shaw, and Alastair C. Lewis. \u201cLow-Cost Photoionization Sensors as Detectors in GC \u00d7 GC Systems Designed for Ambient VOC Measurements.\u201d Science of The Total Environment 664 (May 2019): 771\u201379. https://doi.org/10.1016/j.scitotenv.2019.01.348 . \u21a9 Spinelle, Laurent, Michel Gerboles, Gertjan Kok, Stefan Persijn, and Tilman Sauerwald. \u201cReview of Portable and Low-Cost Sensors for the Ambient Air Monitoring of Benzene and Other Volatile Organic Compounds.\u201d Sensors 17, no. 7 (June 28, 2017): 1520. https://doi.org/10.3390/s17071520 . \u21a9 Directive 2008/50/EC of the European Parliament and the Council of 21 May 2008 on ambient air quality and cleaner air for Europe. Available online: http://eur-lex.europa.eu/legal-content/EN/TXT/?uri=CELEX:32008L0050 (accessed on 7 August 2017) \u21a9 Edwards, Samuel J., Alastair C. Lewis, Stephen J. Andrews, Richard T. Lidster, Jacqueline F. Hamilton, and Christopher N. Rhodes. \u201cA Compact Comprehensive Two-Dimensional Gas Chromatography (GC\u00d7GC) Approach for the Analysis of Biogenic VOCs.\u201d Anal. Methods 5, no. 1 (2013): 141\u201350. https://doi.org/10.1039/C2AY25710F . \u21a9 Zhu, Hongbo, Jinyan She, Menglian Zhou, and Xudong Fan. \u201cRapid and Sensitive Detection of Formaldehyde Using Portable 2-Dimensional Gas Chromatography Equipped with Photoionization Detectors.\u201d Sensors and Actuators B: Chemical 283 (March 2019): 182\u201387. https://doi.org/10.1016/j.snb.2018.11.156 . \u21a9 Skog, Kate M., Fulizi Xiong, Hitoshi Kawashima, Evan Doyle, Ricardo Soto, and Drew R. Gentner. \u201cCompact, Automated, Inexpensive, and Field-Deployable Vacuum-Outlet Gas Chromatograph for Trace-Concentration Gas-Phase Organic Compounds.\u201d Analytical Chemistry 91, no. 2 (January 15, 2019): 1318\u201327. https://doi.org/10.1021/acs.analchem.8b03095 . \u21a9 Lewis, Alastair C., James D. Lee, Peter M. Edwards, Marvin D. Shaw, Mat J. Evans, Sarah J. Moller, Katie R. Smith, et al. \u201cEvaluating the Performance of Low Cost Chemical Sensors for Air Pollution Research.\u201d Faraday Discussions 189 (2016): 85\u2013103. https://doi.org/10.1039/C5FD00201J . \u21a9 Williams, R. \u201cNext Generation Air Monitoring (NGAM) VOC Sensor Evaluation Report,\u201d 2015. https://cfpub.epa.gov/si/si_public_record_report.cfm?Lab=NERL&dirEntryId=308114 . \u21a9 Frausto-Vicencio, Isis, Alondra Moreno, Hugh Goldsmith, Ying-Kuang Hsu, and Francesca M. Hopkins. \u201cCharacterizing the Performance of a Compact BTEX GC-PID for Near-Real Time Analysis and Field Deployment.\u201d Sensors 21, no. 6 (March 17, 2021): 2095. https://doi.org/10.3390/s21062095 . \u21a9 B\u00edlek, Ji\u0159\u00ed, Petr Mar\u0161olek, Ond\u0159ej B\u00edlek, and Pavel Bu\u010dek. \u201cField Test of Mini Photoionization Detector-Based Sensors\u2014Monitoring of Volatile Organic Pollutants in Ambient Air.\u201d Environments 9, no. 4 (April 10, 2022): 49. https://doi.org/10.3390/environments9040049 . \u21a9 Schieweck, Alexandra, Erik Uhde, Tunga Salthammer, Lea C. Salthammer, Lidia Morawska, Mandana Mazaheri, and Prashant Kumar. \u201cSmart Homes and the Control of Indoor Air Quality.\u201d Renewable and Sustainable Energy Reviews 94 (October 2018): 705\u201318. https://doi.org/10.1016/j.rser.2018.05.057 . \u21a9 Bur, C., M. Bastuck, D. Puglisi, A. Sch\u00fctze, A. Lloyd Spetz, and M. Andersson. \u201cDiscrimination and Quantification of Volatile Organic Compounds in the Ppb-Range with Gas Sensitive SiC-Field Effect Transistors.\u201d Procedia Engineering 87 (2014): 604\u20137. https://doi.org/10.1016/j.proeng.2014.11.561 . \u21a9 Collier-Oxandale, Ashley M., Jacob Thorson, Hannah Halliday, Jana Milford, and Michael Hannigan. \u201cUnderstanding the Ability of Low-Cost MOx Sensors to Quantify Ambient VOCs.\u201d Atmospheric Measurement Techniques 12, no. 3 (March 5, 2019): 1441\u201360. https://doi.org/10.5194/amt-12-1441-2019 . \u21a9 Herberger, S., M. Herold, H. Ulmer, A. Burdack-Freitag, and F. Mayer. \u201cDetection of Human Effluents by a MOS Gas Sensor in Correlation to VOC Quantification by GC/MS.\u201d Building and Environment 45, no. 11 (November 2010): 2430\u201339. https://doi.org/10.1016/j.buildenv.2010.05.005 . \u21a9 Leidinger, M., T. Sauerwald, T. Conrad, W. Reimringer, G. Ventura, and A. Sch\u00fctze. \u201cSelective Detection of Hazardous Indoor VOCs Using Metal Oxide Gas Sensors.\u201d Procedia Engineering 87 (2014): 1449\u201352. https://doi.org/10.1016/j.proeng.2014.11.722 . \u21a9 Andersson, M., M. Bastuck, J. Huotari, A. Lloyd Spetz, J. Lappalainen, A. Sch\u00fctze, and D. Puglisi. \u201cSiC-FET Sensors for Selective and Quantitative Detection of VOCs Down to Ppb Level.\u201d Procedia Engineering 168 (2016): 216\u201320. https://doi.org/10.1016/j.proeng.2016.11.165 . \u21a9 Sch\u00fctze, Andreas, Tobias Baur, Martin Leidinger, Wolfhard Reimringer, Ralf Jung, Thorsten Conrad, and Tilman Sauerwald. \u201cHighly Sensitive and Selective VOC Sensor Systems Based on Semiconductor Gas Sensors: How To?\u201d Environments 4, no. 1 (March 1, 2017): 20. https://doi.org/10.3390/environments4010020 . \u21a9 Collier-Oxandale, Ashley, Brandon Feenstra, Vasileios Papapostolou, Hang Zhang, Michelle Kuang, Berj Der Boghossian, and Andrea Polidori. \u201cField and Laboratory Performance Evaluations of 28 Gas-Phase Air Quality Sensors by the AQ-SPEC Program.\u201d Atmospheric Environment 220 (January 2020): 117092. https://doi.org/10.1016/j.atmosenv.2019.117092 . \u21a9 Kire\u0161ov\u00e1, Simona, Milan Guzan, and Branislav Sobota. \u201cUsing Low-Cost Sensors for Measuring and Monitoring Particulate Matter with a Focus on Fine and Ultrafine Particles.\u201d Atmosphere 14, no. 2 (February 6, 2023): 324. https://doi.org/10.3390/atmos14020324 . \u21a9 Blanco-Novoa, Oscar, Tiago Fern\u00e1ndez-Caram\u00e9s, Paula Fraga-Lamas, and Luis Castedo. \u201cA Cost-Effective IoT System for Monitoring Indoor Radon Gas Concentration.\u201d Sensors 18, no. 7 (July 8, 2018): 2198. https://doi.org/10.3390/s18072198 . \u21a9 Zeeb, Hajo, Ferid Shannoun, and World Health Organization. \u201cWHO Handbook on Indoor Radon: A Public Health Perspective,\u201d 2009. https://apps.who.int/iris/handle/10665/44149 . \u21a9 Camprodon, Guillem, \u00d3scar Gonz\u00e1lez, V\u00edctor Barber\u00e1n, M\u00e1ximo P\u00e9rez, Viktor Sm\u00e1ri, Miguel \u00c1ngel de Heras, and Alejandro Bizzotto. \u201cSmart Citizen Kit and Station: An Open Environmental Monitoring System for Citizen Participation and Scientific Experimentation.\u201d HardwareX 6 (October 2019): e00070. https://doi.org/10.1016/j.ohx.2019.e00070 . \u21a9 Smart Citizen Documentation https://docs.smartcitizen.me (Accessed January 2023) \u21a9 Barros, Paulo, Ant\u00f3nio Curado, and S\u00e9rgio Ivan Lopes. \u201cInternet of Things (IoT) Technologies for Managing Indoor Radon Risk Exposure: Applications, Opportunities, and Future Challenges.\u201d Applied Sciences 11, no. 22 (November 22, 2021): 11064. https://doi.org/10.3390/app112211064 . \u21a9 Blanco-Novoa, Oscar, Tiago Fern\u00e1ndez-Caram\u00e9s, Paula Fraga-Lamas, and Luis Castedo. \u201cA Cost-Effective IoT System for Monitoring Indoor Radon Gas Concentration.\u201d Sensors 18, no. 7 (July 8, 2018): 2198. https://doi.org/10.3390/s18072198 . \u21a9 Tunyagi, Arthur, Tiberius Dicu, Alexandra Cuco\u0219, Betty Denissa Burghele, Gabriel Dobrei, Alexandru Lupulescu, Mircea Moldovan, Dan Constantin Ni\u0163\u0103, Botond Papp, Kinga Szacsvai, A \u021aenter, Mihail Simion Beldean-Galea, Manuel Ant\u00f3n, \u0218. Grecu, L. Cioloca, Rene Milos, Marius Lucian Boto\u0219, Cosmin Gruia Chiorean, Tiberiu Catalina, Marian-Andrei Istrate and Carlos Sainz. \u201cAN INNOVATIVE SYSTEM FOR MONITORING RADON AND INDOOR AIR QUALITY.\u201d (2020). \u21a9 S\u00e1, Juliana P., Pedro T. B. S. Branco, Maria C. M. Alvim-Ferraz, Fernando G. Martins, and Sofia I. V. Sousa. \u201cRadon in Indoor Air: Towards Continuous Monitoring.\u201d Sustainability 14, no. 3 (January 28, 2022): 1529. https://doi.org/10.3390/su14031529 . \u21a9 Airthings Website (Accessed January 2023) https://www.airthings.com/ \u21a9 FTLab Radon Monitor Website (Accessed January 2023) http://radonftlab.com/radon-sensor-product/radon-sensor/rd200m/ \u21a9 Tesla TSRS Product Page (Accessed January 2023): https://www.tesla.cz/en/radon-concentration-measurement/ \u21a9 Tesla TSRS Datasheet (Accessed January 2023): https://www.tesla.cz/wp-content/uploads/2022/05/052-410-049-TSRS_probe_manual_en_v1.pdf \u21a9 Studni\u010dka, Filip, Jan \u0160t\u011bp\u00e1n, and Jan \u0160l\u00e9gr. \u201cLow-Cost Radon Detector with Low-Voltage Air-Ionization Chamber.\u201d Sensors 19, no. 17 (August 28, 2019): 3721. https://doi.org/10.3390/s19173721 . \u21a9 Alvarellos, Alberto, Marcos Gestal, Juli\u00e1n Dorado, and Juan Ram\u00f3n Rabu\u00f1al. \u201cDeveloping a Secure Low-Cost Radon Monitoring System.\u201d Sensors 20, no. 3 (January 29, 2020): 752. https://doi.org/10.3390/s20030752 . \u21a9 Alvarellos, Alberto, Andrea Lopez Chao, Juan Ram\u00f3n Rabu\u00f1al, Mar\u00eda D. Garc\u00eda-Vidaurr\u00e1zaga, and Alejandro Pazos. \u201cDevelopment of an Automatic Low-Cost Air Quality Control System: A Radon Application.\u201d Applied Sciences 11, no. 5 (March 1, 2021): 2169. https://doi.org/10.3390/app11052169 . \u21a9","title":"References"},{"location":"includes/specs/","text":"Technical Specs \u00b6 Absolute ratings \u00b6 Parameter Conditions Min Typ Max Units Operating Temperature -10 - 55 \u00baC Operating Humidity Storage - - 90 RH Electrical Characteristics \u00b6 Parameter Conditions Min Typ Max Units USB Supply Voltage - 5 5 5 V USB Supply Current - 0.01 0.4 2 A Battery Supply Voltage - 3.2 3.7 4.2 V Battery Charging Method Standard - 0.2C - - Battery Charging Method Fast - 0.5C - - Battery Charging Current Standard - 400 - mA Battery Charging Current Fast - 1000 - mA Battery Charging Time Standard - 6 - h Battery Charging Time Fast - 4 - h Battery Operating Temperature Charge - 6 - \u00baC Battery Operating Temperature Discharge -10 - 55 \u00baC Battery Life Cycles - 300 - - Cycles Related Documents: Battery datasheet Material Safety data sheet Connectivity \u00b6 Parameter Conditions Min Typ Max Units Wi-Fi Frequency Range - - 2412~2484 - MHz Transmit Power 802.11b - 16+-2dBm (@11Mbps) - - Transmit Power 802.11g - 14+-2dBm (@54Mbps) - - Transmit Power 802.11n - 13+-2dBm (@HT20, MCS7) - - Security - - WEP/WPA-PSK/WPA2-PSK - - Related Documents: Wi-Fi Antenna datasheet","title":"Technical Specs"},{"location":"includes/specs/#technical-specs","text":"","title":"Technical Specs"},{"location":"includes/specs/#absolute-ratings","text":"Parameter Conditions Min Typ Max Units Operating Temperature -10 - 55 \u00baC Operating Humidity Storage - - 90 RH","title":"Absolute ratings"},{"location":"includes/specs/#electrical-characteristics","text":"Parameter Conditions Min Typ Max Units USB Supply Voltage - 5 5 5 V USB Supply Current - 0.01 0.4 2 A Battery Supply Voltage - 3.2 3.7 4.2 V Battery Charging Method Standard - 0.2C - - Battery Charging Method Fast - 0.5C - - Battery Charging Current Standard - 400 - mA Battery Charging Current Fast - 1000 - mA Battery Charging Time Standard - 6 - h Battery Charging Time Fast - 4 - h Battery Operating Temperature Charge - 6 - \u00baC Battery Operating Temperature Discharge -10 - 55 \u00baC Battery Life Cycles - 300 - - Cycles Related Documents: Battery datasheet Material Safety data sheet","title":"Electrical Characteristics"},{"location":"includes/specs/#connectivity","text":"Parameter Conditions Min Typ Max Units Wi-Fi Frequency Range - - 2412~2484 - MHz Transmit Power 802.11b - 16+-2dBm (@11Mbps) - - Transmit Power 802.11g - 14+-2dBm (@54Mbps) - - Transmit Power 802.11n - 13+-2dBm (@HT20, MCS7) - - Security - - WEP/WPA-PSK/WPA2-PSK - - Related Documents: Wi-Fi Antenna datasheet","title":"Connectivity"},{"location":"includes/stations/","text":"Station specs \u00b6 Power \u00b6 Currently, the Smart Citizen Air Quality Stations have only been tested with an external power supply (230VAC to 5VDC), with a small battery for backup during power brownouts. Due to the number of sensors, and depending on the configuration the solution is normally not meant for long term deployment with just battery power. For detailed specifications of the power supply, visit the power supply section . Power DC Voltage 5V DC Current 2A recommended AC Voltage 230V into the Power Supply AC Current <0.16A into the Power Supply Battery or solar operation? The Station currently supports battery operation only for short periods of time (<2d days). Depending on the location, solar power might be available, but we do not recommend it unless you are willing to experiment . Connectivity \u00b6 Similar to the Smart Citizen Kit if you want to have your data online, the Smart Citizen Air Quality Station requires a Wi-Fi connection to report data to the platform . If not, the unit can also store data locally on its onboard sd-card. Read more about the operation modes and the supported networks .","title":"Stations"},{"location":"includes/stations/#station-specs","text":"","title":"Station specs"},{"location":"includes/stations/#power","text":"Currently, the Smart Citizen Air Quality Stations have only been tested with an external power supply (230VAC to 5VDC), with a small battery for backup during power brownouts. Due to the number of sensors, and depending on the configuration the solution is normally not meant for long term deployment with just battery power. For detailed specifications of the power supply, visit the power supply section . Power DC Voltage 5V DC Current 2A recommended AC Voltage 230V into the Power Supply AC Current <0.16A into the Power Supply Battery or solar operation? The Station currently supports battery operation only for short periods of time (<2d days). Depending on the location, solar power might be available, but we do not recommend it unless you are willing to experiment .","title":"Power"},{"location":"includes/stations/#connectivity","text":"Similar to the Smart Citizen Kit if you want to have your data online, the Smart Citizen Air Quality Station requires a Wi-Fi connection to report data to the platform . If not, the unit can also store data locally on its onboard sd-card. Read more about the operation modes and the supported networks .","title":"Connectivity"},{"location":"includes/water-probes-reset/","text":"Water probes reset \u00b6 Factory reset procedure \u00b6 Why is this needed? You may need to do a factory reset for water sensors for different reasons. However, the most common case is a wrong calibration process and it's very much related to a wrongful automatic temperature compensation of the sensor while calibrating the sensor. To explain further: EC, DO and pH sensor readings are automatically compensated by temperature readings. If there is an existing temperature correction in the EZO driver, or there is a correction in the middle of the calibration process, the data available for the calibration process will be invalid. Follow the steps below to be make sure there is no correction while you calibrate the probes. Each EZO driver has it's independent calibration and status. This process needs to be done per driver (i.e. per EZO metric). To make a factory reset procedure for the EZO drivers follow the steps below: Make sure that the Smart Citizen Data board will not take any readings while you follow the calibration process. The best option is to reset the configuration to the defaults. Make sure you back-up your information before: The config command will output your current configuration. Copy it and keep it safe: config Then issue the default configuration: config -defaults The LED should be red now (the Data Board is in Setup mode ) Issue the factory reset command to the driver in question. For instance, for the conductivity one: control cond com factory 0 Now you can check what the status of the device is: control cond com cal,? ?CAL,0 Reset the kit Follow the calibration process as you would normally would. Reconfigure the kit using the config command, by putting back the information you backed-up before: config -mode ... Danger After finishing the calibration process restart your SCK to start from a clean state.","title":"Water probes reset"},{"location":"includes/water-probes-reset/#water-probes-reset","text":"","title":"Water probes reset"},{"location":"includes/water-probes-reset/#factory-reset-procedure","text":"Why is this needed? You may need to do a factory reset for water sensors for different reasons. However, the most common case is a wrong calibration process and it's very much related to a wrongful automatic temperature compensation of the sensor while calibrating the sensor. To explain further: EC, DO and pH sensor readings are automatically compensated by temperature readings. If there is an existing temperature correction in the EZO driver, or there is a correction in the middle of the calibration process, the data available for the calibration process will be invalid. Follow the steps below to be make sure there is no correction while you calibrate the probes. Each EZO driver has it's independent calibration and status. This process needs to be done per driver (i.e. per EZO metric). To make a factory reset procedure for the EZO drivers follow the steps below: Make sure that the Smart Citizen Data board will not take any readings while you follow the calibration process. The best option is to reset the configuration to the defaults. Make sure you back-up your information before: The config command will output your current configuration. Copy it and keep it safe: config Then issue the default configuration: config -defaults The LED should be red now (the Data Board is in Setup mode ) Issue the factory reset command to the driver in question. For instance, for the conductivity one: control cond com factory 0 Now you can check what the status of the device is: control cond com cal,? ?CAL,0 Reset the kit Follow the calibration process as you would normally would. Reconfigure the kit using the config command, by putting back the information you backed-up before: config -mode ... Danger After finishing the calibration process restart your SCK to start from a clean state.","title":"Factory reset procedure"},{"location":"includes/water-sensors/","text":"Water Sensor Usage Considerations \u00b6 Preparing the probes \u00b6 Atlas Scientific has great documents on how to use their probes, and maintain them (all the images below are theirs). Many other probes by other manufacturers will have the same issues, as they are based on the similar working principles. Below we compile some guidelines specific to the sensors. Make sure you also follow the instructions on how to calibrate them as specified for each probe . All probes \u00b6 Most of the probes will generate potassium chloride (KCl) crystals that are fully harmless. Make sure you clean them with distilled water before use. _Image Credit: Atlas Scientific Once you are done using them, the probes that have a protective electrolyte solution (pH and ORP) will need to be put back in. Dissolved Oxygen \u00b6 The dissolved oxygen probe needs to be actively maintained. The datasheet has a good information on how to maintain and clean the probe. Here is a small brief: When you open the probe the first time, make sure you only open the rubber cap, and not any sensor component such as the membrane cap _Image Credit: Atlas Scientific The sensor has an electrolyte solution inside to support the chemical reaction in the electrodes. This solution depletes over time, as the sensor is used and it will generate a solid residue that needs to be cleaned periodically (roughly every 6 months for the Mini DO probe, but better to check) _Image Credit: Atlas Scientific You can recondition the sensor with a small file and remove all Zinc Oxyde. Make sure that the probe membrane is cleaned with a very soft brush both inside and outside. The membrane can be replaced if damaged. Make sure it is in good conditions because it will otherwise leak the electrolyte solution and the sensor will work erratically. _Image Credit: Atlas Scientific _Image Credit: Atlas Scientific First time use? Do it Even it the sensor is brand new, we recommend you follow this process to avoid issues. pH and ORP \u00b6 No particular consideration for these probes, other than they are very delicate: _Image Credit: Atlas Scientific Storage solution Both probes need storage solution in a small soaker bottle to prevent it from drying out. If the probe is not being used you need to put the soaker bottle back on. Maintenance \u00b6 Make sure that the sensors are cleaned frequently, specially if deployed on the field. In some cases, sensors will be affected by biofouling and they will need more or less often cleanup - in some cases weekly! Public Domain, Link","title":"Water Sensor Usage Considerations"},{"location":"includes/water-sensors/#water-sensor-usage-considerations","text":"","title":"Water Sensor Usage Considerations"},{"location":"includes/water-sensors/#preparing-the-probes","text":"Atlas Scientific has great documents on how to use their probes, and maintain them (all the images below are theirs). Many other probes by other manufacturers will have the same issues, as they are based on the similar working principles. Below we compile some guidelines specific to the sensors. Make sure you also follow the instructions on how to calibrate them as specified for each probe .","title":"Preparing the probes"},{"location":"includes/water-sensors/#all-probes","text":"Most of the probes will generate potassium chloride (KCl) crystals that are fully harmless. Make sure you clean them with distilled water before use. _Image Credit: Atlas Scientific Once you are done using them, the probes that have a protective electrolyte solution (pH and ORP) will need to be put back in.","title":"All probes"},{"location":"includes/water-sensors/#dissolved-oxygen","text":"The dissolved oxygen probe needs to be actively maintained. The datasheet has a good information on how to maintain and clean the probe. Here is a small brief: When you open the probe the first time, make sure you only open the rubber cap, and not any sensor component such as the membrane cap _Image Credit: Atlas Scientific The sensor has an electrolyte solution inside to support the chemical reaction in the electrodes. This solution depletes over time, as the sensor is used and it will generate a solid residue that needs to be cleaned periodically (roughly every 6 months for the Mini DO probe, but better to check) _Image Credit: Atlas Scientific You can recondition the sensor with a small file and remove all Zinc Oxyde. Make sure that the probe membrane is cleaned with a very soft brush both inside and outside. The membrane can be replaced if damaged. Make sure it is in good conditions because it will otherwise leak the electrolyte solution and the sensor will work erratically. _Image Credit: Atlas Scientific _Image Credit: Atlas Scientific First time use? Do it Even it the sensor is brand new, we recommend you follow this process to avoid issues.","title":"Dissolved Oxygen"},{"location":"includes/water-sensors/#ph-and-orp","text":"No particular consideration for these probes, other than they are very delicate: _Image Credit: Atlas Scientific Storage solution Both probes need storage solution in a small soaker bottle to prevent it from drying out. If the probe is not being used you need to put the soaker bottle back on.","title":"pH and ORP"},{"location":"includes/water-sensors/#maintenance","text":"Make sure that the sensors are cleaned frequently, specially if deployed on the field. In some cases, sensors will be affected by biofouling and they will need more or less often cleanup - in some cases weekly! Public Domain, Link","title":"Maintenance"}]}